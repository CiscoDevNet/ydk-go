// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-static package configuration.
// 
// This module contains definitions
// for the following management objects:
//   router-static: This class represents router static
//     configuration
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ip_static_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_static_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-static-cfg router-static}", reflect.TypeOf(RouterStatic{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-static-cfg:router-static", reflect.TypeOf(RouterStatic{}))
}

// RouterStatic
// This class represents router static configuration
type RouterStatic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF static configuration container.
    Vrfs RouterStatic_Vrfs

    // Default VRF configuration.
    DefaultVrf RouterStatic_DefaultVrf

    // The maximum number of static routes that can be configured.
    MaximumRoutes RouterStatic_MaximumRoutes
}

func (routerStatic *RouterStatic) GetEntityData() *types.CommonEntityData {
    routerStatic.EntityData.YFilter = routerStatic.YFilter
    routerStatic.EntityData.YangName = "router-static"
    routerStatic.EntityData.BundleName = "cisco_ios_xr"
    routerStatic.EntityData.ParentYangName = "Cisco-IOS-XR-ip-static-cfg"
    routerStatic.EntityData.SegmentPath = "Cisco-IOS-XR-ip-static-cfg:router-static"
    routerStatic.EntityData.AbsolutePath = routerStatic.EntityData.SegmentPath
    routerStatic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routerStatic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routerStatic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routerStatic.EntityData.Children = types.NewOrderedMap()
    routerStatic.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &routerStatic.Vrfs})
    routerStatic.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &routerStatic.DefaultVrf})
    routerStatic.EntityData.Children.Append("maximum-routes", types.YChild{"MaximumRoutes", &routerStatic.MaximumRoutes})
    routerStatic.EntityData.Leafs = types.NewOrderedMap()

    routerStatic.EntityData.YListKeys = []string {}

    return &(routerStatic.EntityData)
}

// RouterStatic_Vrfs
// VRF static configuration container
type RouterStatic_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF static configuration. The type is slice of RouterStatic_Vrfs_Vrf.
    Vrf []*RouterStatic_Vrfs_Vrf
}

func (vrfs *RouterStatic_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "router-static"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// RouterStatic_Vrfs_Vrf
// VRF static configuration
type RouterStatic_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Address family configuration.
    AddressFamily RouterStatic_Vrfs_Vrf_AddressFamily
}

func (vrf *RouterStatic_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("address-family", types.YChild{"AddressFamily", &vrf.AddressFamily})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily
// Address family configuration
type RouterStatic_Vrfs_Vrf_AddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 static configuration.
    Vrfipv4 RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4

    // IPv6 static configuration.
    Vrfipv6 RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6
}

func (addressFamily *RouterStatic_Vrfs_Vrf_AddressFamily) GetEntityData() *types.CommonEntityData {
    addressFamily.EntityData.YFilter = addressFamily.YFilter
    addressFamily.EntityData.YangName = "address-family"
    addressFamily.EntityData.BundleName = "cisco_ios_xr"
    addressFamily.EntityData.ParentYangName = "vrf"
    addressFamily.EntityData.SegmentPath = "address-family"
    addressFamily.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/" + addressFamily.EntityData.SegmentPath
    addressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamily.EntityData.Children = types.NewOrderedMap()
    addressFamily.EntityData.Children.Append("vrfipv4", types.YChild{"Vrfipv4", &addressFamily.Vrfipv4})
    addressFamily.EntityData.Children.Append("vrfipv6", types.YChild{"Vrfipv6", &addressFamily.Vrfipv6})
    addressFamily.EntityData.Leafs = types.NewOrderedMap()

    addressFamily.EntityData.YListKeys = []string {}

    return &(addressFamily.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4
// IPv4 static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unicast static configuration.
    VrfUnicast RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast

    // Multicast static configuration.
    VrfMulticast RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast
}

func (vrfipv4 *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4) GetEntityData() *types.CommonEntityData {
    vrfipv4.EntityData.YFilter = vrfipv4.YFilter
    vrfipv4.EntityData.YangName = "vrfipv4"
    vrfipv4.EntityData.BundleName = "cisco_ios_xr"
    vrfipv4.EntityData.ParentYangName = "address-family"
    vrfipv4.EntityData.SegmentPath = "vrfipv4"
    vrfipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/" + vrfipv4.EntityData.SegmentPath
    vrfipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfipv4.EntityData.Children = types.NewOrderedMap()
    vrfipv4.EntityData.Children.Append("vrf-unicast", types.YChild{"VrfUnicast", &vrfipv4.VrfUnicast})
    vrfipv4.EntityData.Children.Append("vrf-multicast", types.YChild{"VrfMulticast", &vrfipv4.VrfMulticast})
    vrfipv4.EntityData.Leafs = types.NewOrderedMap()

    vrfipv4.EntityData.YListKeys = []string {}

    return &(vrfipv4.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast
// Unicast static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology
}

func (vrfUnicast *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast) GetEntityData() *types.CommonEntityData {
    vrfUnicast.EntityData.YFilter = vrfUnicast.YFilter
    vrfUnicast.EntityData.YangName = "vrf-unicast"
    vrfUnicast.EntityData.BundleName = "cisco_ios_xr"
    vrfUnicast.EntityData.ParentYangName = "vrfipv4"
    vrfUnicast.EntityData.SegmentPath = "vrf-unicast"
    vrfUnicast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/" + vrfUnicast.EntityData.SegmentPath
    vrfUnicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfUnicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfUnicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfUnicast.EntityData.Children = types.NewOrderedMap()
    vrfUnicast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfUnicast.Topologies})
    vrfUnicast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfUnicast.VrfPrefixes})
    vrfUnicast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfUnicast.DefaultTopology})
    vrfUnicast.EntityData.Leafs = types.NewOrderedMap()

    vrfUnicast.EntityData.YListKeys = []string {}

    return &(vrfUnicast.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies
// Topology static configuration container
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology.
    Topology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology
}

func (topologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-unicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology
// Topology static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-unicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology
// Default topology configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-unicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast
// Multicast static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology
}

func (vrfMulticast *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast) GetEntityData() *types.CommonEntityData {
    vrfMulticast.EntityData.YFilter = vrfMulticast.YFilter
    vrfMulticast.EntityData.YangName = "vrf-multicast"
    vrfMulticast.EntityData.BundleName = "cisco_ios_xr"
    vrfMulticast.EntityData.ParentYangName = "vrfipv4"
    vrfMulticast.EntityData.SegmentPath = "vrf-multicast"
    vrfMulticast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/" + vrfMulticast.EntityData.SegmentPath
    vrfMulticast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfMulticast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfMulticast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfMulticast.EntityData.Children = types.NewOrderedMap()
    vrfMulticast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfMulticast.Topologies})
    vrfMulticast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfMulticast.VrfPrefixes})
    vrfMulticast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfMulticast.DefaultTopology})
    vrfMulticast.EntityData.Leafs = types.NewOrderedMap()

    vrfMulticast.EntityData.YListKeys = []string {}

    return &(vrfMulticast.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies
// Topology static configuration container
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology.
    Topology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology
}

func (topologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-multicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology
// Topology static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-multicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology
// Default topology configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-multicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6
// IPv6 static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unicast static configuration.
    VrfUnicast RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast

    // Multicast static configuration.
    VrfMulticast RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast
}

func (vrfipv6 *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6) GetEntityData() *types.CommonEntityData {
    vrfipv6.EntityData.YFilter = vrfipv6.YFilter
    vrfipv6.EntityData.YangName = "vrfipv6"
    vrfipv6.EntityData.BundleName = "cisco_ios_xr"
    vrfipv6.EntityData.ParentYangName = "address-family"
    vrfipv6.EntityData.SegmentPath = "vrfipv6"
    vrfipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/" + vrfipv6.EntityData.SegmentPath
    vrfipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfipv6.EntityData.Children = types.NewOrderedMap()
    vrfipv6.EntityData.Children.Append("vrf-unicast", types.YChild{"VrfUnicast", &vrfipv6.VrfUnicast})
    vrfipv6.EntityData.Children.Append("vrf-multicast", types.YChild{"VrfMulticast", &vrfipv6.VrfMulticast})
    vrfipv6.EntityData.Leafs = types.NewOrderedMap()

    vrfipv6.EntityData.YListKeys = []string {}

    return &(vrfipv6.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast
// Unicast static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology
}

func (vrfUnicast *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast) GetEntityData() *types.CommonEntityData {
    vrfUnicast.EntityData.YFilter = vrfUnicast.YFilter
    vrfUnicast.EntityData.YangName = "vrf-unicast"
    vrfUnicast.EntityData.BundleName = "cisco_ios_xr"
    vrfUnicast.EntityData.ParentYangName = "vrfipv6"
    vrfUnicast.EntityData.SegmentPath = "vrf-unicast"
    vrfUnicast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/" + vrfUnicast.EntityData.SegmentPath
    vrfUnicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfUnicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfUnicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfUnicast.EntityData.Children = types.NewOrderedMap()
    vrfUnicast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfUnicast.Topologies})
    vrfUnicast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfUnicast.VrfPrefixes})
    vrfUnicast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfUnicast.DefaultTopology})
    vrfUnicast.EntityData.Leafs = types.NewOrderedMap()

    vrfUnicast.EntityData.YListKeys = []string {}

    return &(vrfUnicast.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies
// Topology static configuration container
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology.
    Topology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology
}

func (topologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-unicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology
// Topology static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-unicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology
// Default topology configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-unicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast
// Multicast static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology
}

func (vrfMulticast *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast) GetEntityData() *types.CommonEntityData {
    vrfMulticast.EntityData.YFilter = vrfMulticast.YFilter
    vrfMulticast.EntityData.YangName = "vrf-multicast"
    vrfMulticast.EntityData.BundleName = "cisco_ios_xr"
    vrfMulticast.EntityData.ParentYangName = "vrfipv6"
    vrfMulticast.EntityData.SegmentPath = "vrf-multicast"
    vrfMulticast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/" + vrfMulticast.EntityData.SegmentPath
    vrfMulticast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfMulticast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfMulticast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfMulticast.EntityData.Children = types.NewOrderedMap()
    vrfMulticast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfMulticast.Topologies})
    vrfMulticast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfMulticast.VrfPrefixes})
    vrfMulticast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfMulticast.DefaultTopology})
    vrfMulticast.EntityData.Leafs = types.NewOrderedMap()

    vrfMulticast.EntityData.YListKeys = []string {}

    return &(vrfMulticast.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies
// Topology static configuration container
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology.
    Topology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology
}

func (topologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-multicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology
// Topology static configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-multicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology
// Default topology configuration
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-multicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_Vrfs_Vrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/vrfs/vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf
// Default VRF configuration
type RouterStatic_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family configuration.
    AddressFamily RouterStatic_DefaultVrf_AddressFamily
}

func (defaultVrf *RouterStatic_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "router-static"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("address-family", types.YChild{"AddressFamily", &defaultVrf.AddressFamily})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily
// Address family configuration
type RouterStatic_DefaultVrf_AddressFamily struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 static configuration.
    Vrfipv4 RouterStatic_DefaultVrf_AddressFamily_Vrfipv4

    // IPv6 static configuration.
    Vrfipv6 RouterStatic_DefaultVrf_AddressFamily_Vrfipv6
}

func (addressFamily *RouterStatic_DefaultVrf_AddressFamily) GetEntityData() *types.CommonEntityData {
    addressFamily.EntityData.YFilter = addressFamily.YFilter
    addressFamily.EntityData.YangName = "address-family"
    addressFamily.EntityData.BundleName = "cisco_ios_xr"
    addressFamily.EntityData.ParentYangName = "default-vrf"
    addressFamily.EntityData.SegmentPath = "address-family"
    addressFamily.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/" + addressFamily.EntityData.SegmentPath
    addressFamily.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamily.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamily.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamily.EntityData.Children = types.NewOrderedMap()
    addressFamily.EntityData.Children.Append("vrfipv4", types.YChild{"Vrfipv4", &addressFamily.Vrfipv4})
    addressFamily.EntityData.Children.Append("vrfipv6", types.YChild{"Vrfipv6", &addressFamily.Vrfipv6})
    addressFamily.EntityData.Leafs = types.NewOrderedMap()

    addressFamily.EntityData.YListKeys = []string {}

    return &(addressFamily.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4
// IPv4 static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unicast static configuration.
    VrfUnicast RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast

    // Multicast static configuration.
    VrfMulticast RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast
}

func (vrfipv4 *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4) GetEntityData() *types.CommonEntityData {
    vrfipv4.EntityData.YFilter = vrfipv4.YFilter
    vrfipv4.EntityData.YangName = "vrfipv4"
    vrfipv4.EntityData.BundleName = "cisco_ios_xr"
    vrfipv4.EntityData.ParentYangName = "address-family"
    vrfipv4.EntityData.SegmentPath = "vrfipv4"
    vrfipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/" + vrfipv4.EntityData.SegmentPath
    vrfipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfipv4.EntityData.Children = types.NewOrderedMap()
    vrfipv4.EntityData.Children.Append("vrf-unicast", types.YChild{"VrfUnicast", &vrfipv4.VrfUnicast})
    vrfipv4.EntityData.Children.Append("vrf-multicast", types.YChild{"VrfMulticast", &vrfipv4.VrfMulticast})
    vrfipv4.EntityData.Leafs = types.NewOrderedMap()

    vrfipv4.EntityData.YListKeys = []string {}

    return &(vrfipv4.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast
// Unicast static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology
}

func (vrfUnicast *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast) GetEntityData() *types.CommonEntityData {
    vrfUnicast.EntityData.YFilter = vrfUnicast.YFilter
    vrfUnicast.EntityData.YangName = "vrf-unicast"
    vrfUnicast.EntityData.BundleName = "cisco_ios_xr"
    vrfUnicast.EntityData.ParentYangName = "vrfipv4"
    vrfUnicast.EntityData.SegmentPath = "vrf-unicast"
    vrfUnicast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/" + vrfUnicast.EntityData.SegmentPath
    vrfUnicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfUnicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfUnicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfUnicast.EntityData.Children = types.NewOrderedMap()
    vrfUnicast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfUnicast.Topologies})
    vrfUnicast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfUnicast.VrfPrefixes})
    vrfUnicast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfUnicast.DefaultTopology})
    vrfUnicast.EntityData.Leafs = types.NewOrderedMap()

    vrfUnicast.EntityData.YListKeys = []string {}

    return &(vrfUnicast.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies
// Topology static configuration container
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology.
    Topology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology
}

func (topologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-unicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology
// Topology static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-unicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology
// Default topology configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-unicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast
// Multicast static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology
}

func (vrfMulticast *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast) GetEntityData() *types.CommonEntityData {
    vrfMulticast.EntityData.YFilter = vrfMulticast.YFilter
    vrfMulticast.EntityData.YangName = "vrf-multicast"
    vrfMulticast.EntityData.BundleName = "cisco_ios_xr"
    vrfMulticast.EntityData.ParentYangName = "vrfipv4"
    vrfMulticast.EntityData.SegmentPath = "vrf-multicast"
    vrfMulticast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/" + vrfMulticast.EntityData.SegmentPath
    vrfMulticast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfMulticast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfMulticast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfMulticast.EntityData.Children = types.NewOrderedMap()
    vrfMulticast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfMulticast.Topologies})
    vrfMulticast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfMulticast.VrfPrefixes})
    vrfMulticast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfMulticast.DefaultTopology})
    vrfMulticast.EntityData.Leafs = types.NewOrderedMap()

    vrfMulticast.EntityData.YListKeys = []string {}

    return &(vrfMulticast.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies
// Topology static configuration container
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology.
    Topology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology
}

func (topologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-multicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology
// Topology static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-multicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology
// Default topology configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-multicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv4_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv4/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6
// IPv6 static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Unicast static configuration.
    VrfUnicast RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast

    // Multicast static configuration.
    VrfMulticast RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast
}

func (vrfipv6 *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6) GetEntityData() *types.CommonEntityData {
    vrfipv6.EntityData.YFilter = vrfipv6.YFilter
    vrfipv6.EntityData.YangName = "vrfipv6"
    vrfipv6.EntityData.BundleName = "cisco_ios_xr"
    vrfipv6.EntityData.ParentYangName = "address-family"
    vrfipv6.EntityData.SegmentPath = "vrfipv6"
    vrfipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/" + vrfipv6.EntityData.SegmentPath
    vrfipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfipv6.EntityData.Children = types.NewOrderedMap()
    vrfipv6.EntityData.Children.Append("vrf-unicast", types.YChild{"VrfUnicast", &vrfipv6.VrfUnicast})
    vrfipv6.EntityData.Children.Append("vrf-multicast", types.YChild{"VrfMulticast", &vrfipv6.VrfMulticast})
    vrfipv6.EntityData.Leafs = types.NewOrderedMap()

    vrfipv6.EntityData.YListKeys = []string {}

    return &(vrfipv6.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast
// Unicast static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology
}

func (vrfUnicast *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast) GetEntityData() *types.CommonEntityData {
    vrfUnicast.EntityData.YFilter = vrfUnicast.YFilter
    vrfUnicast.EntityData.YangName = "vrf-unicast"
    vrfUnicast.EntityData.BundleName = "cisco_ios_xr"
    vrfUnicast.EntityData.ParentYangName = "vrfipv6"
    vrfUnicast.EntityData.SegmentPath = "vrf-unicast"
    vrfUnicast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/" + vrfUnicast.EntityData.SegmentPath
    vrfUnicast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfUnicast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfUnicast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfUnicast.EntityData.Children = types.NewOrderedMap()
    vrfUnicast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfUnicast.Topologies})
    vrfUnicast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfUnicast.VrfPrefixes})
    vrfUnicast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfUnicast.DefaultTopology})
    vrfUnicast.EntityData.Leafs = types.NewOrderedMap()

    vrfUnicast.EntityData.YListKeys = []string {}

    return &(vrfUnicast.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies
// Topology static configuration container
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology.
    Topology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology
}

func (topologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-unicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology
// Topology static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-unicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology
// Default topology configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-unicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfUnicast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-unicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast
// Multicast static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration container.
    Topologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies

    // The set of all Static Topologies for this AFI.
    VrfPrefixes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes

    // Default topology configuration.
    DefaultTopology RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology
}

func (vrfMulticast *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast) GetEntityData() *types.CommonEntityData {
    vrfMulticast.EntityData.YFilter = vrfMulticast.YFilter
    vrfMulticast.EntityData.YangName = "vrf-multicast"
    vrfMulticast.EntityData.BundleName = "cisco_ios_xr"
    vrfMulticast.EntityData.ParentYangName = "vrfipv6"
    vrfMulticast.EntityData.SegmentPath = "vrf-multicast"
    vrfMulticast.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/" + vrfMulticast.EntityData.SegmentPath
    vrfMulticast.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfMulticast.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfMulticast.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfMulticast.EntityData.Children = types.NewOrderedMap()
    vrfMulticast.EntityData.Children.Append("topologies", types.YChild{"Topologies", &vrfMulticast.Topologies})
    vrfMulticast.EntityData.Children.Append("vrf-prefixes", types.YChild{"VrfPrefixes", &vrfMulticast.VrfPrefixes})
    vrfMulticast.EntityData.Children.Append("default-topology", types.YChild{"DefaultTopology", &vrfMulticast.DefaultTopology})
    vrfMulticast.EntityData.Leafs = types.NewOrderedMap()

    vrfMulticast.EntityData.YListKeys = []string {}

    return &(vrfMulticast.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies
// Topology static configuration container
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Topology static configuration. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology.
    Topology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology
}

func (topologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies) GetEntityData() *types.CommonEntityData {
    topologies.EntityData.YFilter = topologies.YFilter
    topologies.EntityData.YangName = "topologies"
    topologies.EntityData.BundleName = "cisco_ios_xr"
    topologies.EntityData.ParentYangName = "vrf-multicast"
    topologies.EntityData.SegmentPath = "topologies"
    topologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/" + topologies.EntityData.SegmentPath
    topologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topologies.EntityData.Children = types.NewOrderedMap()
    topologies.EntityData.Children.Append("topology", types.YChild{"Topology", nil})
    for i := range topologies.Topology {
        topologies.EntityData.Children.Append(types.GetSegmentPath(topologies.Topology[i]), types.YChild{"Topology", topologies.Topology[i]})
    }
    topologies.EntityData.Leafs = types.NewOrderedMap()

    topologies.EntityData.YListKeys = []string {}

    return &(topologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology
// Topology static configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Topology name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    TopologyName interface{}

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
}

func (topology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology) GetEntityData() *types.CommonEntityData {
    topology.EntityData.YFilter = topology.YFilter
    topology.EntityData.YangName = "topology"
    topology.EntityData.BundleName = "cisco_ios_xr"
    topology.EntityData.ParentYangName = "topologies"
    topology.EntityData.SegmentPath = "topology" + types.AddKeyToken(topology.TopologyName, "topology-name")
    topology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/" + topology.EntityData.SegmentPath
    topology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    topology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    topology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    topology.EntityData.Children = types.NewOrderedMap()
    topology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &topology.VrfPrefixTopologies})
    topology.EntityData.Leafs = types.NewOrderedMap()
    topology.EntityData.Leafs.Append("topology-name", types.YLeaf{"TopologyName", topology.TopologyName})

    topology.EntityData.YListKeys = []string {"TopologyName"}

    return &(topology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_Topologies_Topology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/topologies/topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix.
    VrfPrefix []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix
}

func (vrfPrefixes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes) GetEntityData() *types.CommonEntityData {
    vrfPrefixes.EntityData.YFilter = vrfPrefixes.YFilter
    vrfPrefixes.EntityData.YangName = "vrf-prefixes"
    vrfPrefixes.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixes.EntityData.ParentYangName = "vrf-multicast"
    vrfPrefixes.EntityData.SegmentPath = "vrf-prefixes"
    vrfPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/" + vrfPrefixes.EntityData.SegmentPath
    vrfPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixes.EntityData.Children = types.NewOrderedMap()
    vrfPrefixes.EntityData.Children.Append("vrf-prefix", types.YChild{"VrfPrefix", nil})
    for i := range vrfPrefixes.VrfPrefix {
        vrfPrefixes.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixes.VrfPrefix[i]), types.YChild{"VrfPrefix", vrfPrefixes.VrfPrefix[i]})
    }
    vrfPrefixes.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixes.EntityData.YListKeys = []string {}

    return &(vrfPrefixes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
}

func (vrfPrefix *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix) GetEntityData() *types.CommonEntityData {
    vrfPrefix.EntityData.YFilter = vrfPrefix.YFilter
    vrfPrefix.EntityData.YangName = "vrf-prefix"
    vrfPrefix.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefix.EntityData.ParentYangName = "vrf-prefixes"
    vrfPrefix.EntityData.SegmentPath = "vrf-prefix" + types.AddKeyToken(vrfPrefix.Prefix, "prefix") + types.AddKeyToken(vrfPrefix.PrefixLength, "prefix-length")
    vrfPrefix.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/" + vrfPrefix.EntityData.SegmentPath
    vrfPrefix.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefix.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefix.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefix.EntityData.Children = types.NewOrderedMap()
    vrfPrefix.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefix.VrfRoute})
    vrfPrefix.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefix.VrfRecurseRoutes})
    vrfPrefix.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefix.VrfSegRoute})
    vrfPrefix.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefix.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefix.Prefix})
    vrfPrefix.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefix.PrefixLength})

    vrfPrefix.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefix.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_VrfPrefixes_VrfPrefix_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/vrf-prefixes/vrf-prefix/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology
// Default topology configuration
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of all Static Topologies for this AFI.
    VrfPrefixTopologies RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies
}

func (defaultTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology) GetEntityData() *types.CommonEntityData {
    defaultTopology.EntityData.YFilter = defaultTopology.YFilter
    defaultTopology.EntityData.YangName = "default-topology"
    defaultTopology.EntityData.BundleName = "cisco_ios_xr"
    defaultTopology.EntityData.ParentYangName = "vrf-multicast"
    defaultTopology.EntityData.SegmentPath = "default-topology"
    defaultTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/" + defaultTopology.EntityData.SegmentPath
    defaultTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultTopology.EntityData.Children = types.NewOrderedMap()
    defaultTopology.EntityData.Children.Append("vrf-prefix-topologies", types.YChild{"VrfPrefixTopologies", &defaultTopology.VrfPrefixTopologies})
    defaultTopology.EntityData.Leafs = types.NewOrderedMap()

    defaultTopology.EntityData.YListKeys = []string {}

    return &(defaultTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies
// The set of all Static Topologies for this AFI.
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology.
    VrfPrefixTopology []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
}

func (vrfPrefixTopologies *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopologies.EntityData.YFilter = vrfPrefixTopologies.YFilter
    vrfPrefixTopologies.EntityData.YangName = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopologies.EntityData.ParentYangName = "default-topology"
    vrfPrefixTopologies.EntityData.SegmentPath = "vrf-prefix-topologies"
    vrfPrefixTopologies.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/" + vrfPrefixTopologies.EntityData.SegmentPath
    vrfPrefixTopologies.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopologies.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopologies.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopologies.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopologies.EntityData.Children.Append("vrf-prefix-topology", types.YChild{"VrfPrefixTopology", nil})
    for i := range vrfPrefixTopologies.VrfPrefixTopology {
        vrfPrefixTopologies.EntityData.Children.Append(types.GetSegmentPath(vrfPrefixTopologies.VrfPrefixTopology[i]), types.YChild{"VrfPrefixTopology", vrfPrefixTopologies.VrfPrefixTopology[i]})
    }
    vrfPrefixTopologies.EntityData.Leafs = types.NewOrderedMap()

    vrfPrefixTopologies.EntityData.YListKeys = []string {}

    return &(vrfPrefixTopologies.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology
// A static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Destination prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Destination prefix length. The type is interface{}
    // with range: 0..128.
    PrefixLength interface{}

    // A connected or recursive  static route.
    VrfRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute

    // A recursive next VRF static route.
    VrfRecurseRoutes RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes

    // A static segment route.
    VrfSegRoute RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
}

func (vrfPrefixTopology *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology) GetEntityData() *types.CommonEntityData {
    vrfPrefixTopology.EntityData.YFilter = vrfPrefixTopology.YFilter
    vrfPrefixTopology.EntityData.YangName = "vrf-prefix-topology"
    vrfPrefixTopology.EntityData.BundleName = "cisco_ios_xr"
    vrfPrefixTopology.EntityData.ParentYangName = "vrf-prefix-topologies"
    vrfPrefixTopology.EntityData.SegmentPath = "vrf-prefix-topology" + types.AddKeyToken(vrfPrefixTopology.Prefix, "prefix") + types.AddKeyToken(vrfPrefixTopology.PrefixLength, "prefix-length")
    vrfPrefixTopology.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/" + vrfPrefixTopology.EntityData.SegmentPath
    vrfPrefixTopology.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfPrefixTopology.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfPrefixTopology.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfPrefixTopology.EntityData.Children = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Children.Append("vrf-route", types.YChild{"VrfRoute", &vrfPrefixTopology.VrfRoute})
    vrfPrefixTopology.EntityData.Children.Append("vrf-recurse-routes", types.YChild{"VrfRecurseRoutes", &vrfPrefixTopology.VrfRecurseRoutes})
    vrfPrefixTopology.EntityData.Children.Append("vrf-seg-route", types.YChild{"VrfSegRoute", &vrfPrefixTopology.VrfSegRoute})
    vrfPrefixTopology.EntityData.Leafs = types.NewOrderedMap()
    vrfPrefixTopology.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", vrfPrefixTopology.Prefix})
    vrfPrefixTopology.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfPrefixTopology.PrefixLength})

    vrfPrefixTopology.EntityData.YListKeys = []string {"Prefix", "PrefixLength"}

    return &(vrfPrefixTopology.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute
// A connected or recursive  static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    VrfNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
}

func (vrfRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute) GetEntityData() *types.CommonEntityData {
    vrfRoute.EntityData.YFilter = vrfRoute.YFilter
    vrfRoute.EntityData.YangName = "vrf-route"
    vrfRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRoute.EntityData.SegmentPath = "vrf-route"
    vrfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRoute.EntityData.SegmentPath
    vrfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRoute.EntityData.Children = types.NewOrderedMap()
    vrfRoute.EntityData.Children.Append("vrf-next-hop-table", types.YChild{"VrfNextHopTable", &vrfRoute.VrfNextHopTable})
    vrfRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfRoute.EntityData.YListKeys = []string {}

    return &(vrfRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
}

func (vrfNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfNextHopTable.EntityData.YFilter = vrfNextHopTable.YFilter
    vrfNextHopTable.EntityData.YangName = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopTable.EntityData.ParentYangName = "vrf-route"
    vrfNextHopTable.EntityData.SegmentPath = "vrf-next-hop-table"
    vrfNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/" + vrfNextHopTable.EntityData.SegmentPath
    vrfNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddress {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfNextHopTable.VrfNextHopExplicitPathName {
        vrfNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRoute_VrfNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-route/vrf-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes
// A recursive next VRF static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A recursive next vrf static route. The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute.
    VrfRecurseRoute []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
}

func (vrfRecurseRoutes *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoutes.EntityData.YFilter = vrfRecurseRoutes.YFilter
    vrfRecurseRoutes.EntityData.YangName = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoutes.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfRecurseRoutes.EntityData.SegmentPath = "vrf-recurse-routes"
    vrfRecurseRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfRecurseRoutes.EntityData.SegmentPath
    vrfRecurseRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoutes.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoutes.EntityData.Children.Append("vrf-recurse-route", types.YChild{"VrfRecurseRoute", nil})
    for i := range vrfRecurseRoutes.VrfRecurseRoute {
        vrfRecurseRoutes.EntityData.Children.Append(types.GetSegmentPath(vrfRecurseRoutes.VrfRecurseRoute[i]), types.YChild{"VrfRecurseRoute", vrfRecurseRoutes.VrfRecurseRoute[i]})
    }
    vrfRecurseRoutes.EntityData.Leafs = types.NewOrderedMap()

    vrfRecurseRoutes.EntityData.YListKeys = []string {}

    return &(vrfRecurseRoutes.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute
// A recursive next vrf static route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Fallback or recusive VRF name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // The set of nexthop information configured for this route.
    VrfRecursiveNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
}

func (vrfRecurseRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute) GetEntityData() *types.CommonEntityData {
    vrfRecurseRoute.EntityData.YFilter = vrfRecurseRoute.YFilter
    vrfRecurseRoute.EntityData.YangName = "vrf-recurse-route"
    vrfRecurseRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfRecurseRoute.EntityData.ParentYangName = "vrf-recurse-routes"
    vrfRecurseRoute.EntityData.SegmentPath = "vrf-recurse-route" + types.AddKeyToken(vrfRecurseRoute.VrfName, "vrf-name")
    vrfRecurseRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/" + vrfRecurseRoute.EntityData.SegmentPath
    vrfRecurseRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecurseRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecurseRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecurseRoute.EntityData.Children = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Children.Append("vrf-recursive-next-hop-table", types.YChild{"VrfRecursiveNextHopTable", &vrfRecurseRoute.VrfRecursiveNextHopTable})
    vrfRecurseRoute.EntityData.Leafs = types.NewOrderedMap()
    vrfRecurseRoute.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrfRecurseRoute.VrfName})

    vrfRecurseRoute.EntityData.YListKeys = []string {"VrfName"}

    return &(vrfRecurseRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
}

func (vrfRecursiveNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable) GetEntityData() *types.CommonEntityData {
    vrfRecursiveNextHopTable.EntityData.YFilter = vrfRecursiveNextHopTable.YFilter
    vrfRecursiveNextHopTable.EntityData.YangName = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    vrfRecursiveNextHopTable.EntityData.ParentYangName = "vrf-recurse-route"
    vrfRecursiveNextHopTable.EntityData.SegmentPath = "vrf-recursive-next-hop-table"
    vrfRecursiveNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/" + vrfRecursiveNextHopTable.EntityData.SegmentPath
    vrfRecursiveNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfRecursiveNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfRecursiveNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfRecursiveNextHopTable.EntityData.Children = types.NewOrderedMap()
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", vrfRecursiveNextHopTable.VrfNextHopInterfaceName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddress {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", vrfRecursiveNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range vrfRecursiveNextHopTable.VrfNextHopExplicitPathName {
        vrfRecursiveNextHopTable.EntityData.Children.Append(types.GetSegmentPath(vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", vrfRecursiveNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    vrfRecursiveNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    vrfRecursiveNextHopTable.EntityData.YListKeys = []string {}

    return &(vrfRecursiveNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfRecurseRoutes_VrfRecurseRoute_VrfRecursiveNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "vrf-recursive-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-recurse-routes/vrf-recurse-route/vrf-recursive-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute
// A static segment route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The set of nexthop information configured for this route.
    SegmentRouteNextHopTable RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
}

func (vrfSegRoute *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute) GetEntityData() *types.CommonEntityData {
    vrfSegRoute.EntityData.YFilter = vrfSegRoute.YFilter
    vrfSegRoute.EntityData.YangName = "vrf-seg-route"
    vrfSegRoute.EntityData.BundleName = "cisco_ios_xr"
    vrfSegRoute.EntityData.ParentYangName = "vrf-prefix-topology"
    vrfSegRoute.EntityData.SegmentPath = "vrf-seg-route"
    vrfSegRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/" + vrfSegRoute.EntityData.SegmentPath
    vrfSegRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfSegRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfSegRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfSegRoute.EntityData.Children = types.NewOrderedMap()
    vrfSegRoute.EntityData.Children.Append("segment-route-next-hop-table", types.YChild{"SegmentRouteNextHopTable", &vrfSegRoute.SegmentRouteNextHopTable})
    vrfSegRoute.EntityData.Leafs = types.NewOrderedMap()

    vrfSegRoute.EntityData.YListKeys = []string {}

    return &(vrfSegRoute.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable
// The set of nexthop information configured for
// this route
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName.
    VrfNextHopInterfaceName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress.
    VrfNextHopInterfaceNameNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress.
    VrfNextHopNextHopAddress []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName.
    VrfNextHopNextHopAddressExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName

    // A forwarding interface or Segement Routing mpls path name and/or the
    // address of a nexthop router for this route (one of these must be
    // specified). The type is slice of
    // RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName.
    VrfNextHopExplicitPathName []*RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
}

func (segmentRouteNextHopTable *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable) GetEntityData() *types.CommonEntityData {
    segmentRouteNextHopTable.EntityData.YFilter = segmentRouteNextHopTable.YFilter
    segmentRouteNextHopTable.EntityData.YangName = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.BundleName = "cisco_ios_xr"
    segmentRouteNextHopTable.EntityData.ParentYangName = "vrf-seg-route"
    segmentRouteNextHopTable.EntityData.SegmentPath = "segment-route-next-hop-table"
    segmentRouteNextHopTable.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/" + segmentRouteNextHopTable.EntityData.SegmentPath
    segmentRouteNextHopTable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    segmentRouteNextHopTable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    segmentRouteNextHopTable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    segmentRouteNextHopTable.EntityData.Children = types.NewOrderedMap()
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name", types.YChild{"VrfNextHopInterfaceName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceName[i]), types.YChild{"VrfNextHopInterfaceName", segmentRouteNextHopTable.VrfNextHopInterfaceName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-interface-name-next-hop-address", types.YChild{"VrfNextHopInterfaceNameNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]), types.YChild{"VrfNextHopInterfaceNameNextHopAddress", segmentRouteNextHopTable.VrfNextHopInterfaceNameNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address", types.YChild{"VrfNextHopNextHopAddress", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddress {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]), types.YChild{"VrfNextHopNextHopAddress", segmentRouteNextHopTable.VrfNextHopNextHopAddress[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-next-hop-address-explicit-path-name", types.YChild{"VrfNextHopNextHopAddressExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]), types.YChild{"VrfNextHopNextHopAddressExplicitPathName", segmentRouteNextHopTable.VrfNextHopNextHopAddressExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Children.Append("vrf-next-hop-explicit-path-name", types.YChild{"VrfNextHopExplicitPathName", nil})
    for i := range segmentRouteNextHopTable.VrfNextHopExplicitPathName {
        segmentRouteNextHopTable.EntityData.Children.Append(types.GetSegmentPath(segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]), types.YChild{"VrfNextHopExplicitPathName", segmentRouteNextHopTable.VrfNextHopExplicitPathName[i]})
    }
    segmentRouteNextHopTable.EntityData.Leafs = types.NewOrderedMap()

    segmentRouteNextHopTable.EntityData.YListKeys = []string {}

    return &(segmentRouteNextHopTable.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceName) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceName.EntityData.YFilter = vrfNextHopInterfaceName.YFilter
    vrfNextHopInterfaceName.EntityData.YangName = "vrf-next-hop-interface-name"
    vrfNextHopInterfaceName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceName.EntityData.SegmentPath = "vrf-next-hop-interface-name" + types.AddKeyToken(vrfNextHopInterfaceName.InterfaceName, "interface-name")
    vrfNextHopInterfaceName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceName.EntityData.SegmentPath
    vrfNextHopInterfaceName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceName.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceName.InterfaceName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceName.BfdFastDetect})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceName.MinimumInterval})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceName.DetectMultiplier})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceName.Metric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceName.Tag})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceName.Permanent})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceName.VrfLable})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceName.TunnelId})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceName.ObjectName})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceName.Description})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceName.LoadMetric})
    vrfNextHopInterfaceName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceName.Index})

    vrfNextHopInterfaceName.EntityData.YListKeys = []string {"InterfaceName"}

    return &(vrfNextHopInterfaceName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Forwarding interface. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopInterfaceNameNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopInterfaceNameNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YFilter = vrfNextHopInterfaceNameNextHopAddress.YFilter
    vrfNextHopInterfaceNameNextHopAddress.EntityData.YangName = "vrf-next-hop-interface-name-next-hop-address"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-interface-name-next-hop-address" + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.InterfaceName, "interface-name") + types.AddKeyToken(vrfNextHopInterfaceNameNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopInterfaceNameNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopInterfaceNameNextHopAddress.EntityData.SegmentPath
    vrfNextHopInterfaceNameNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopInterfaceNameNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", vrfNextHopInterfaceNameNextHopAddress.InterfaceName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopInterfaceNameNextHopAddress.NextHopAddress})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopInterfaceNameNextHopAddress.BfdFastDetect})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopInterfaceNameNextHopAddress.MinimumInterval})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopInterfaceNameNextHopAddress.DetectMultiplier})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopInterfaceNameNextHopAddress.Metric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopInterfaceNameNextHopAddress.Tag})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopInterfaceNameNextHopAddress.Permanent})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopInterfaceNameNextHopAddress.VrfLable})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopInterfaceNameNextHopAddress.TunnelId})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopInterfaceNameNextHopAddress.ObjectName})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopInterfaceNameNextHopAddress.Description})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopInterfaceNameNextHopAddress.LoadMetric})
    vrfNextHopInterfaceNameNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopInterfaceNameNextHopAddress.Index})

    vrfNextHopInterfaceNameNextHopAddress.EntityData.YListKeys = []string {"InterfaceName", "NextHopAddress"}

    return &(vrfNextHopInterfaceNameNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddress *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddress) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddress.EntityData.YFilter = vrfNextHopNextHopAddress.YFilter
    vrfNextHopNextHopAddress.EntityData.YangName = "vrf-next-hop-next-hop-address"
    vrfNextHopNextHopAddress.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddress.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddress.EntityData.SegmentPath = "vrf-next-hop-next-hop-address" + types.AddKeyToken(vrfNextHopNextHopAddress.NextHopAddress, "next-hop-address")
    vrfNextHopNextHopAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddress.EntityData.SegmentPath
    vrfNextHopNextHopAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddress.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddress.NextHopAddress})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddress.BfdFastDetect})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddress.MinimumInterval})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddress.DetectMultiplier})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddress.Metric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddress.Tag})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddress.Permanent})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddress.VrfLable})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddress.TunnelId})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddress.ObjectName})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddress.Description})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddress.LoadMetric})
    vrfNextHopNextHopAddress.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddress.Index})

    vrfNextHopNextHopAddress.EntityData.YListKeys = []string {"NextHopAddress"}

    return &(vrfNextHopNextHopAddress.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Next hop address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopNextHopAddressExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopNextHopAddressExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YFilter = vrfNextHopNextHopAddressExplicitPathName.YFilter
    vrfNextHopNextHopAddressExplicitPathName.EntityData.YangName = "vrf-next-hop-next-hop-address-explicit-path-name"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-next-hop-address-explicit-path-name" + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.NextHopAddress, "next-hop-address") + types.AddKeyToken(vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopNextHopAddressExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopNextHopAddressExplicitPathName.EntityData.SegmentPath
    vrfNextHopNextHopAddressExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopNextHopAddressExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("next-hop-address", types.YLeaf{"NextHopAddress", vrfNextHopNextHopAddressExplicitPathName.NextHopAddress})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopNextHopAddressExplicitPathName.ExplicitPathName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopNextHopAddressExplicitPathName.BfdFastDetect})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopNextHopAddressExplicitPathName.MinimumInterval})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopNextHopAddressExplicitPathName.DetectMultiplier})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopNextHopAddressExplicitPathName.Metric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopNextHopAddressExplicitPathName.Tag})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopNextHopAddressExplicitPathName.Permanent})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopNextHopAddressExplicitPathName.VrfLable})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopNextHopAddressExplicitPathName.TunnelId})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopNextHopAddressExplicitPathName.ObjectName})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopNextHopAddressExplicitPathName.Description})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopNextHopAddressExplicitPathName.LoadMetric})
    vrfNextHopNextHopAddressExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopNextHopAddressExplicitPathName.Index})

    vrfNextHopNextHopAddressExplicitPathName.EntityData.YListKeys = []string {"NextHopAddress", "ExplicitPathName"}

    return &(vrfNextHopNextHopAddressExplicitPathName.EntityData)
}

// RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName
// A forwarding interface or Segement Routing mpls
// path name and/or the address of a nexthop router
// for this route (one of these must be specified)
type RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Segment Routing mpls path name. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ExplicitPathName interface{}

    // If set, bfd is enabled. The type is bool. The default value is false.
    BfdFastDetect interface{}

    // BFD Hello interval in milliseconds. The type is interface{} with range:
    // 3..30000. Units are millisecond. The default value is 100.
    MinimumInterval interface{}

    // BFD Detect Multiplier. The type is interface{} with range: 1..10. The
    // default value is 3.
    DetectMultiplier interface{}

    // Distance metric for this path. The type is interface{} with range: 1..254.
    // The default value is 1.
    Metric interface{}

    // Tag for this path. The type is interface{} with range: 1..4294967295.
    Tag interface{}

    // If set, path is permanent. The type is bool. The default value is false.
    Permanent interface{}

    // VRF LABEL. The type is interface{} with range: 0..4294967295. The default
    // value is 0.
    VrfLable interface{}

    // Tunnel ID for this path. The type is interface{} with range: 0..65535. The
    // default value is 0.
    TunnelId interface{}

    // Name of the object to track. The type is string with length: 1..32.
    ObjectName interface{}

    // Short Description of Static Route. The type is string.
    Description interface{}

    // UCMP load metric. The type is interface{} with range: 1..16777214. The
    // default value is 1.
    LoadMetric interface{}

    // Nexthop Identifier for OC Yang model. The type is string.
    Index interface{}
}

func (vrfNextHopExplicitPathName *RouterStatic_DefaultVrf_AddressFamily_Vrfipv6_VrfMulticast_DefaultTopology_VrfPrefixTopologies_VrfPrefixTopology_VrfSegRoute_SegmentRouteNextHopTable_VrfNextHopExplicitPathName) GetEntityData() *types.CommonEntityData {
    vrfNextHopExplicitPathName.EntityData.YFilter = vrfNextHopExplicitPathName.YFilter
    vrfNextHopExplicitPathName.EntityData.YangName = "vrf-next-hop-explicit-path-name"
    vrfNextHopExplicitPathName.EntityData.BundleName = "cisco_ios_xr"
    vrfNextHopExplicitPathName.EntityData.ParentYangName = "segment-route-next-hop-table"
    vrfNextHopExplicitPathName.EntityData.SegmentPath = "vrf-next-hop-explicit-path-name" + types.AddKeyToken(vrfNextHopExplicitPathName.ExplicitPathName, "explicit-path-name")
    vrfNextHopExplicitPathName.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/default-vrf/address-family/vrfipv6/vrf-multicast/default-topology/vrf-prefix-topologies/vrf-prefix-topology/vrf-seg-route/segment-route-next-hop-table/" + vrfNextHopExplicitPathName.EntityData.SegmentPath
    vrfNextHopExplicitPathName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNextHopExplicitPathName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNextHopExplicitPathName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNextHopExplicitPathName.EntityData.Children = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs = types.NewOrderedMap()
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("explicit-path-name", types.YLeaf{"ExplicitPathName", vrfNextHopExplicitPathName.ExplicitPathName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("bfd-fast-detect", types.YLeaf{"BfdFastDetect", vrfNextHopExplicitPathName.BfdFastDetect})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", vrfNextHopExplicitPathName.MinimumInterval})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("detect-multiplier", types.YLeaf{"DetectMultiplier", vrfNextHopExplicitPathName.DetectMultiplier})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", vrfNextHopExplicitPathName.Metric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tag", types.YLeaf{"Tag", vrfNextHopExplicitPathName.Tag})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("permanent", types.YLeaf{"Permanent", vrfNextHopExplicitPathName.Permanent})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("vrf-lable", types.YLeaf{"VrfLable", vrfNextHopExplicitPathName.VrfLable})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", vrfNextHopExplicitPathName.TunnelId})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("object-name", types.YLeaf{"ObjectName", vrfNextHopExplicitPathName.ObjectName})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNextHopExplicitPathName.Description})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", vrfNextHopExplicitPathName.LoadMetric})
    vrfNextHopExplicitPathName.EntityData.Leafs.Append("index", types.YLeaf{"Index", vrfNextHopExplicitPathName.Index})

    vrfNextHopExplicitPathName.EntityData.YListKeys = []string {"ExplicitPathName"}

    return &(vrfNextHopExplicitPathName.EntityData)
}

// RouterStatic_MaximumRoutes
// The maximum number of static routes that can be
// configured.
type RouterStatic_MaximumRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum number of static routes that can be configured for IPv6 AFI.
    // The type is interface{} with range: 1..140000. The default value is 4000.
    Ipv6Routes interface{}

    // The maximum number of static routes that can be configured for IPv4 AFI.
    // The type is interface{} with range: 1..140000. The default value is 4000.
    Ipv4Routes interface{}
}

func (maximumRoutes *RouterStatic_MaximumRoutes) GetEntityData() *types.CommonEntityData {
    maximumRoutes.EntityData.YFilter = maximumRoutes.YFilter
    maximumRoutes.EntityData.YangName = "maximum-routes"
    maximumRoutes.EntityData.BundleName = "cisco_ios_xr"
    maximumRoutes.EntityData.ParentYangName = "router-static"
    maximumRoutes.EntityData.SegmentPath = "maximum-routes"
    maximumRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-static-cfg:router-static/" + maximumRoutes.EntityData.SegmentPath
    maximumRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumRoutes.EntityData.Children = types.NewOrderedMap()
    maximumRoutes.EntityData.Leafs = types.NewOrderedMap()
    maximumRoutes.EntityData.Leafs.Append("ipv6-routes", types.YLeaf{"Ipv6Routes", maximumRoutes.Ipv6Routes})
    maximumRoutes.EntityData.Leafs.Append("ipv4-routes", types.YLeaf{"Ipv4Routes", maximumRoutes.Ipv4Routes})

    maximumRoutes.EntityData.YListKeys = []string {}

    return &(maximumRoutes.EntityData)
}

