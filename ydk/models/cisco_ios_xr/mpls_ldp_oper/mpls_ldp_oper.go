// This module contains a collection of YANG definitions
// for Cisco IOS-XR mpls-ldp package operational data.
// 
// This module contains definitions
// for the following management objects:
//   mpls-ldp: MPLS LDP operational data
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package mpls_ldp_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package mpls_ldp_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-ldp-oper mpls-ldp}", reflect.TypeOf(MplsLdp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp", reflect.TypeOf(MplsLdp{}))
}

// MgmtLdpNbrBgpAdvtState represents Type
type MgmtLdpNbrBgpAdvtState string

const (
    // Not applicable
    MgmtLdpNbrBgpAdvtState_not_applicable MgmtLdpNbrBgpAdvtState = "not-applicable"

    // Advertisement permitted
    MgmtLdpNbrBgpAdvtState_permit MgmtLdpNbrBgpAdvtState = "permit"

    // Advertisement denied
    MgmtLdpNbrBgpAdvtState_deny MgmtLdpNbrBgpAdvtState = "deny"
)

// MgmtLdpNsrPeerSyncState represents Mgmt ldp nsr peer sync state
type MgmtLdpNsrPeerSyncState string

const (
    // mgmt ldp nsr peer sync st none
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_none MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-none"

    // mgmt ldp nsr peer sync st wait
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_wait MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-wait"

    // mgmt ldp nsr peer sync st ready
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_ready MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-ready"

    // mgmt ldp nsr peer sync st prep
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_prep MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-prep"

    // mgmt ldp nsr peer sync st app wait
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_app_wait MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-app-wait"

    // mgmt ldp nsr peer sync st oper
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_oper MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-oper"

    // mgmt ldp nsr peer sync st tcp phase1
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_tcp_phase1 MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-tcp-phase1"

    // mgmt ldp nsr peer sync st tcp phase2
    MgmtLdpNsrPeerSyncState_mgmt_ldp_nsr_peer_sync_st_tcp_phase2 MgmtLdpNsrPeerSyncState = "mgmt-ldp-nsr-peer-sync-st-tcp-phase2"
)

// LdpRoutePathFlags represents Route path flags
type LdpRoutePathFlags string

const (
    // A primary path with no special flag/attribute
    LdpRoutePathFlags_ip_path_no_flag LdpRoutePathFlags = "ip-path-no-flag"

    // A primary path with LFA FRR protection
    LdpRoutePathFlags_ip_path_protected LdpRoutePathFlags = "ip-path-protected"

    // A non-primary local LFA FRR (pure) backup path
    LdpRoutePathFlags_ip_path_backup LdpRoutePathFlags = "ip-path-backup"

    // A non-primary remote LFA FRR (pure) backup path
    LdpRoutePathFlags_ip_path_backup_remote LdpRoutePathFlags = "ip-path-backup-remote"

    // A non-primary BGP backup path
    LdpRoutePathFlags_ip_path_bgp_backup LdpRoutePathFlags = "ip-path-bgp-backup"
)

// LdpAfId represents Ldp af id
type LdpAfId string

const (
    // No Address Family
    LdpAfId_ldp_af_id_none LdpAfId = "ldp-af-id-none"

    // IPv4 AFI
    LdpAfId_ldp_af_id_ipv4 LdpAfId = "ldp-af-id-ipv4"

    // IPv6 AFI
    LdpAfId_ldp_af_id_ipv6 LdpAfId = "ldp-af-id-ipv6"
)

// LdpIgpSyncState represents IGP Sync State
type LdpIgpSyncState string

const (
    // Acheived
    LdpIgpSyncState_isync_ready LdpIgpSyncState = "isync-ready"

    // Not acheived
    LdpIgpSyncState_isync_not_ready LdpIgpSyncState = "isync-not-ready"

    // Deferred due to interface delay or global
    // restart delay
    LdpIgpSyncState_isync_deferred LdpIgpSyncState = "isync-deferred"
)

// LdpIgpSyncDownReason represents Reason IGP Sync Not Achieved
type LdpIgpSyncDownReason string

const (
    // Not Applicable
    LdpIgpSyncDownReason_igp_sync_down_reason_not_applicable LdpIgpSyncDownReason = "igp-sync-down-reason-not-applicable"

    // No hello adjacency
    LdpIgpSyncDownReason_no_hello_adjacency LdpIgpSyncDownReason = "no-hello-adjacency"

    // No peer session
    LdpIgpSyncDownReason_no_peer_session LdpIgpSyncDownReason = "no-peer-session"

    // Initial update to peer not done yet
    LdpIgpSyncDownReason_initial_update_to_peer_not_done LdpIgpSyncDownReason = "initial-update-to-peer-not-done"

    // Initial update from peer not received yet
    LdpIgpSyncDownReason_initial_update_from_peer_not_received LdpIgpSyncDownReason = "initial-update-from-peer-not-received"

    // Internal reason
    LdpIgpSyncDownReason_internal_reason LdpIgpSyncDownReason = "internal-reason"
)

// LocalLabelState represents MPLS LDP Local Label State Type
type LocalLabelState string

const (
    // None
    LocalLabelState_local_label_state_none LocalLabelState = "local-label-state-none"

    // Assigned
    LocalLabelState_local_label_state_assigned LocalLabelState = "local-label-state-assigned"

    // Withdrawn
    LocalLabelState_local_label_state_withdrawn LocalLabelState = "local-label-state-withdrawn"
)

// MgmtLdpNsrPeerLdpSyncNackRsn represents Mgmt ldp nsr peer ldp sync nack rsn
type MgmtLdpNsrPeerLdpSyncNackRsn string

const (
    // mgmt ldp nsr peer ldp sync nack rsn none
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_none MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-none"

    // mgmt ldp nsr peer ldp sync nack rsn tbl id
    // mismatch
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_tbl_id_mismatch MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-tbl-id-mismatch"

    // mgmt ldp nsr peer ldp sync nack rsn pp exists
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_pp_exists MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-pp-exists"

    // mgmt ldp nsr peer ldp sync nack rsn missing
    // elem
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_missing_elem MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-missing-elem"

    // mgmt ldp nsr peer ldp sync nack rsn no p end
    // sock
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_no_p_end_sock MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-no-p-end-sock"

    // mgmt ldp nsr peer ldp sync nack rsn p end sock
    // not synced
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_p_end_sock_not_synced MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-p-end-sock-not-synced"

    // mgmt ldp nsr peer ldp sync nack rsn err adj add
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adj_add MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-adj-add"

    // mgmt ldp nsr peer ldp sync nack rsn err dhcb
    // add
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_dhcb_add MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-dhcb-add"

    // mgmt ldp nsr peer ldp sync nack rsn enomem
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_enomem MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-enomem"

    // mgmt ldp nsr peer ldp sync nack rsn err tp
    // create
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_tp_create MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-tp-create"

    // mgmt ldp nsr peer ldp sync nack rsn err pp
    // create
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_pp_create MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-pp-create"

    // mgmt ldp nsr peer ldp sync nack rsn err addr
    // bind
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_addr_bind MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-addr-bind"

    // mgmt ldp nsr peer ldp sync nack rsn err rx bad
    // pie
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_bad_pie MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-rx-bad-pie"

    // mgmt ldp nsr peer ldp sync nack rsn err rx
    // notif
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_notif MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-rx-notif"

    // mgmt ldp nsr peer ldp sync nack rsn err rx
    // unexp open
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_rx_unexp_open MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-rx-unexp-open"

    // mgmt ldp nsr peer ldp sync nack rsn err unexp
    // peer down
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_unexp_peer_down MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-unexp-peer-down"

    // mgmt ldp nsr peer ldp sync nack rsn err app not
    // found
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_not_found MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-app-not-found"

    // mgmt ldp nsr peer ldp sync nack rsn err app
    // invalid
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_invalid MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-app-invalid"

    // mgmt ldp nsr peer ldp sync nack rsn err adj grp
    // not found
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adj_grp_not_found MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-adj-grp-not-found"

    // mgmt ldp nsr peer ldp sync nack rsn invalid
    // elem
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_invalid_elem MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-invalid-elem"

    // mgmt ldp nsr peer ldp sync nack rsn err app
    // data invalid
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_app_data_invalid MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-app-data-invalid"

    // mgmt ldp nsr peer ldp sync nack rsn err invalid
    // per idx
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_invalid_per_idx MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-invalid-per-idx"

    // mgmt ldp nsr peer ldp sync nack rsn err pfx not
    // found
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_pfx_not_found MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-pfx-not-found"

    // mgmt ldp nsr peer ldp sync nack rsn err bm size
    // invalid
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_bm_size_invalid MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-bm-size-invalid"

    // mgmt ldp nsr peer ldp sync nack rsn err adv bm
    // clear
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_adv_bm_clear MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-adv-bm-clear"

    // mgmt ldp nsr peer ldp sync nack rsn err tcp
    // struct create
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_err_tcp_struct_create MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-err-tcp-struct-create"

    // mgmt ldp nsr peer ldp sync nack rsn no ctx
    MgmtLdpNsrPeerLdpSyncNackRsn_mgmt_ldp_nsr_peer_ldp_sync_nack_rsn_no_ctx MgmtLdpNsrPeerLdpSyncNackRsn = "mgmt-ldp-nsr-peer-ldp-sync-nack-rsn-no-ctx"
)

// MgmtLdpNsrPeerSyncErr represents Mgmt ldp nsr peer sync err
type MgmtLdpNsrPeerSyncErr string

const (
    // mgmt ldp nsr peer sync err none
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_none MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-none"

    // mgmt ldp nsr peer sync err ldp sync nack
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_ldp_sync_nack MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-ldp-sync-nack"

    // mgmt ldp nsr peer sync err sync prep
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_sync_prep MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-sync-prep"

    // mgmt ldp nsr peer sync err tcp peer
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_tcp_peer MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-tcp-peer"

    // mgmt ldp nsr peer sync err tcp gbl
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_tcp_gbl MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-tcp-gbl"

    // mgmt ldp nsr peer sync err ldp peer
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_ldp_peer MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-ldp-peer"

    // mgmt ldp nsr peer sync err ldp gbl
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_ldp_gbl MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-ldp-gbl"

    // mgmt ldp nsr peer sync err app fail
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_app_fail MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-app-fail"

    // mgmt ldp nsr peer sync err sync tcp phase1
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_sync_tcp_phase1 MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-sync-tcp-phase1"

    // mgmt ldp nsr peer sync err sync tcp phase2
    MgmtLdpNsrPeerSyncErr_mgmt_ldp_nsr_peer_sync_err_sync_tcp_phase2 MgmtLdpNsrPeerSyncErr = "mgmt-ldp-nsr-peer-sync-err-sync-tcp-phase2"
)

// L2vpnLdpPwAgi represents L2vpn ldp pw agi
type L2vpnLdpPwAgi string

const (
    // AGI type RD
    L2vpnLdpPwAgi_rd L2vpnLdpPwAgi = "rd"
)

// LabelValue represents Label Value Type
type LabelValue string

const (
    // MPLS Label
    LabelValue_mpls_label LabelValue = "mpls-label"

    // Unlabelled
    LabelValue_un_labelled LabelValue = "un-labelled"

    // Unknown label
    LabelValue_unknown LabelValue = "unknown"
)

// LdpFwdUnlblRsn represents Ldp fwd unlbl rsn
type LdpFwdUnlblRsn string

const (
    // ldp fwd labelled
    LdpFwdUnlblRsn_ldp_fwd_labelled LdpFwdUnlblRsn = "ldp-fwd-labelled"

    // ldp fwd un labelled vrf down
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_vrf_down LdpFwdUnlblRsn = "ldp-fwd-un-labelled-vrf-down"

    // ldp fwd un labelled no nh
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_no_nh LdpFwdUnlblRsn = "ldp-fwd-un-labelled-no-nh"

    // ldp fwd un labelled recursive path
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_recursive_path LdpFwdUnlblRsn = "ldp-fwd-un-labelled-recursive-path"

    // ldp fwd un labelled intf not ldp
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_intf_not_ldp LdpFwdUnlblRsn = "ldp-fwd-un-labelled-intf-not-ldp"

    // ldp fwd un labelled no rmt
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_no_rmt LdpFwdUnlblRsn = "ldp-fwd-un-labelled-no-rmt"

    // ldp fwd un labelled no ldp adj
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_no_ldp_adj LdpFwdUnlblRsn = "ldp-fwd-un-labelled-no-ldp-adj"

    // ldp fwd un labelled no session
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_no_session LdpFwdUnlblRsn = "ldp-fwd-un-labelled-no-session"

    // ldp fwd un labelled unknown
    LdpFwdUnlblRsn_ldp_fwd_un_labelled_unknown LdpFwdUnlblRsn = "ldp-fwd-un-labelled-unknown"
)

// LdpAdjUnionDiscrim represents MPLS LDP Hello Type
type LdpAdjUnionDiscrim string

const (
    // Link hello
    LdpAdjUnionDiscrim_link_hello LdpAdjUnionDiscrim = "link-hello"

    // Targeted hello
    LdpAdjUnionDiscrim_targeted_hello LdpAdjUnionDiscrim = "targeted-hello"
)

// LdpRoutePathLblOwner represents Route path label owner
type LdpRoutePathLblOwner string

const (
    // No label and no owner
    LdpRoutePathLblOwner_ip_path_lbl_owner_none LdpRoutePathLblOwner = "ip-path-lbl-owner-none"

    // Path outgoing label owned by LDP
    LdpRoutePathLblOwner_ip_path_lbl_owner_ldp LdpRoutePathLblOwner = "ip-path-lbl-owner-ldp"

    // Path outgoing label owned by BGP
    LdpRoutePathLblOwner_ip_path_lbl_owner_bgp LdpRoutePathLblOwner = "ip-path-lbl-owner-bgp"
)

// L2vpnLdpPwFec represents L2vpn ldp pw fec
type L2vpnLdpPwFec string

const (
    // FEC 128 pseudowire type
    L2vpnLdpPwFec_fec128 L2vpnLdpPwFec = "fec128"

    // FEC 129 pseudowire type
    L2vpnLdpPwFec_fec129 L2vpnLdpPwFec = "fec129"

    // FEC 130 pseudowire type
    L2vpnLdpPwFec_fec130 L2vpnLdpPwFec = "fec130"

    // FEC not applicable
    L2vpnLdpPwFec_invalid L2vpnLdpPwFec = "invalid"
)

// MplsLdpOperAfName represents Mpls ldp oper af name
type MplsLdpOperAfName string

const (
    // IPv4
    MplsLdpOperAfName_ipv4 MplsLdpOperAfName = "ipv4"

    // IPv6
    MplsLdpOperAfName_ipv6 MplsLdpOperAfName = "ipv6"

    // All
    MplsLdpOperAfName_all MplsLdpOperAfName = "all"
)

// LdpAf represents Ldp af
type LdpAf string

const (
    // No Address Family
    LdpAf_ldp_show_af_none LdpAf = "ldp-show-af-none"

    // IPv4 AFI
    LdpAf_ldp_show_af_ipv4 LdpAf = "ldp-show-af-ipv4"

    // IPv6 AFI
    LdpAf_ldp_show_af_ipv6 LdpAf = "ldp-show-af-ipv6"

    // Both IPv4/IPv6 AFIs
    LdpAf_ldp_show_af_ipv4_ipv6 LdpAf = "ldp-show-af-ipv4-ipv6"
)

// L2vpnLdpPwAii represents L2vpn ldp pw aii
type L2vpnLdpPwAii string

const (
    // AII Type 1
    L2vpnLdpPwAii_local_id L2vpnLdpPwAii = "local-id"

    // AII Type 2
    L2vpnLdpPwAii_type2 L2vpnLdpPwAii = "type2"
)

// DhcbState represents DHCB State Type
type DhcbState string

const (
    // None
    DhcbState_none DhcbState = "none"

    // Active
    DhcbState_dhcb_active DhcbState = "dhcb-active"

    // Passive
    DhcbState_dhcb_passive DhcbState = "dhcb-passive"

    // Active and Passive
    DhcbState_dhcb_active_passive DhcbState = "dhcb-active-passive"
)

// ShowNsrState represents NSR State Type
type ShowNsrState string

const (
    // NSR ready
    ShowNsrState_nsr_ready ShowNsrState = "nsr-ready"

    // NSR not ready
    ShowNsrState_nsr_not_ready ShowNsrState = "nsr-not-ready"

    // NSR not applicable
    ShowNsrState_nsr_na ShowNsrState = "nsr-na"
)

// MplsLdp
// MPLS LDP operational data
type MplsLdp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global MPLS LDP operational data.
    Global MplsLdp_Global

    // Location MPLS LDP operational data.
    Nodes MplsLdp_Nodes
}

func (mplsLdp *MplsLdp) GetEntityData() *types.CommonEntityData {
    mplsLdp.EntityData.YFilter = mplsLdp.YFilter
    mplsLdp.EntityData.YangName = "mpls-ldp"
    mplsLdp.EntityData.BundleName = "cisco_ios_xr"
    mplsLdp.EntityData.ParentYangName = "Cisco-IOS-XR-mpls-ldp-oper"
    mplsLdp.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp"
    mplsLdp.EntityData.AbsolutePath = mplsLdp.EntityData.SegmentPath
    mplsLdp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsLdp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsLdp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsLdp.EntityData.Children = types.NewOrderedMap()
    mplsLdp.EntityData.Children.Append("global", types.YChild{"Global", &mplsLdp.Global})
    mplsLdp.EntityData.Children.Append("nodes", types.YChild{"Nodes", &mplsLdp.Nodes})
    mplsLdp.EntityData.Leafs = types.NewOrderedMap()

    mplsLdp.EntityData.YListKeys = []string {}

    return &(mplsLdp.EntityData)
}

// MplsLdp_Global
// Global MPLS LDP operational data
type MplsLdp_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Standby MPLS LDP operational data.
    Standby MplsLdp_Global_Standby

    // Active MPLS LDP operational data.
    Active MplsLdp_Global_Active
}

func (global *MplsLdp_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "mpls-ldp"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("standby", types.YChild{"Standby", &global.Standby})
    global.EntityData.Children.Append("active", types.YChild{"Active", &global.Active})
    global.EntityData.Leafs = types.NewOrderedMap()

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// MplsLdp_Global_Standby
// Standby MPLS LDP operational data
type MplsLdp_Global_Standby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DefaultVRF specific operational data.
    DefaultVrf MplsLdp_Global_Standby_DefaultVrf

    // Summary information regarding LDP forwarding setup.
    ForwardingSummaryAll MplsLdp_Global_Standby_ForwardingSummaryAll

    // Aggregate VRF counters for the LDP Label Infomation Base (LIB).
    BindingsSummaryAll MplsLdp_Global_Standby_BindingsSummaryAll

    // AToM DB Table.
    AtoMdbTableEntries MplsLdp_Global_Standby_AtoMdbTableEntries

    // Summary information regarding LDP NSR State.
    NsrSummaryAll MplsLdp_Global_Standby_NsrSummaryAll

    // LDP summary.
    Summary MplsLdp_Global_Standby_Summary

    // VRF specific operational data.
    Vrfs MplsLdp_Global_Standby_Vrfs

    // Summary information regarding LDP discovery.
    DiscoverySummaryAll MplsLdp_Global_Standby_DiscoverySummaryAll
}

func (standby *MplsLdp_Global_Standby) GetEntityData() *types.CommonEntityData {
    standby.EntityData.YFilter = standby.YFilter
    standby.EntityData.YangName = "standby"
    standby.EntityData.BundleName = "cisco_ios_xr"
    standby.EntityData.ParentYangName = "global"
    standby.EntityData.SegmentPath = "standby"
    standby.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/" + standby.EntityData.SegmentPath
    standby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standby.EntityData.Children = types.NewOrderedMap()
    standby.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &standby.DefaultVrf})
    standby.EntityData.Children.Append("forwarding-summary-all", types.YChild{"ForwardingSummaryAll", &standby.ForwardingSummaryAll})
    standby.EntityData.Children.Append("bindings-summary-all", types.YChild{"BindingsSummaryAll", &standby.BindingsSummaryAll})
    standby.EntityData.Children.Append("ato-mdb-table-entries", types.YChild{"AtoMdbTableEntries", &standby.AtoMdbTableEntries})
    standby.EntityData.Children.Append("nsr-summary-all", types.YChild{"NsrSummaryAll", &standby.NsrSummaryAll})
    standby.EntityData.Children.Append("summary", types.YChild{"Summary", &standby.Summary})
    standby.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &standby.Vrfs})
    standby.EntityData.Children.Append("discovery-summary-all", types.YChild{"DiscoverySummaryAll", &standby.DiscoverySummaryAll})
    standby.EntityData.Leafs = types.NewOrderedMap()

    standby.EntityData.YListKeys = []string {}

    return &(standby.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf
// DefaultVRF specific operational data
type MplsLdp_Global_Standby_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Global_Standby_DefaultVrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Global_Standby_DefaultVrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Global_Standby_DefaultVrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Global_Standby_DefaultVrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Global_Standby_DefaultVrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Global_Standby_DefaultVrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Global_Standby_DefaultVrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Global_Standby_DefaultVrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Global_Standby_DefaultVrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Global_Standby_DefaultVrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Global_Standby_DefaultVrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Global_Standby_DefaultVrf_Statistics
}

func (defaultVrf *MplsLdp_Global_Standby_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "standby"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &defaultVrf.GracefulRestart})
    defaultVrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &defaultVrf.Capabilities})
    defaultVrf.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultVrf.Summary})
    defaultVrf.EntityData.Children.Append("afs", types.YChild{"Afs", &defaultVrf.Afs})
    defaultVrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &defaultVrf.NeighborBriefs})
    defaultVrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &defaultVrf.BackoffParameters})
    defaultVrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &defaultVrf.Backoffs})
    defaultVrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &defaultVrf.Nsr})
    defaultVrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &defaultVrf.Parameters})
    defaultVrf.EntityData.Children.Append("issu", types.YChild{"Issu", &defaultVrf.Issu})
    defaultVrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &defaultVrf.NeighborCapabilities})
    defaultVrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &defaultVrf.Neighbors})
    defaultVrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &defaultVrf.LdpId})
    defaultVrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &defaultVrf.Statistics})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "default-vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Global_Standby_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Capabilities
// LDP capability database information
type MplsLdp_Global_Standby_DefaultVrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability.
    Capability []*MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Global_Standby_DefaultVrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "default-vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Global_Standby_DefaultVrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Summary
// LDP VRF summary
type MplsLdp_Global_Standby_DefaultVrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Global_Standby_DefaultVrf_Summary_Common
}

func (summary *MplsLdp_Global_Standby_DefaultVrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Summary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Summary_Common
// Common Summary information
type MplsLdp_Global_Standby_DefaultVrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Standby_DefaultVrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs
// Address Family specific operational data
type MplsLdp_Global_Standby_DefaultVrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af.
    Af []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af
}

func (afs *MplsLdp_Global_Standby_DefaultVrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "default-vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Global_Standby_DefaultVrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Global_Standby_DefaultVrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Standby_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "default-vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Global_Standby_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Global_Standby_DefaultVrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Global_Standby_DefaultVrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "default-vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Backoffs
// The LDP backoff
type MplsLdp_Global_Standby_DefaultVrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Global_Standby_DefaultVrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Global_Standby_DefaultVrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "default-vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Global_Standby_DefaultVrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Global_Standby_DefaultVrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr
// LDP NSR related information
type MplsLdp_Global_Standby_DefaultVrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Global_Standby_DefaultVrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "default-vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Parameters
// LDP parameters
type MplsLdp_Global_Standby_DefaultVrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Global_Standby_DefaultVrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Global_Standby_DefaultVrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "default-vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Global_Standby_DefaultVrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Global_Standby_DefaultVrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Global_Standby_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu
// LDP ISSU related information
type MplsLdp_Global_Standby_DefaultVrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics
}

func (issu *MplsLdp_Global_Standby_DefaultVrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "default-vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Standby_DefaultVrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of
    // MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "default-vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Standby_DefaultVrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors
// The LDP Neighbors
type MplsLdp_Global_Standby_DefaultVrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Global_Standby_DefaultVrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "default-vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Standby_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_LdpId
// Local LDP Id
type MplsLdp_Global_Standby_DefaultVrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Global_Standby_DefaultVrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "default-vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Statistics
// The LDP Statistics
type MplsLdp_Global_Standby_DefaultVrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic.
    Statistic []*MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic
}

func (statistics *MplsLdp_Global_Standby_DefaultVrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "default-vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Global_Standby_DefaultVrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/default-vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Standby_ForwardingSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_ForwardingSummaryAll_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Standby_ForwardingSummaryAll_Rws
}

func (forwardingSummaryAll *MplsLdp_Global_Standby_ForwardingSummaryAll) GetEntityData() *types.CommonEntityData {
    forwardingSummaryAll.EntityData.YFilter = forwardingSummaryAll.YFilter
    forwardingSummaryAll.EntityData.YangName = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummaryAll.EntityData.ParentYangName = "standby"
    forwardingSummaryAll.EntityData.SegmentPath = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + forwardingSummaryAll.EntityData.SegmentPath
    forwardingSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummaryAll.EntityData.Children = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummaryAll.Vrf})
    forwardingSummaryAll.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummaryAll.Rws})
    forwardingSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummaryAll.IsLsdBound})
    forwardingSummaryAll.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummaryAll.Fsht})
    forwardingSummaryAll.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummaryAll.Intfs})
    forwardingSummaryAll.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummaryAll.Lbls})

    forwardingSummaryAll.EntityData.YListKeys = []string {}

    return &(forwardingSummaryAll.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Standby_ForwardingSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_ForwardingSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Nhs
}

func (rws *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary-all"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Standby_ForwardingSummaryAll_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/forwarding-summary-all/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Standby_BindingsSummaryAll
// Aggregate VRF counters for the LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Standby_BindingsSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_BindingsSummaryAll_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Standby_BindingsSummaryAll_BindAf.
    BindAf []*MplsLdp_Global_Standby_BindingsSummaryAll_BindAf
}

func (bindingsSummaryAll *MplsLdp_Global_Standby_BindingsSummaryAll) GetEntityData() *types.CommonEntityData {
    bindingsSummaryAll.EntityData.YFilter = bindingsSummaryAll.YFilter
    bindingsSummaryAll.EntityData.YangName = "bindings-summary-all"
    bindingsSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummaryAll.EntityData.ParentYangName = "standby"
    bindingsSummaryAll.EntityData.SegmentPath = "bindings-summary-all"
    bindingsSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + bindingsSummaryAll.EntityData.SegmentPath
    bindingsSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummaryAll.EntityData.Children = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummaryAll.Vrf})
    bindingsSummaryAll.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummaryAll.BindAf {
        types.SetYListKey(bindingsSummaryAll.BindAf[i], i)
        bindingsSummaryAll.EntityData.Children.Append(types.GetSegmentPath(bindingsSummaryAll.BindAf[i]), types.YChild{"BindAf", bindingsSummaryAll.BindAf[i]})
    }
    bindingsSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummaryAll.AddressFamily})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummaryAll.BindingNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummaryAll.BindingLocalNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummaryAll.BindingLocalNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummaryAll.BindingLocalImplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummaryAll.BindingLocalExplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummaryAll.BindingLocalNonNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummaryAll.BindingLocalOor})
    bindingsSummaryAll.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummaryAll.LowestAllocatedLabel})
    bindingsSummaryAll.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummaryAll.HighestAllocatedLabel})

    bindingsSummaryAll.EntityData.YListKeys = []string {}

    return &(bindingsSummaryAll.EntityData)
}

// MplsLdp_Global_Standby_BindingsSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Standby_BindingsSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_BindingsSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/bindings-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_BindingsSummaryAll_BindAf
// bind af
type MplsLdp_Global_Standby_BindingsSummaryAll_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Standby_BindingsSummaryAll_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary-all"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/bindings-summary-all/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries
// AToM DB Table
type MplsLdp_Global_Standby_AtoMdbTableEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entries in AToM DB. The type is slice of
    // MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry.
    AtoMdbTableEntry []*MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry
}

func (atoMdbTableEntries *MplsLdp_Global_Standby_AtoMdbTableEntries) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntries.EntityData.YFilter = atoMdbTableEntries.YFilter
    atoMdbTableEntries.EntityData.YangName = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntries.EntityData.ParentYangName = "standby"
    atoMdbTableEntries.EntityData.SegmentPath = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + atoMdbTableEntries.EntityData.SegmentPath
    atoMdbTableEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntries.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntries.EntityData.Children.Append("ato-mdb-table-entry", types.YChild{"AtoMdbTableEntry", nil})
    for i := range atoMdbTableEntries.AtoMdbTableEntry {
        types.SetYListKey(atoMdbTableEntries.AtoMdbTableEntry[i], i)
        atoMdbTableEntries.EntityData.Children.Append(types.GetSegmentPath(atoMdbTableEntries.AtoMdbTableEntry[i]), types.YChild{"AtoMdbTableEntry", atoMdbTableEntries.AtoMdbTableEntry[i]})
    }
    atoMdbTableEntries.EntityData.Leafs = types.NewOrderedMap()

    atoMdbTableEntries.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntries.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry
// Entries in AToM DB
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PeerId interface{}

    // FEC Type. The type is interface{} with range: 0..4294967295.
    FeCtype interface{}

    // PW ID. The type is interface{} with range: 0..4294967295.
    PwId interface{}

    // AGI Type. The type is interface{} with range: 0..4294967295.
    AgiType interface{}

    // AGI. The type is interface{} with range: 0..4294967295.
    Agi interface{}

    // SAII Type. The type is interface{} with range: 0..4294967295.
    SaiiType interface{}

    // SAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SaiiLocalId interface{}

    // SAII Global ID. The type is interface{} with range: 0..4294967295.
    SaiiGlobalId interface{}

    // SAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    SaiiPrefix interface{}

    // SAII AC ID. The type is interface{} with range: 0..4294967295.
    SaiiAcId interface{}

    // TAII Type. The type is interface{} with range: 0..4294967295.
    TaiiType interface{}

    // TAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TaiiLocalId interface{}

    // TAII Global ID. The type is interface{} with range: 0..4294967295.
    TaiiGlobalId interface{}

    // TAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    TaiiPrefix interface{}

    // TAII AC ID. The type is interface{} with range: 0..4294967295.
    TaiiAcId interface{}

    // Peer ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerIdXr interface{}

    // TLV Count from Label Mapping Message. The type is interface{} with range:
    // 0..4294967295.
    MappingTlvCount interface{}

    // TLV Count from Notification Message. The type is interface{} with range:
    // 0..4294967295.
    NotificationTlvCount interface{}

    // Pseudowire FEC information.
    FecInfo MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
}

func (atoMdbTableEntry *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntry.EntityData.YFilter = atoMdbTableEntry.YFilter
    atoMdbTableEntry.EntityData.YangName = "ato-mdb-table-entry"
    atoMdbTableEntry.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntry.EntityData.ParentYangName = "ato-mdb-table-entries"
    atoMdbTableEntry.EntityData.SegmentPath = "ato-mdb-table-entry" + types.AddNoKeyToken(atoMdbTableEntry)
    atoMdbTableEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/" + atoMdbTableEntry.EntityData.SegmentPath
    atoMdbTableEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntry.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Children.Append("fec-info", types.YChild{"FecInfo", &atoMdbTableEntry.FecInfo})
    atoMdbTableEntry.EntityData.Leafs = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", atoMdbTableEntry.PeerId})
    atoMdbTableEntry.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", atoMdbTableEntry.FeCtype})
    atoMdbTableEntry.EntityData.Leafs.Append("pw-id", types.YLeaf{"PwId", atoMdbTableEntry.PwId})
    atoMdbTableEntry.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", atoMdbTableEntry.AgiType})
    atoMdbTableEntry.EntityData.Leafs.Append("agi", types.YLeaf{"Agi", atoMdbTableEntry.Agi})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-type", types.YLeaf{"SaiiType", atoMdbTableEntry.SaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-local-id", types.YLeaf{"SaiiLocalId", atoMdbTableEntry.SaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-global-id", types.YLeaf{"SaiiGlobalId", atoMdbTableEntry.SaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-prefix", types.YLeaf{"SaiiPrefix", atoMdbTableEntry.SaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-ac-id", types.YLeaf{"SaiiAcId", atoMdbTableEntry.SaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-type", types.YLeaf{"TaiiType", atoMdbTableEntry.TaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-local-id", types.YLeaf{"TaiiLocalId", atoMdbTableEntry.TaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-global-id", types.YLeaf{"TaiiGlobalId", atoMdbTableEntry.TaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-prefix", types.YLeaf{"TaiiPrefix", atoMdbTableEntry.TaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-ac-id", types.YLeaf{"TaiiAcId", atoMdbTableEntry.TaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id-xr", types.YLeaf{"PeerIdXr", atoMdbTableEntry.PeerIdXr})
    atoMdbTableEntry.EntityData.Leafs.Append("mapping-tlv-count", types.YLeaf{"MappingTlvCount", atoMdbTableEntry.MappingTlvCount})
    atoMdbTableEntry.EntityData.Leafs.Append("notification-tlv-count", types.YLeaf{"NotificationTlvCount", atoMdbTableEntry.NotificationTlvCount})

    atoMdbTableEntry.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntry.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
// Pseudowire FEC information
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FECType. The type is L2vpnLdpPwFec.
    FeCtype interface{}

    // fec128.
    Fec128 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128

    // fec129.
    Fec129 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129

    // fec130.
    Fec130 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
}

func (fecInfo *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo) GetEntityData() *types.CommonEntityData {
    fecInfo.EntityData.YFilter = fecInfo.YFilter
    fecInfo.EntityData.YangName = "fec-info"
    fecInfo.EntityData.BundleName = "cisco_ios_xr"
    fecInfo.EntityData.ParentYangName = "ato-mdb-table-entry"
    fecInfo.EntityData.SegmentPath = "fec-info"
    fecInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/" + fecInfo.EntityData.SegmentPath
    fecInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fecInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fecInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fecInfo.EntityData.Children = types.NewOrderedMap()
    fecInfo.EntityData.Children.Append("fec128", types.YChild{"Fec128", &fecInfo.Fec128})
    fecInfo.EntityData.Children.Append("fec129", types.YChild{"Fec129", &fecInfo.Fec129})
    fecInfo.EntityData.Children.Append("fec130", types.YChild{"Fec130", &fecInfo.Fec130})
    fecInfo.EntityData.Leafs = types.NewOrderedMap()
    fecInfo.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", fecInfo.FeCtype})

    fecInfo.EntityData.YListKeys = []string {}

    return &(fecInfo.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128
// fec128
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire ID. The type is interface{} with range: 0..4294967295.
    PseudowireId interface{}
}

func (fec128 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128) GetEntityData() *types.CommonEntityData {
    fec128.EntityData.YFilter = fec128.YFilter
    fec128.EntityData.YangName = "fec128"
    fec128.EntityData.BundleName = "cisco_ios_xr"
    fec128.EntityData.ParentYangName = "fec-info"
    fec128.EntityData.SegmentPath = "fec128"
    fec128.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec128.EntityData.SegmentPath
    fec128.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec128.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec128.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec128.EntityData.Children = types.NewOrderedMap()
    fec128.EntityData.Leafs = types.NewOrderedMap()
    fec128.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", fec128.PseudowireId})

    fec128.EntityData.YListKeys = []string {}

    return &(fec128.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129
// fec129
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii

    // Target Attachment Individual Identifier.
    Taii MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
}

func (fec129 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129) GetEntityData() *types.CommonEntityData {
    fec129.EntityData.YFilter = fec129.YFilter
    fec129.EntityData.YangName = "fec129"
    fec129.EntityData.BundleName = "cisco_ios_xr"
    fec129.EntityData.ParentYangName = "fec-info"
    fec129.EntityData.SegmentPath = "fec129"
    fec129.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec129.EntityData.SegmentPath
    fec129.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec129.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec129.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec129.EntityData.Children = types.NewOrderedMap()
    fec129.EntityData.Children.Append("agi", types.YChild{"Agi", &fec129.Agi})
    fec129.EntityData.Children.Append("saii", types.YChild{"Saii", &fec129.Saii})
    fec129.EntityData.Children.Append("taii", types.YChild{"Taii", &fec129.Taii})
    fec129.EntityData.Leafs = types.NewOrderedMap()

    fec129.EntityData.YListKeys = []string {}

    return &(fec129.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi
// AGI
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
}

func (agi *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec129"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
// agi1
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii
// Source Attachment Individual Identifier
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
}

func (saii *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec129"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1
// aii1
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
// aii2
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
// Target Attachment Individual Identifier
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
}

func (taii *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii) GetEntityData() *types.CommonEntityData {
    taii.EntityData.YFilter = taii.YFilter
    taii.EntityData.YangName = "taii"
    taii.EntityData.BundleName = "cisco_ios_xr"
    taii.EntityData.ParentYangName = "fec129"
    taii.EntityData.SegmentPath = "taii"
    taii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + taii.EntityData.SegmentPath
    taii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taii.EntityData.Children = types.NewOrderedMap()
    taii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &taii.Aii1})
    taii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &taii.Aii2})
    taii.EntityData.Leafs = types.NewOrderedMap()
    taii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", taii.AiiType})

    taii.EntityData.YListKeys = []string {}

    return &(taii.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1
// aii1
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "taii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
// aii2
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "taii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
// fec130
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
}

func (fec130 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130) GetEntityData() *types.CommonEntityData {
    fec130.EntityData.YFilter = fec130.YFilter
    fec130.EntityData.YangName = "fec130"
    fec130.EntityData.BundleName = "cisco_ios_xr"
    fec130.EntityData.ParentYangName = "fec-info"
    fec130.EntityData.SegmentPath = "fec130"
    fec130.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec130.EntityData.SegmentPath
    fec130.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec130.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec130.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec130.EntityData.Children = types.NewOrderedMap()
    fec130.EntityData.Children.Append("agi", types.YChild{"Agi", &fec130.Agi})
    fec130.EntityData.Children.Append("saii", types.YChild{"Saii", &fec130.Saii})
    fec130.EntityData.Leafs = types.NewOrderedMap()

    fec130.EntityData.YListKeys = []string {}

    return &(fec130.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi
// AGI
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
}

func (agi *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec130"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
// agi1
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
// Source Attachment Individual Identifier
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
}

func (saii *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec130"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1
// aii1
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
// aii2
type MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Standby_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Standby_NsrSummaryAll
// Summary information regarding LDP NSR State
type MplsLdp_Global_Standby_NsrSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_NsrSummaryAll_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Standby_NsrSummaryAll_Sessions
}

func (nsrSummaryAll *MplsLdp_Global_Standby_NsrSummaryAll) GetEntityData() *types.CommonEntityData {
    nsrSummaryAll.EntityData.YFilter = nsrSummaryAll.YFilter
    nsrSummaryAll.EntityData.YangName = "nsr-summary-all"
    nsrSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    nsrSummaryAll.EntityData.ParentYangName = "standby"
    nsrSummaryAll.EntityData.SegmentPath = "nsr-summary-all"
    nsrSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + nsrSummaryAll.EntityData.SegmentPath
    nsrSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrSummaryAll.EntityData.Children = types.NewOrderedMap()
    nsrSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &nsrSummaryAll.Vrf})
    nsrSummaryAll.EntityData.Children.Append("sessions", types.YChild{"Sessions", &nsrSummaryAll.Sessions})
    nsrSummaryAll.EntityData.Leafs = types.NewOrderedMap()

    nsrSummaryAll.EntityData.YListKeys = []string {}

    return &(nsrSummaryAll.EntityData)
}

// MplsLdp_Global_Standby_NsrSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Standby_NsrSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_NsrSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "nsr-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/nsr-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_NsrSummaryAll_Sessions
// Session summary
type MplsLdp_Global_Standby_NsrSummaryAll_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Standby_NsrSummaryAll_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "nsr-summary-all"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/nsr-summary-all/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Standby_Summary
// LDP summary
type MplsLdp_Global_Standby_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of configured VRFs (including default). The type is interface{} with
    // range: 0..4294967295.
    NumberOfVrf interface{}

    // Number of configured operational VRFs (including default). The type is
    // interface{} with range: 0..4294967295.
    NumberOfVrfOper interface{}

    // Number of known interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfInterfaces interface{}

    // Number of Forward Referenc interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfFwdRefInterfaces interface{}

    // Number of auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfAutocfgInterfaces interface{}

    // Bound status with sysdb. The type is bool.
    IsBoundWithSysdb interface{}

    // Registration status with Sysdb. The type is bool.
    IsRegisteredWithSysdb interface{}

    // Bound status with rsi. The type is bool.
    IsBoundWithRsi interface{}

    // Bound status with Interface Manager. The type is bool.
    IsBoundWithInterfaceManager interface{}

    // Registration status with Interface Manager. The type is bool.
    IsRegisteredWithInterfaceManager interface{}

    // Bound status with IP Arm. The type is bool.
    IsBoundWithIpArm interface{}

    // Bound status with LSD. The type is bool.
    IsBoundWithLsd interface{}

    // Registration status with LSD. The type is bool.
    IsRegisteredWithLsd interface{}

    // Bound status with IPv4 RIB. The type is bool.
    IsBoundWithIpv4Rib interface{}

    // Registration status with IPv4 RIB. The type is bool.
    IsRegisteredWithIpv4Rib interface{}

    // Total number of ipv4 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4ribTables interface{}

    // Number of ipv4 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv4ribTables interface{}

    // Bound status with IPv6 RIB. The type is bool.
    IsBoundWithIpv6Rib interface{}

    // Registration status with IPv6 RIB. The type is bool.
    IsRegisteredWithIpv6Rib interface{}

    // Total number of ipv6 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6ribTables interface{}

    // Number of ipv6 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv6ribTables interface{}

    // Bound status with L2VPN ATOM. The type is bool.
    IsBoundWithAtom interface{}

    // Bound status with NSR Mate. The type is bool.
    IsBoundWithNsrMate interface{}

    // NSR configured. The type is bool.
    IsNsrConfigured interface{}

    // mLDP registration status. The type is bool.
    IsMldpRegistered interface{}

    // Common Summary information.
    Common MplsLdp_Global_Standby_Summary_Common
}

func (summary *MplsLdp_Global_Standby_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "standby"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("number-of-vrf", types.YLeaf{"NumberOfVrf", summary.NumberOfVrf})
    summary.EntityData.Leafs.Append("number-of-vrf-oper", types.YLeaf{"NumberOfVrfOper", summary.NumberOfVrfOper})
    summary.EntityData.Leafs.Append("number-of-interfaces", types.YLeaf{"NumberOfInterfaces", summary.NumberOfInterfaces})
    summary.EntityData.Leafs.Append("number-of-fwd-ref-interfaces", types.YLeaf{"NumberOfFwdRefInterfaces", summary.NumberOfFwdRefInterfaces})
    summary.EntityData.Leafs.Append("number-of-autocfg-interfaces", types.YLeaf{"NumberOfAutocfgInterfaces", summary.NumberOfAutocfgInterfaces})
    summary.EntityData.Leafs.Append("is-bound-with-sysdb", types.YLeaf{"IsBoundWithSysdb", summary.IsBoundWithSysdb})
    summary.EntityData.Leafs.Append("is-registered-with-sysdb", types.YLeaf{"IsRegisteredWithSysdb", summary.IsRegisteredWithSysdb})
    summary.EntityData.Leafs.Append("is-bound-with-rsi", types.YLeaf{"IsBoundWithRsi", summary.IsBoundWithRsi})
    summary.EntityData.Leafs.Append("is-bound-with-interface-manager", types.YLeaf{"IsBoundWithInterfaceManager", summary.IsBoundWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-registered-with-interface-manager", types.YLeaf{"IsRegisteredWithInterfaceManager", summary.IsRegisteredWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-bound-with-ip-arm", types.YLeaf{"IsBoundWithIpArm", summary.IsBoundWithIpArm})
    summary.EntityData.Leafs.Append("is-bound-with-lsd", types.YLeaf{"IsBoundWithLsd", summary.IsBoundWithLsd})
    summary.EntityData.Leafs.Append("is-registered-with-lsd", types.YLeaf{"IsRegisteredWithLsd", summary.IsRegisteredWithLsd})
    summary.EntityData.Leafs.Append("is-bound-with-ipv4-rib", types.YLeaf{"IsBoundWithIpv4Rib", summary.IsBoundWithIpv4Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv4-rib", types.YLeaf{"IsRegisteredWithIpv4Rib", summary.IsRegisteredWithIpv4Rib})
    summary.EntityData.Leafs.Append("number-of-ipv4rib-tables", types.YLeaf{"NumberOfIpv4ribTables", summary.NumberOfIpv4ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv4rib-tables", types.YLeaf{"NumberOfRegisteredIpv4ribTables", summary.NumberOfRegisteredIpv4ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-ipv6-rib", types.YLeaf{"IsBoundWithIpv6Rib", summary.IsBoundWithIpv6Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv6-rib", types.YLeaf{"IsRegisteredWithIpv6Rib", summary.IsRegisteredWithIpv6Rib})
    summary.EntityData.Leafs.Append("number-of-ipv6rib-tables", types.YLeaf{"NumberOfIpv6ribTables", summary.NumberOfIpv6ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv6rib-tables", types.YLeaf{"NumberOfRegisteredIpv6ribTables", summary.NumberOfRegisteredIpv6ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-atom", types.YLeaf{"IsBoundWithAtom", summary.IsBoundWithAtom})
    summary.EntityData.Leafs.Append("is-bound-with-nsr-mate", types.YLeaf{"IsBoundWithNsrMate", summary.IsBoundWithNsrMate})
    summary.EntityData.Leafs.Append("is-nsr-configured", types.YLeaf{"IsNsrConfigured", summary.IsNsrConfigured})
    summary.EntityData.Leafs.Append("is-mldp-registered", types.YLeaf{"IsMldpRegistered", summary.IsMldpRegistered})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Standby_Summary_Common
// Common Summary information
type MplsLdp_Global_Standby_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Standby_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Standby_Vrfs
// VRF specific operational data
type MplsLdp_Global_Standby_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given VRF. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf.
    Vrf []*MplsLdp_Global_Standby_Vrfs_Vrf
}

func (vrfs *MplsLdp_Global_Standby_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "standby"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf
// Operational data for given VRF
type MplsLdp_Global_Standby_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Global_Standby_Vrfs_Vrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Global_Standby_Vrfs_Vrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Global_Standby_Vrfs_Vrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Global_Standby_Vrfs_Vrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Global_Standby_Vrfs_Vrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Global_Standby_Vrfs_Vrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Global_Standby_Vrfs_Vrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Global_Standby_Vrfs_Vrf_Statistics
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &vrf.GracefulRestart})
    vrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &vrf.Capabilities})
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("afs", types.YChild{"Afs", &vrf.Afs})
    vrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &vrf.NeighborBriefs})
    vrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &vrf.BackoffParameters})
    vrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &vrf.Backoffs})
    vrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &vrf.Nsr})
    vrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &vrf.Parameters})
    vrf.EntityData.Children.Append("issu", types.YChild{"Issu", &vrf.Issu})
    vrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &vrf.NeighborCapabilities})
    vrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &vrf.Neighbors})
    vrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &vrf.LdpId})
    vrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &vrf.Statistics})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Global_Standby_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities
// LDP capability database information
type MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability.
    Capability []*MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Global_Standby_Vrfs_Vrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Summary
// LDP VRF summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Common
}

func (summary *MplsLdp_Global_Standby_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Common
// Common Summary information
type MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Standby_Vrfs_Vrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs
// Address Family specific operational data
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af.
    Af []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af
}

func (afs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Standby_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Global_Standby_Vrfs_Vrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Global_Standby_Vrfs_Vrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs
// The LDP backoff
type MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Global_Standby_Vrfs_Vrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr
// LDP NSR related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Parameters
// LDP parameters
type MplsLdp_Global_Standby_Vrfs_Vrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Global_Standby_Vrfs_Vrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu
// LDP ISSU related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics
}

func (issu *MplsLdp_Global_Standby_Vrfs_Vrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Standby_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors
// The LDP Neighbors
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Standby_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_LdpId
// Local LDP Id
type MplsLdp_Global_Standby_Vrfs_Vrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Global_Standby_Vrfs_Vrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Statistics
// The LDP Statistics
type MplsLdp_Global_Standby_Vrfs_Vrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic.
    Statistic []*MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic
}

func (statistics *MplsLdp_Global_Standby_Vrfs_Vrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Global_Standby_Vrfs_Vrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/vrfs/vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Global_Standby_DiscoverySummaryAll
// Summary information regarding LDP discovery
type MplsLdp_Global_Standby_DiscoverySummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Standby_DiscoverySummaryAll_Vrf
}

func (discoverySummaryAll *MplsLdp_Global_Standby_DiscoverySummaryAll) GetEntityData() *types.CommonEntityData {
    discoverySummaryAll.EntityData.YFilter = discoverySummaryAll.YFilter
    discoverySummaryAll.EntityData.YangName = "discovery-summary-all"
    discoverySummaryAll.EntityData.BundleName = "cisco_ios_xr"
    discoverySummaryAll.EntityData.ParentYangName = "standby"
    discoverySummaryAll.EntityData.SegmentPath = "discovery-summary-all"
    discoverySummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/" + discoverySummaryAll.EntityData.SegmentPath
    discoverySummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoverySummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoverySummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoverySummaryAll.EntityData.Children = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &discoverySummaryAll.Vrf})
    discoverySummaryAll.EntityData.Leafs = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", discoverySummaryAll.LocalLdpId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", discoverySummaryAll.NumOfLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", discoverySummaryAll.NumOfActiveLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", discoverySummaryAll.NumOfLnkDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", discoverySummaryAll.NumOfTgtDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", discoverySummaryAll.NumOfLnkDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", discoverySummaryAll.NumOfTgtDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", discoverySummaryAll.NumOfDiscWithBadAddrRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", discoverySummaryAll.NumOfDiscWithBadHelloPdu})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", discoverySummaryAll.NumOfDiscWithBadXportAddr})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", discoverySummaryAll.NumOfDiscWithSameRouterId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", discoverySummaryAll.NumOfDiscWithWrongRouterId})

    discoverySummaryAll.EntityData.YListKeys = []string {}

    return &(discoverySummaryAll.EntityData)
}

// MplsLdp_Global_Standby_DiscoverySummaryAll_Vrf
// VRF information
type MplsLdp_Global_Standby_DiscoverySummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Standby_DiscoverySummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "discovery-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/standby/discovery-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active
// Active MPLS LDP operational data
type MplsLdp_Global_Active struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DefaultVRF specific operational data.
    DefaultVrf MplsLdp_Global_Active_DefaultVrf

    // Summary information regarding LDP forwarding setup.
    ForwardingSummaryAll MplsLdp_Global_Active_ForwardingSummaryAll

    // Aggregate VRF counters for the LDP Label Infomation Base (LIB).
    BindingsSummaryAll MplsLdp_Global_Active_BindingsSummaryAll

    // AToM DB Table.
    AtoMdbTableEntries MplsLdp_Global_Active_AtoMdbTableEntries

    // Summary information regarding LDP NSR State.
    NsrSummaryAll MplsLdp_Global_Active_NsrSummaryAll

    // LDP summary.
    Summary MplsLdp_Global_Active_Summary

    // VRF specific operational data.
    Vrfs MplsLdp_Global_Active_Vrfs

    // Summary information regarding LDP discovery.
    DiscoverySummaryAll MplsLdp_Global_Active_DiscoverySummaryAll
}

func (active *MplsLdp_Global_Active) GetEntityData() *types.CommonEntityData {
    active.EntityData.YFilter = active.YFilter
    active.EntityData.YangName = "active"
    active.EntityData.BundleName = "cisco_ios_xr"
    active.EntityData.ParentYangName = "global"
    active.EntityData.SegmentPath = "active"
    active.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/" + active.EntityData.SegmentPath
    active.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    active.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    active.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    active.EntityData.Children = types.NewOrderedMap()
    active.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &active.DefaultVrf})
    active.EntityData.Children.Append("forwarding-summary-all", types.YChild{"ForwardingSummaryAll", &active.ForwardingSummaryAll})
    active.EntityData.Children.Append("bindings-summary-all", types.YChild{"BindingsSummaryAll", &active.BindingsSummaryAll})
    active.EntityData.Children.Append("ato-mdb-table-entries", types.YChild{"AtoMdbTableEntries", &active.AtoMdbTableEntries})
    active.EntityData.Children.Append("nsr-summary-all", types.YChild{"NsrSummaryAll", &active.NsrSummaryAll})
    active.EntityData.Children.Append("summary", types.YChild{"Summary", &active.Summary})
    active.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &active.Vrfs})
    active.EntityData.Children.Append("discovery-summary-all", types.YChild{"DiscoverySummaryAll", &active.DiscoverySummaryAll})
    active.EntityData.Leafs = types.NewOrderedMap()

    active.EntityData.YListKeys = []string {}

    return &(active.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf
// DefaultVRF specific operational data
type MplsLdp_Global_Active_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Global_Active_DefaultVrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Global_Active_DefaultVrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Global_Active_DefaultVrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Global_Active_DefaultVrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Global_Active_DefaultVrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Global_Active_DefaultVrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Global_Active_DefaultVrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Global_Active_DefaultVrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Global_Active_DefaultVrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Global_Active_DefaultVrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Global_Active_DefaultVrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Global_Active_DefaultVrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Global_Active_DefaultVrf_Statistics
}

func (defaultVrf *MplsLdp_Global_Active_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "active"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &defaultVrf.GracefulRestart})
    defaultVrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &defaultVrf.Capabilities})
    defaultVrf.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultVrf.Summary})
    defaultVrf.EntityData.Children.Append("afs", types.YChild{"Afs", &defaultVrf.Afs})
    defaultVrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &defaultVrf.NeighborBriefs})
    defaultVrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &defaultVrf.BackoffParameters})
    defaultVrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &defaultVrf.Backoffs})
    defaultVrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &defaultVrf.Nsr})
    defaultVrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &defaultVrf.Parameters})
    defaultVrf.EntityData.Children.Append("issu", types.YChild{"Issu", &defaultVrf.Issu})
    defaultVrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &defaultVrf.NeighborCapabilities})
    defaultVrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &defaultVrf.Neighbors})
    defaultVrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &defaultVrf.LdpId})
    defaultVrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &defaultVrf.Statistics})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Global_Active_DefaultVrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "default-vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Global_Active_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Capabilities
// LDP capability database information
type MplsLdp_Global_Active_DefaultVrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability.
    Capability []*MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Global_Active_DefaultVrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "default-vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Global_Active_DefaultVrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Summary
// LDP VRF summary
type MplsLdp_Global_Active_DefaultVrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Global_Active_DefaultVrf_Summary_Common
}

func (summary *MplsLdp_Global_Active_DefaultVrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Summary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Summary_Common
// Common Summary information
type MplsLdp_Global_Active_DefaultVrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Active_DefaultVrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs
// Address Family specific operational data
type MplsLdp_Global_Active_DefaultVrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af.
    Af []*MplsLdp_Global_Active_DefaultVrf_Afs_Af
}

func (afs *MplsLdp_Global_Active_DefaultVrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "default-vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Global_Active_DefaultVrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Global_Active_DefaultVrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Global_Active_DefaultVrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Global_Active_DefaultVrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Active_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Global_Active_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Active_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Global_Active_DefaultVrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Global_Active_DefaultVrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "default-vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Global_Active_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Global_Active_DefaultVrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Global_Active_DefaultVrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "default-vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Backoffs
// The LDP backoff
type MplsLdp_Global_Active_DefaultVrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Global_Active_DefaultVrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Global_Active_DefaultVrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "default-vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Global_Active_DefaultVrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Global_Active_DefaultVrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr
// LDP NSR related information
type MplsLdp_Global_Active_DefaultVrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Global_Active_DefaultVrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "default-vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Active_DefaultVrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Parameters
// LDP parameters
type MplsLdp_Global_Active_DefaultVrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Global_Active_DefaultVrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Global_Active_DefaultVrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "default-vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Global_Active_DefaultVrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Global_Active_DefaultVrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Global_Active_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu
// LDP ISSU related information
type MplsLdp_Global_Active_DefaultVrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics
}

func (issu *MplsLdp_Global_Active_DefaultVrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "default-vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Active_DefaultVrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of
    // MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "default-vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Active_DefaultVrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors
// The LDP Neighbors
type MplsLdp_Global_Active_DefaultVrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Global_Active_DefaultVrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "default-vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Active_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_LdpId
// Local LDP Id
type MplsLdp_Global_Active_DefaultVrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Global_Active_DefaultVrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "default-vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Statistics
// The LDP Statistics
type MplsLdp_Global_Active_DefaultVrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic.
    Statistic []*MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic
}

func (statistics *MplsLdp_Global_Active_DefaultVrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "default-vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Global_Active_DefaultVrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/default-vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Active_ForwardingSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_ForwardingSummaryAll_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Active_ForwardingSummaryAll_Rws
}

func (forwardingSummaryAll *MplsLdp_Global_Active_ForwardingSummaryAll) GetEntityData() *types.CommonEntityData {
    forwardingSummaryAll.EntityData.YFilter = forwardingSummaryAll.YFilter
    forwardingSummaryAll.EntityData.YangName = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummaryAll.EntityData.ParentYangName = "active"
    forwardingSummaryAll.EntityData.SegmentPath = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + forwardingSummaryAll.EntityData.SegmentPath
    forwardingSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummaryAll.EntityData.Children = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummaryAll.Vrf})
    forwardingSummaryAll.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummaryAll.Rws})
    forwardingSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummaryAll.IsLsdBound})
    forwardingSummaryAll.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummaryAll.Fsht})
    forwardingSummaryAll.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummaryAll.Intfs})
    forwardingSummaryAll.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummaryAll.Lbls})

    forwardingSummaryAll.EntityData.YListKeys = []string {}

    return &(forwardingSummaryAll.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Active_ForwardingSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_ForwardingSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Nhs
}

func (rws *MplsLdp_Global_Active_ForwardingSummaryAll_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary-all"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Active_ForwardingSummaryAll_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/forwarding-summary-all/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Active_BindingsSummaryAll
// Aggregate VRF counters for the LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Active_BindingsSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_BindingsSummaryAll_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Active_BindingsSummaryAll_BindAf.
    BindAf []*MplsLdp_Global_Active_BindingsSummaryAll_BindAf
}

func (bindingsSummaryAll *MplsLdp_Global_Active_BindingsSummaryAll) GetEntityData() *types.CommonEntityData {
    bindingsSummaryAll.EntityData.YFilter = bindingsSummaryAll.YFilter
    bindingsSummaryAll.EntityData.YangName = "bindings-summary-all"
    bindingsSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummaryAll.EntityData.ParentYangName = "active"
    bindingsSummaryAll.EntityData.SegmentPath = "bindings-summary-all"
    bindingsSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + bindingsSummaryAll.EntityData.SegmentPath
    bindingsSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummaryAll.EntityData.Children = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummaryAll.Vrf})
    bindingsSummaryAll.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummaryAll.BindAf {
        types.SetYListKey(bindingsSummaryAll.BindAf[i], i)
        bindingsSummaryAll.EntityData.Children.Append(types.GetSegmentPath(bindingsSummaryAll.BindAf[i]), types.YChild{"BindAf", bindingsSummaryAll.BindAf[i]})
    }
    bindingsSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummaryAll.AddressFamily})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummaryAll.BindingNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummaryAll.BindingLocalNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummaryAll.BindingLocalNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummaryAll.BindingLocalImplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummaryAll.BindingLocalExplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummaryAll.BindingLocalNonNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummaryAll.BindingLocalOor})
    bindingsSummaryAll.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummaryAll.LowestAllocatedLabel})
    bindingsSummaryAll.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummaryAll.HighestAllocatedLabel})

    bindingsSummaryAll.EntityData.YListKeys = []string {}

    return &(bindingsSummaryAll.EntityData)
}

// MplsLdp_Global_Active_BindingsSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Active_BindingsSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_BindingsSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/bindings-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_BindingsSummaryAll_BindAf
// bind af
type MplsLdp_Global_Active_BindingsSummaryAll_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Active_BindingsSummaryAll_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary-all"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/bindings-summary-all/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries
// AToM DB Table
type MplsLdp_Global_Active_AtoMdbTableEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entries in AToM DB. The type is slice of
    // MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry.
    AtoMdbTableEntry []*MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry
}

func (atoMdbTableEntries *MplsLdp_Global_Active_AtoMdbTableEntries) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntries.EntityData.YFilter = atoMdbTableEntries.YFilter
    atoMdbTableEntries.EntityData.YangName = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntries.EntityData.ParentYangName = "active"
    atoMdbTableEntries.EntityData.SegmentPath = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + atoMdbTableEntries.EntityData.SegmentPath
    atoMdbTableEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntries.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntries.EntityData.Children.Append("ato-mdb-table-entry", types.YChild{"AtoMdbTableEntry", nil})
    for i := range atoMdbTableEntries.AtoMdbTableEntry {
        types.SetYListKey(atoMdbTableEntries.AtoMdbTableEntry[i], i)
        atoMdbTableEntries.EntityData.Children.Append(types.GetSegmentPath(atoMdbTableEntries.AtoMdbTableEntry[i]), types.YChild{"AtoMdbTableEntry", atoMdbTableEntries.AtoMdbTableEntry[i]})
    }
    atoMdbTableEntries.EntityData.Leafs = types.NewOrderedMap()

    atoMdbTableEntries.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntries.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry
// Entries in AToM DB
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PeerId interface{}

    // FEC Type. The type is interface{} with range: 0..4294967295.
    FeCtype interface{}

    // PW ID. The type is interface{} with range: 0..4294967295.
    PwId interface{}

    // AGI Type. The type is interface{} with range: 0..4294967295.
    AgiType interface{}

    // AGI. The type is interface{} with range: 0..4294967295.
    Agi interface{}

    // SAII Type. The type is interface{} with range: 0..4294967295.
    SaiiType interface{}

    // SAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SaiiLocalId interface{}

    // SAII Global ID. The type is interface{} with range: 0..4294967295.
    SaiiGlobalId interface{}

    // SAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    SaiiPrefix interface{}

    // SAII AC ID. The type is interface{} with range: 0..4294967295.
    SaiiAcId interface{}

    // TAII Type. The type is interface{} with range: 0..4294967295.
    TaiiType interface{}

    // TAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TaiiLocalId interface{}

    // TAII Global ID. The type is interface{} with range: 0..4294967295.
    TaiiGlobalId interface{}

    // TAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    TaiiPrefix interface{}

    // TAII AC ID. The type is interface{} with range: 0..4294967295.
    TaiiAcId interface{}

    // Peer ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerIdXr interface{}

    // TLV Count from Label Mapping Message. The type is interface{} with range:
    // 0..4294967295.
    MappingTlvCount interface{}

    // TLV Count from Notification Message. The type is interface{} with range:
    // 0..4294967295.
    NotificationTlvCount interface{}

    // Pseudowire FEC information.
    FecInfo MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
}

func (atoMdbTableEntry *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntry.EntityData.YFilter = atoMdbTableEntry.YFilter
    atoMdbTableEntry.EntityData.YangName = "ato-mdb-table-entry"
    atoMdbTableEntry.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntry.EntityData.ParentYangName = "ato-mdb-table-entries"
    atoMdbTableEntry.EntityData.SegmentPath = "ato-mdb-table-entry" + types.AddNoKeyToken(atoMdbTableEntry)
    atoMdbTableEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/" + atoMdbTableEntry.EntityData.SegmentPath
    atoMdbTableEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntry.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Children.Append("fec-info", types.YChild{"FecInfo", &atoMdbTableEntry.FecInfo})
    atoMdbTableEntry.EntityData.Leafs = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", atoMdbTableEntry.PeerId})
    atoMdbTableEntry.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", atoMdbTableEntry.FeCtype})
    atoMdbTableEntry.EntityData.Leafs.Append("pw-id", types.YLeaf{"PwId", atoMdbTableEntry.PwId})
    atoMdbTableEntry.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", atoMdbTableEntry.AgiType})
    atoMdbTableEntry.EntityData.Leafs.Append("agi", types.YLeaf{"Agi", atoMdbTableEntry.Agi})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-type", types.YLeaf{"SaiiType", atoMdbTableEntry.SaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-local-id", types.YLeaf{"SaiiLocalId", atoMdbTableEntry.SaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-global-id", types.YLeaf{"SaiiGlobalId", atoMdbTableEntry.SaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-prefix", types.YLeaf{"SaiiPrefix", atoMdbTableEntry.SaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-ac-id", types.YLeaf{"SaiiAcId", atoMdbTableEntry.SaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-type", types.YLeaf{"TaiiType", atoMdbTableEntry.TaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-local-id", types.YLeaf{"TaiiLocalId", atoMdbTableEntry.TaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-global-id", types.YLeaf{"TaiiGlobalId", atoMdbTableEntry.TaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-prefix", types.YLeaf{"TaiiPrefix", atoMdbTableEntry.TaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-ac-id", types.YLeaf{"TaiiAcId", atoMdbTableEntry.TaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id-xr", types.YLeaf{"PeerIdXr", atoMdbTableEntry.PeerIdXr})
    atoMdbTableEntry.EntityData.Leafs.Append("mapping-tlv-count", types.YLeaf{"MappingTlvCount", atoMdbTableEntry.MappingTlvCount})
    atoMdbTableEntry.EntityData.Leafs.Append("notification-tlv-count", types.YLeaf{"NotificationTlvCount", atoMdbTableEntry.NotificationTlvCount})

    atoMdbTableEntry.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntry.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
// Pseudowire FEC information
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FECType. The type is L2vpnLdpPwFec.
    FeCtype interface{}

    // fec128.
    Fec128 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128

    // fec129.
    Fec129 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129

    // fec130.
    Fec130 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
}

func (fecInfo *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo) GetEntityData() *types.CommonEntityData {
    fecInfo.EntityData.YFilter = fecInfo.YFilter
    fecInfo.EntityData.YangName = "fec-info"
    fecInfo.EntityData.BundleName = "cisco_ios_xr"
    fecInfo.EntityData.ParentYangName = "ato-mdb-table-entry"
    fecInfo.EntityData.SegmentPath = "fec-info"
    fecInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/" + fecInfo.EntityData.SegmentPath
    fecInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fecInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fecInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fecInfo.EntityData.Children = types.NewOrderedMap()
    fecInfo.EntityData.Children.Append("fec128", types.YChild{"Fec128", &fecInfo.Fec128})
    fecInfo.EntityData.Children.Append("fec129", types.YChild{"Fec129", &fecInfo.Fec129})
    fecInfo.EntityData.Children.Append("fec130", types.YChild{"Fec130", &fecInfo.Fec130})
    fecInfo.EntityData.Leafs = types.NewOrderedMap()
    fecInfo.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", fecInfo.FeCtype})

    fecInfo.EntityData.YListKeys = []string {}

    return &(fecInfo.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128
// fec128
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire ID. The type is interface{} with range: 0..4294967295.
    PseudowireId interface{}
}

func (fec128 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128) GetEntityData() *types.CommonEntityData {
    fec128.EntityData.YFilter = fec128.YFilter
    fec128.EntityData.YangName = "fec128"
    fec128.EntityData.BundleName = "cisco_ios_xr"
    fec128.EntityData.ParentYangName = "fec-info"
    fec128.EntityData.SegmentPath = "fec128"
    fec128.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec128.EntityData.SegmentPath
    fec128.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec128.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec128.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec128.EntityData.Children = types.NewOrderedMap()
    fec128.EntityData.Leafs = types.NewOrderedMap()
    fec128.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", fec128.PseudowireId})

    fec128.EntityData.YListKeys = []string {}

    return &(fec128.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129
// fec129
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii

    // Target Attachment Individual Identifier.
    Taii MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
}

func (fec129 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129) GetEntityData() *types.CommonEntityData {
    fec129.EntityData.YFilter = fec129.YFilter
    fec129.EntityData.YangName = "fec129"
    fec129.EntityData.BundleName = "cisco_ios_xr"
    fec129.EntityData.ParentYangName = "fec-info"
    fec129.EntityData.SegmentPath = "fec129"
    fec129.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec129.EntityData.SegmentPath
    fec129.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec129.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec129.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec129.EntityData.Children = types.NewOrderedMap()
    fec129.EntityData.Children.Append("agi", types.YChild{"Agi", &fec129.Agi})
    fec129.EntityData.Children.Append("saii", types.YChild{"Saii", &fec129.Saii})
    fec129.EntityData.Children.Append("taii", types.YChild{"Taii", &fec129.Taii})
    fec129.EntityData.Leafs = types.NewOrderedMap()

    fec129.EntityData.YListKeys = []string {}

    return &(fec129.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi
// AGI
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
}

func (agi *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec129"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
// agi1
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii
// Source Attachment Individual Identifier
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
}

func (saii *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec129"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1
// aii1
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
// aii2
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
// Target Attachment Individual Identifier
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
}

func (taii *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii) GetEntityData() *types.CommonEntityData {
    taii.EntityData.YFilter = taii.YFilter
    taii.EntityData.YangName = "taii"
    taii.EntityData.BundleName = "cisco_ios_xr"
    taii.EntityData.ParentYangName = "fec129"
    taii.EntityData.SegmentPath = "taii"
    taii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + taii.EntityData.SegmentPath
    taii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taii.EntityData.Children = types.NewOrderedMap()
    taii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &taii.Aii1})
    taii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &taii.Aii2})
    taii.EntityData.Leafs = types.NewOrderedMap()
    taii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", taii.AiiType})

    taii.EntityData.YListKeys = []string {}

    return &(taii.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1
// aii1
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "taii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
// aii2
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "taii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
// fec130
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
}

func (fec130 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130) GetEntityData() *types.CommonEntityData {
    fec130.EntityData.YFilter = fec130.YFilter
    fec130.EntityData.YangName = "fec130"
    fec130.EntityData.BundleName = "cisco_ios_xr"
    fec130.EntityData.ParentYangName = "fec-info"
    fec130.EntityData.SegmentPath = "fec130"
    fec130.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec130.EntityData.SegmentPath
    fec130.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec130.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec130.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec130.EntityData.Children = types.NewOrderedMap()
    fec130.EntityData.Children.Append("agi", types.YChild{"Agi", &fec130.Agi})
    fec130.EntityData.Children.Append("saii", types.YChild{"Saii", &fec130.Saii})
    fec130.EntityData.Leafs = types.NewOrderedMap()

    fec130.EntityData.YListKeys = []string {}

    return &(fec130.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi
// AGI
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
}

func (agi *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec130"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
// agi1
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
// Source Attachment Individual Identifier
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
}

func (saii *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec130"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1
// aii1
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
// aii2
type MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Global_Active_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Global_Active_NsrSummaryAll
// Summary information regarding LDP NSR State
type MplsLdp_Global_Active_NsrSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_NsrSummaryAll_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Active_NsrSummaryAll_Sessions
}

func (nsrSummaryAll *MplsLdp_Global_Active_NsrSummaryAll) GetEntityData() *types.CommonEntityData {
    nsrSummaryAll.EntityData.YFilter = nsrSummaryAll.YFilter
    nsrSummaryAll.EntityData.YangName = "nsr-summary-all"
    nsrSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    nsrSummaryAll.EntityData.ParentYangName = "active"
    nsrSummaryAll.EntityData.SegmentPath = "nsr-summary-all"
    nsrSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + nsrSummaryAll.EntityData.SegmentPath
    nsrSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrSummaryAll.EntityData.Children = types.NewOrderedMap()
    nsrSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &nsrSummaryAll.Vrf})
    nsrSummaryAll.EntityData.Children.Append("sessions", types.YChild{"Sessions", &nsrSummaryAll.Sessions})
    nsrSummaryAll.EntityData.Leafs = types.NewOrderedMap()

    nsrSummaryAll.EntityData.YListKeys = []string {}

    return &(nsrSummaryAll.EntityData)
}

// MplsLdp_Global_Active_NsrSummaryAll_Vrf
// VRF information
type MplsLdp_Global_Active_NsrSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_NsrSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "nsr-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/nsr-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_NsrSummaryAll_Sessions
// Session summary
type MplsLdp_Global_Active_NsrSummaryAll_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Active_NsrSummaryAll_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "nsr-summary-all"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/nsr-summary-all/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Active_Summary
// LDP summary
type MplsLdp_Global_Active_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of configured VRFs (including default). The type is interface{} with
    // range: 0..4294967295.
    NumberOfVrf interface{}

    // Number of configured operational VRFs (including default). The type is
    // interface{} with range: 0..4294967295.
    NumberOfVrfOper interface{}

    // Number of known interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfInterfaces interface{}

    // Number of Forward Referenc interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfFwdRefInterfaces interface{}

    // Number of auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfAutocfgInterfaces interface{}

    // Bound status with sysdb. The type is bool.
    IsBoundWithSysdb interface{}

    // Registration status with Sysdb. The type is bool.
    IsRegisteredWithSysdb interface{}

    // Bound status with rsi. The type is bool.
    IsBoundWithRsi interface{}

    // Bound status with Interface Manager. The type is bool.
    IsBoundWithInterfaceManager interface{}

    // Registration status with Interface Manager. The type is bool.
    IsRegisteredWithInterfaceManager interface{}

    // Bound status with IP Arm. The type is bool.
    IsBoundWithIpArm interface{}

    // Bound status with LSD. The type is bool.
    IsBoundWithLsd interface{}

    // Registration status with LSD. The type is bool.
    IsRegisteredWithLsd interface{}

    // Bound status with IPv4 RIB. The type is bool.
    IsBoundWithIpv4Rib interface{}

    // Registration status with IPv4 RIB. The type is bool.
    IsRegisteredWithIpv4Rib interface{}

    // Total number of ipv4 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4ribTables interface{}

    // Number of ipv4 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv4ribTables interface{}

    // Bound status with IPv6 RIB. The type is bool.
    IsBoundWithIpv6Rib interface{}

    // Registration status with IPv6 RIB. The type is bool.
    IsRegisteredWithIpv6Rib interface{}

    // Total number of ipv6 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6ribTables interface{}

    // Number of ipv6 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv6ribTables interface{}

    // Bound status with L2VPN ATOM. The type is bool.
    IsBoundWithAtom interface{}

    // Bound status with NSR Mate. The type is bool.
    IsBoundWithNsrMate interface{}

    // NSR configured. The type is bool.
    IsNsrConfigured interface{}

    // mLDP registration status. The type is bool.
    IsMldpRegistered interface{}

    // Common Summary information.
    Common MplsLdp_Global_Active_Summary_Common
}

func (summary *MplsLdp_Global_Active_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "active"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("number-of-vrf", types.YLeaf{"NumberOfVrf", summary.NumberOfVrf})
    summary.EntityData.Leafs.Append("number-of-vrf-oper", types.YLeaf{"NumberOfVrfOper", summary.NumberOfVrfOper})
    summary.EntityData.Leafs.Append("number-of-interfaces", types.YLeaf{"NumberOfInterfaces", summary.NumberOfInterfaces})
    summary.EntityData.Leafs.Append("number-of-fwd-ref-interfaces", types.YLeaf{"NumberOfFwdRefInterfaces", summary.NumberOfFwdRefInterfaces})
    summary.EntityData.Leafs.Append("number-of-autocfg-interfaces", types.YLeaf{"NumberOfAutocfgInterfaces", summary.NumberOfAutocfgInterfaces})
    summary.EntityData.Leafs.Append("is-bound-with-sysdb", types.YLeaf{"IsBoundWithSysdb", summary.IsBoundWithSysdb})
    summary.EntityData.Leafs.Append("is-registered-with-sysdb", types.YLeaf{"IsRegisteredWithSysdb", summary.IsRegisteredWithSysdb})
    summary.EntityData.Leafs.Append("is-bound-with-rsi", types.YLeaf{"IsBoundWithRsi", summary.IsBoundWithRsi})
    summary.EntityData.Leafs.Append("is-bound-with-interface-manager", types.YLeaf{"IsBoundWithInterfaceManager", summary.IsBoundWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-registered-with-interface-manager", types.YLeaf{"IsRegisteredWithInterfaceManager", summary.IsRegisteredWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-bound-with-ip-arm", types.YLeaf{"IsBoundWithIpArm", summary.IsBoundWithIpArm})
    summary.EntityData.Leafs.Append("is-bound-with-lsd", types.YLeaf{"IsBoundWithLsd", summary.IsBoundWithLsd})
    summary.EntityData.Leafs.Append("is-registered-with-lsd", types.YLeaf{"IsRegisteredWithLsd", summary.IsRegisteredWithLsd})
    summary.EntityData.Leafs.Append("is-bound-with-ipv4-rib", types.YLeaf{"IsBoundWithIpv4Rib", summary.IsBoundWithIpv4Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv4-rib", types.YLeaf{"IsRegisteredWithIpv4Rib", summary.IsRegisteredWithIpv4Rib})
    summary.EntityData.Leafs.Append("number-of-ipv4rib-tables", types.YLeaf{"NumberOfIpv4ribTables", summary.NumberOfIpv4ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv4rib-tables", types.YLeaf{"NumberOfRegisteredIpv4ribTables", summary.NumberOfRegisteredIpv4ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-ipv6-rib", types.YLeaf{"IsBoundWithIpv6Rib", summary.IsBoundWithIpv6Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv6-rib", types.YLeaf{"IsRegisteredWithIpv6Rib", summary.IsRegisteredWithIpv6Rib})
    summary.EntityData.Leafs.Append("number-of-ipv6rib-tables", types.YLeaf{"NumberOfIpv6ribTables", summary.NumberOfIpv6ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv6rib-tables", types.YLeaf{"NumberOfRegisteredIpv6ribTables", summary.NumberOfRegisteredIpv6ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-atom", types.YLeaf{"IsBoundWithAtom", summary.IsBoundWithAtom})
    summary.EntityData.Leafs.Append("is-bound-with-nsr-mate", types.YLeaf{"IsBoundWithNsrMate", summary.IsBoundWithNsrMate})
    summary.EntityData.Leafs.Append("is-nsr-configured", types.YLeaf{"IsNsrConfigured", summary.IsNsrConfigured})
    summary.EntityData.Leafs.Append("is-mldp-registered", types.YLeaf{"IsMldpRegistered", summary.IsMldpRegistered})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Active_Summary_Common
// Common Summary information
type MplsLdp_Global_Active_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Active_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Active_Vrfs
// VRF specific operational data
type MplsLdp_Global_Active_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given VRF. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf.
    Vrf []*MplsLdp_Global_Active_Vrfs_Vrf
}

func (vrfs *MplsLdp_Global_Active_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "active"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf
// Operational data for given VRF
type MplsLdp_Global_Active_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Global_Active_Vrfs_Vrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Global_Active_Vrfs_Vrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Global_Active_Vrfs_Vrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Global_Active_Vrfs_Vrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Global_Active_Vrfs_Vrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Global_Active_Vrfs_Vrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Global_Active_Vrfs_Vrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Global_Active_Vrfs_Vrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Global_Active_Vrfs_Vrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Global_Active_Vrfs_Vrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Global_Active_Vrfs_Vrf_Statistics
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &vrf.GracefulRestart})
    vrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &vrf.Capabilities})
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("afs", types.YChild{"Afs", &vrf.Afs})
    vrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &vrf.NeighborBriefs})
    vrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &vrf.BackoffParameters})
    vrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &vrf.Backoffs})
    vrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &vrf.Nsr})
    vrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &vrf.Parameters})
    vrf.EntityData.Children.Append("issu", types.YChild{"Issu", &vrf.Issu})
    vrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &vrf.NeighborCapabilities})
    vrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &vrf.Neighbors})
    vrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &vrf.LdpId})
    vrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &vrf.Statistics})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Global_Active_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Capabilities
// LDP capability database information
type MplsLdp_Global_Active_Vrfs_Vrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability.
    Capability []*MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Global_Active_Vrfs_Vrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Global_Active_Vrfs_Vrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Summary
// LDP VRF summary
type MplsLdp_Global_Active_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Global_Active_Vrfs_Vrf_Summary_Common
}

func (summary *MplsLdp_Global_Active_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Summary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Summary_Common
// Common Summary information
type MplsLdp_Global_Active_Vrfs_Vrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Global_Active_Vrfs_Vrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs
// Address Family specific operational data
type MplsLdp_Global_Active_Vrfs_Vrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af.
    Af []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af
}

func (afs *MplsLdp_Global_Active_Vrfs_Vrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Global_Active_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Global_Active_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Global_Active_Vrfs_Vrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Global_Active_Vrfs_Vrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Backoffs
// The LDP backoff
type MplsLdp_Global_Active_Vrfs_Vrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Global_Active_Vrfs_Vrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Global_Active_Vrfs_Vrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Global_Active_Vrfs_Vrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Global_Active_Vrfs_Vrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr
// LDP NSR related information
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Global_Active_Vrfs_Vrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Parameters
// LDP parameters
type MplsLdp_Global_Active_Vrfs_Vrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Global_Active_Vrfs_Vrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Global_Active_Vrfs_Vrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Global_Active_Vrfs_Vrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Global_Active_Vrfs_Vrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Global_Active_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu
// LDP ISSU related information
type MplsLdp_Global_Active_Vrfs_Vrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics
}

func (issu *MplsLdp_Global_Active_Vrfs_Vrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Global_Active_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Active_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors
// The LDP Neighbors
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Global_Active_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_LdpId
// Local LDP Id
type MplsLdp_Global_Active_Vrfs_Vrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Global_Active_Vrfs_Vrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Statistics
// The LDP Statistics
type MplsLdp_Global_Active_Vrfs_Vrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic.
    Statistic []*MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic
}

func (statistics *MplsLdp_Global_Active_Vrfs_Vrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Global_Active_Vrfs_Vrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/vrfs/vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Global_Active_DiscoverySummaryAll
// Summary information regarding LDP discovery
type MplsLdp_Global_Active_DiscoverySummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Global_Active_DiscoverySummaryAll_Vrf
}

func (discoverySummaryAll *MplsLdp_Global_Active_DiscoverySummaryAll) GetEntityData() *types.CommonEntityData {
    discoverySummaryAll.EntityData.YFilter = discoverySummaryAll.YFilter
    discoverySummaryAll.EntityData.YangName = "discovery-summary-all"
    discoverySummaryAll.EntityData.BundleName = "cisco_ios_xr"
    discoverySummaryAll.EntityData.ParentYangName = "active"
    discoverySummaryAll.EntityData.SegmentPath = "discovery-summary-all"
    discoverySummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/" + discoverySummaryAll.EntityData.SegmentPath
    discoverySummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoverySummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoverySummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoverySummaryAll.EntityData.Children = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &discoverySummaryAll.Vrf})
    discoverySummaryAll.EntityData.Leafs = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", discoverySummaryAll.LocalLdpId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", discoverySummaryAll.NumOfLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", discoverySummaryAll.NumOfActiveLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", discoverySummaryAll.NumOfLnkDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", discoverySummaryAll.NumOfTgtDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", discoverySummaryAll.NumOfLnkDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", discoverySummaryAll.NumOfTgtDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", discoverySummaryAll.NumOfDiscWithBadAddrRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", discoverySummaryAll.NumOfDiscWithBadHelloPdu})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", discoverySummaryAll.NumOfDiscWithBadXportAddr})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", discoverySummaryAll.NumOfDiscWithSameRouterId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", discoverySummaryAll.NumOfDiscWithWrongRouterId})

    discoverySummaryAll.EntityData.YListKeys = []string {}

    return &(discoverySummaryAll.EntityData)
}

// MplsLdp_Global_Active_DiscoverySummaryAll_Vrf
// VRF information
type MplsLdp_Global_Active_DiscoverySummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Global_Active_DiscoverySummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "discovery-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/global/active/discovery-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes
// Location MPLS LDP operational data
type MplsLdp_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MPLD LDP operational data for a particular node. The type is slice of
    // MplsLdp_Nodes_Node.
    Node []*MplsLdp_Nodes_Node
}

func (nodes *MplsLdp_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "mpls-ldp"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/" + nodes.EntityData.SegmentPath
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = types.NewOrderedMap()
    nodes.EntityData.Children.Append("node", types.YChild{"Node", nil})
    for i := range nodes.Node {
        nodes.EntityData.Children.Append(types.GetSegmentPath(nodes.Node[i]), types.YChild{"Node", nodes.Node[i]})
    }
    nodes.EntityData.Leafs = types.NewOrderedMap()

    nodes.EntityData.YListKeys = []string {}

    return &(nodes.EntityData)
}

// MplsLdp_Nodes_Node
// The MPLD LDP operational data for a particular
// node
type MplsLdp_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The identifier for the node. The type is string
    // with pattern: ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // DefaultVRF specific operational data.
    DefaultVrf MplsLdp_Nodes_Node_DefaultVrf

    // Summary information regarding LDP forwarding setup.
    ForwardingSummaryAll MplsLdp_Nodes_Node_ForwardingSummaryAll

    // Aggregate VRF counters for the LDP Label Infomation Base (LIB).
    BindingsSummaryAll MplsLdp_Nodes_Node_BindingsSummaryAll

    // AToM DB Table.
    AtoMdbTableEntries MplsLdp_Nodes_Node_AtoMdbTableEntries

    // Summary information regarding LDP NSR State.
    NsrSummaryAll MplsLdp_Nodes_Node_NsrSummaryAll

    // LDP summary.
    Summary MplsLdp_Nodes_Node_Summary

    // VRF specific operational data.
    Vrfs MplsLdp_Nodes_Node_Vrfs

    // Summary information regarding LDP discovery.
    DiscoverySummaryAll MplsLdp_Nodes_Node_DiscoverySummaryAll
}

func (node *MplsLdp_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + types.AddKeyToken(node.NodeName, "node-name")
    node.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/" + node.EntityData.SegmentPath
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = types.NewOrderedMap()
    node.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &node.DefaultVrf})
    node.EntityData.Children.Append("forwarding-summary-all", types.YChild{"ForwardingSummaryAll", &node.ForwardingSummaryAll})
    node.EntityData.Children.Append("bindings-summary-all", types.YChild{"BindingsSummaryAll", &node.BindingsSummaryAll})
    node.EntityData.Children.Append("ato-mdb-table-entries", types.YChild{"AtoMdbTableEntries", &node.AtoMdbTableEntries})
    node.EntityData.Children.Append("nsr-summary-all", types.YChild{"NsrSummaryAll", &node.NsrSummaryAll})
    node.EntityData.Children.Append("summary", types.YChild{"Summary", &node.Summary})
    node.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &node.Vrfs})
    node.EntityData.Children.Append("discovery-summary-all", types.YChild{"DiscoverySummaryAll", &node.DiscoverySummaryAll})
    node.EntityData.Leafs = types.NewOrderedMap()
    node.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", node.NodeName})

    node.EntityData.YListKeys = []string {"NodeName"}

    return &(node.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf
// DefaultVRF specific operational data
type MplsLdp_Nodes_Node_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Nodes_Node_DefaultVrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Nodes_Node_DefaultVrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Nodes_Node_DefaultVrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Nodes_Node_DefaultVrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Nodes_Node_DefaultVrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Nodes_Node_DefaultVrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Nodes_Node_DefaultVrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Nodes_Node_DefaultVrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Nodes_Node_DefaultVrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Nodes_Node_DefaultVrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Nodes_Node_DefaultVrf_Statistics
}

func (defaultVrf *MplsLdp_Nodes_Node_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "node"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &defaultVrf.GracefulRestart})
    defaultVrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &defaultVrf.Capabilities})
    defaultVrf.EntityData.Children.Append("summary", types.YChild{"Summary", &defaultVrf.Summary})
    defaultVrf.EntityData.Children.Append("afs", types.YChild{"Afs", &defaultVrf.Afs})
    defaultVrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &defaultVrf.NeighborBriefs})
    defaultVrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &defaultVrf.BackoffParameters})
    defaultVrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &defaultVrf.Backoffs})
    defaultVrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &defaultVrf.Nsr})
    defaultVrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &defaultVrf.Parameters})
    defaultVrf.EntityData.Children.Append("issu", types.YChild{"Issu", &defaultVrf.Issu})
    defaultVrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &defaultVrf.NeighborCapabilities})
    defaultVrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &defaultVrf.Neighbors})
    defaultVrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &defaultVrf.LdpId})
    defaultVrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &defaultVrf.Statistics})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "default-vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Nodes_Node_DefaultVrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Capabilities
// LDP capability database information
type MplsLdp_Nodes_Node_DefaultVrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability.
    Capability []*MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Nodes_Node_DefaultVrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "default-vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Nodes_Node_DefaultVrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Summary
// LDP VRF summary
type MplsLdp_Nodes_Node_DefaultVrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Nodes_Node_DefaultVrf_Summary_Common
}

func (summary *MplsLdp_Nodes_Node_DefaultVrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "default-vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Summary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Summary_Common
// Common Summary information
type MplsLdp_Nodes_Node_DefaultVrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Nodes_Node_DefaultVrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs
// Address Family specific operational data
type MplsLdp_Nodes_Node_DefaultVrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af.
    Af []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af
}

func (afs *MplsLdp_Nodes_Node_DefaultVrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "default-vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Nodes_Node_DefaultVrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "default-vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Nodes_Node_DefaultVrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Nodes_Node_DefaultVrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Nodes_Node_DefaultVrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "default-vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Backoffs
// The LDP backoff
type MplsLdp_Nodes_Node_DefaultVrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Nodes_Node_DefaultVrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Nodes_Node_DefaultVrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "default-vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Nodes_Node_DefaultVrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Nodes_Node_DefaultVrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr
// LDP NSR related information
type MplsLdp_Nodes_Node_DefaultVrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Nodes_Node_DefaultVrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "default-vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Parameters
// LDP parameters
type MplsLdp_Nodes_Node_DefaultVrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Nodes_Node_DefaultVrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Nodes_Node_DefaultVrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "default-vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Nodes_Node_DefaultVrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Nodes_Node_DefaultVrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Nodes_Node_DefaultVrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu
// LDP ISSU related information
type MplsLdp_Nodes_Node_DefaultVrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics
}

func (issu *MplsLdp_Nodes_Node_DefaultVrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "default-vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_DefaultVrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "default-vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Nodes_Node_DefaultVrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors
// The LDP Neighbors
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Nodes_Node_DefaultVrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "default-vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Nodes_Node_DefaultVrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_LdpId
// Local LDP Id
type MplsLdp_Nodes_Node_DefaultVrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Nodes_Node_DefaultVrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "default-vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Statistics
// The LDP Statistics
type MplsLdp_Nodes_Node_DefaultVrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic.
    Statistic []*MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic
}

func (statistics *MplsLdp_Nodes_Node_DefaultVrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "default-vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Nodes_Node_DefaultVrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/default-vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Nodes_Node_ForwardingSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_ForwardingSummaryAll_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws
}

func (forwardingSummaryAll *MplsLdp_Nodes_Node_ForwardingSummaryAll) GetEntityData() *types.CommonEntityData {
    forwardingSummaryAll.EntityData.YFilter = forwardingSummaryAll.YFilter
    forwardingSummaryAll.EntityData.YangName = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummaryAll.EntityData.ParentYangName = "node"
    forwardingSummaryAll.EntityData.SegmentPath = "forwarding-summary-all"
    forwardingSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + forwardingSummaryAll.EntityData.SegmentPath
    forwardingSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummaryAll.EntityData.Children = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummaryAll.Vrf})
    forwardingSummaryAll.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummaryAll.Rws})
    forwardingSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummaryAll.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummaryAll.IsLsdBound})
    forwardingSummaryAll.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummaryAll.Fsht})
    forwardingSummaryAll.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummaryAll.Intfs})
    forwardingSummaryAll.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummaryAll.Lbls})

    forwardingSummaryAll.EntityData.YListKeys = []string {}

    return &(forwardingSummaryAll.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Vrf
// VRF information
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_ForwardingSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws
// Forwarding rewrites summary
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Nhs
}

func (rws *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary-all"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Nodes_Node_ForwardingSummaryAll_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/forwarding-summary-all/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Nodes_Node_BindingsSummaryAll
// Aggregate VRF counters for the LDP Label
// Infomation Base (LIB)
type MplsLdp_Nodes_Node_BindingsSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_BindingsSummaryAll_Vrf

    // bind af. The type is slice of MplsLdp_Nodes_Node_BindingsSummaryAll_BindAf.
    BindAf []*MplsLdp_Nodes_Node_BindingsSummaryAll_BindAf
}

func (bindingsSummaryAll *MplsLdp_Nodes_Node_BindingsSummaryAll) GetEntityData() *types.CommonEntityData {
    bindingsSummaryAll.EntityData.YFilter = bindingsSummaryAll.YFilter
    bindingsSummaryAll.EntityData.YangName = "bindings-summary-all"
    bindingsSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummaryAll.EntityData.ParentYangName = "node"
    bindingsSummaryAll.EntityData.SegmentPath = "bindings-summary-all"
    bindingsSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + bindingsSummaryAll.EntityData.SegmentPath
    bindingsSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummaryAll.EntityData.Children = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummaryAll.Vrf})
    bindingsSummaryAll.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummaryAll.BindAf {
        types.SetYListKey(bindingsSummaryAll.BindAf[i], i)
        bindingsSummaryAll.EntityData.Children.Append(types.GetSegmentPath(bindingsSummaryAll.BindAf[i]), types.YChild{"BindAf", bindingsSummaryAll.BindAf[i]})
    }
    bindingsSummaryAll.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummaryAll.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummaryAll.AddressFamily})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummaryAll.BindingNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummaryAll.BindingLocalNoRoute})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummaryAll.BindingLocalNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummaryAll.BindingLocalImplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummaryAll.BindingLocalExplicitNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummaryAll.BindingLocalNonNull})
    bindingsSummaryAll.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummaryAll.BindingLocalOor})
    bindingsSummaryAll.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummaryAll.LowestAllocatedLabel})
    bindingsSummaryAll.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummaryAll.HighestAllocatedLabel})

    bindingsSummaryAll.EntityData.YListKeys = []string {}

    return &(bindingsSummaryAll.EntityData)
}

// MplsLdp_Nodes_Node_BindingsSummaryAll_Vrf
// VRF information
type MplsLdp_Nodes_Node_BindingsSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_BindingsSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/bindings-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_BindingsSummaryAll_BindAf
// bind af
type MplsLdp_Nodes_Node_BindingsSummaryAll_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Nodes_Node_BindingsSummaryAll_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary-all"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/bindings-summary-all/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries
// AToM DB Table
type MplsLdp_Nodes_Node_AtoMdbTableEntries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Entries in AToM DB. The type is slice of
    // MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry.
    AtoMdbTableEntry []*MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry
}

func (atoMdbTableEntries *MplsLdp_Nodes_Node_AtoMdbTableEntries) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntries.EntityData.YFilter = atoMdbTableEntries.YFilter
    atoMdbTableEntries.EntityData.YangName = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntries.EntityData.ParentYangName = "node"
    atoMdbTableEntries.EntityData.SegmentPath = "ato-mdb-table-entries"
    atoMdbTableEntries.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + atoMdbTableEntries.EntityData.SegmentPath
    atoMdbTableEntries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntries.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntries.EntityData.Children.Append("ato-mdb-table-entry", types.YChild{"AtoMdbTableEntry", nil})
    for i := range atoMdbTableEntries.AtoMdbTableEntry {
        types.SetYListKey(atoMdbTableEntries.AtoMdbTableEntry[i], i)
        atoMdbTableEntries.EntityData.Children.Append(types.GetSegmentPath(atoMdbTableEntries.AtoMdbTableEntry[i]), types.YChild{"AtoMdbTableEntry", atoMdbTableEntries.AtoMdbTableEntry[i]})
    }
    atoMdbTableEntries.EntityData.Leafs = types.NewOrderedMap()

    atoMdbTableEntries.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntries.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry
// Entries in AToM DB
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PeerId interface{}

    // FEC Type. The type is interface{} with range: 0..4294967295.
    FeCtype interface{}

    // PW ID. The type is interface{} with range: 0..4294967295.
    PwId interface{}

    // AGI Type. The type is interface{} with range: 0..4294967295.
    AgiType interface{}

    // AGI. The type is interface{} with range: 0..4294967295.
    Agi interface{}

    // SAII Type. The type is interface{} with range: 0..4294967295.
    SaiiType interface{}

    // SAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SaiiLocalId interface{}

    // SAII Global ID. The type is interface{} with range: 0..4294967295.
    SaiiGlobalId interface{}

    // SAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    SaiiPrefix interface{}

    // SAII AC ID. The type is interface{} with range: 0..4294967295.
    SaiiAcId interface{}

    // TAII Type. The type is interface{} with range: 0..4294967295.
    TaiiType interface{}

    // TAII Local ID. The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TaiiLocalId interface{}

    // TAII Global ID. The type is interface{} with range: 0..4294967295.
    TaiiGlobalId interface{}

    // TAII Prefix. The type is string with pattern: [0-9a-fA-F]{1,8}.
    TaiiPrefix interface{}

    // TAII AC ID. The type is interface{} with range: 0..4294967295.
    TaiiAcId interface{}

    // Peer ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerIdXr interface{}

    // TLV Count from Label Mapping Message. The type is interface{} with range:
    // 0..4294967295.
    MappingTlvCount interface{}

    // TLV Count from Notification Message. The type is interface{} with range:
    // 0..4294967295.
    NotificationTlvCount interface{}

    // Pseudowire FEC information.
    FecInfo MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
}

func (atoMdbTableEntry *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry) GetEntityData() *types.CommonEntityData {
    atoMdbTableEntry.EntityData.YFilter = atoMdbTableEntry.YFilter
    atoMdbTableEntry.EntityData.YangName = "ato-mdb-table-entry"
    atoMdbTableEntry.EntityData.BundleName = "cisco_ios_xr"
    atoMdbTableEntry.EntityData.ParentYangName = "ato-mdb-table-entries"
    atoMdbTableEntry.EntityData.SegmentPath = "ato-mdb-table-entry" + types.AddNoKeyToken(atoMdbTableEntry)
    atoMdbTableEntry.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/" + atoMdbTableEntry.EntityData.SegmentPath
    atoMdbTableEntry.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    atoMdbTableEntry.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    atoMdbTableEntry.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    atoMdbTableEntry.EntityData.Children = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Children.Append("fec-info", types.YChild{"FecInfo", &atoMdbTableEntry.FecInfo})
    atoMdbTableEntry.EntityData.Leafs = types.NewOrderedMap()
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", atoMdbTableEntry.PeerId})
    atoMdbTableEntry.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", atoMdbTableEntry.FeCtype})
    atoMdbTableEntry.EntityData.Leafs.Append("pw-id", types.YLeaf{"PwId", atoMdbTableEntry.PwId})
    atoMdbTableEntry.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", atoMdbTableEntry.AgiType})
    atoMdbTableEntry.EntityData.Leafs.Append("agi", types.YLeaf{"Agi", atoMdbTableEntry.Agi})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-type", types.YLeaf{"SaiiType", atoMdbTableEntry.SaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-local-id", types.YLeaf{"SaiiLocalId", atoMdbTableEntry.SaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-global-id", types.YLeaf{"SaiiGlobalId", atoMdbTableEntry.SaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-prefix", types.YLeaf{"SaiiPrefix", atoMdbTableEntry.SaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("saii-ac-id", types.YLeaf{"SaiiAcId", atoMdbTableEntry.SaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-type", types.YLeaf{"TaiiType", atoMdbTableEntry.TaiiType})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-local-id", types.YLeaf{"TaiiLocalId", atoMdbTableEntry.TaiiLocalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-global-id", types.YLeaf{"TaiiGlobalId", atoMdbTableEntry.TaiiGlobalId})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-prefix", types.YLeaf{"TaiiPrefix", atoMdbTableEntry.TaiiPrefix})
    atoMdbTableEntry.EntityData.Leafs.Append("taii-ac-id", types.YLeaf{"TaiiAcId", atoMdbTableEntry.TaiiAcId})
    atoMdbTableEntry.EntityData.Leafs.Append("peer-id-xr", types.YLeaf{"PeerIdXr", atoMdbTableEntry.PeerIdXr})
    atoMdbTableEntry.EntityData.Leafs.Append("mapping-tlv-count", types.YLeaf{"MappingTlvCount", atoMdbTableEntry.MappingTlvCount})
    atoMdbTableEntry.EntityData.Leafs.Append("notification-tlv-count", types.YLeaf{"NotificationTlvCount", atoMdbTableEntry.NotificationTlvCount})

    atoMdbTableEntry.EntityData.YListKeys = []string {}

    return &(atoMdbTableEntry.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo
// Pseudowire FEC information
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FECType. The type is L2vpnLdpPwFec.
    FeCtype interface{}

    // fec128.
    Fec128 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128

    // fec129.
    Fec129 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129

    // fec130.
    Fec130 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
}

func (fecInfo *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo) GetEntityData() *types.CommonEntityData {
    fecInfo.EntityData.YFilter = fecInfo.YFilter
    fecInfo.EntityData.YangName = "fec-info"
    fecInfo.EntityData.BundleName = "cisco_ios_xr"
    fecInfo.EntityData.ParentYangName = "ato-mdb-table-entry"
    fecInfo.EntityData.SegmentPath = "fec-info"
    fecInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/" + fecInfo.EntityData.SegmentPath
    fecInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fecInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fecInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fecInfo.EntityData.Children = types.NewOrderedMap()
    fecInfo.EntityData.Children.Append("fec128", types.YChild{"Fec128", &fecInfo.Fec128})
    fecInfo.EntityData.Children.Append("fec129", types.YChild{"Fec129", &fecInfo.Fec129})
    fecInfo.EntityData.Children.Append("fec130", types.YChild{"Fec130", &fecInfo.Fec130})
    fecInfo.EntityData.Leafs = types.NewOrderedMap()
    fecInfo.EntityData.Leafs.Append("fe-ctype", types.YLeaf{"FeCtype", fecInfo.FeCtype})

    fecInfo.EntityData.YListKeys = []string {}

    return &(fecInfo.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128
// fec128
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire ID. The type is interface{} with range: 0..4294967295.
    PseudowireId interface{}
}

func (fec128 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec128) GetEntityData() *types.CommonEntityData {
    fec128.EntityData.YFilter = fec128.YFilter
    fec128.EntityData.YangName = "fec128"
    fec128.EntityData.BundleName = "cisco_ios_xr"
    fec128.EntityData.ParentYangName = "fec-info"
    fec128.EntityData.SegmentPath = "fec128"
    fec128.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec128.EntityData.SegmentPath
    fec128.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec128.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec128.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec128.EntityData.Children = types.NewOrderedMap()
    fec128.EntityData.Leafs = types.NewOrderedMap()
    fec128.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", fec128.PseudowireId})

    fec128.EntityData.YListKeys = []string {}

    return &(fec128.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129
// fec129
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii

    // Target Attachment Individual Identifier.
    Taii MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
}

func (fec129 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129) GetEntityData() *types.CommonEntityData {
    fec129.EntityData.YFilter = fec129.YFilter
    fec129.EntityData.YangName = "fec129"
    fec129.EntityData.BundleName = "cisco_ios_xr"
    fec129.EntityData.ParentYangName = "fec-info"
    fec129.EntityData.SegmentPath = "fec129"
    fec129.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec129.EntityData.SegmentPath
    fec129.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec129.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec129.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec129.EntityData.Children = types.NewOrderedMap()
    fec129.EntityData.Children.Append("agi", types.YChild{"Agi", &fec129.Agi})
    fec129.EntityData.Children.Append("saii", types.YChild{"Saii", &fec129.Saii})
    fec129.EntityData.Children.Append("taii", types.YChild{"Taii", &fec129.Taii})
    fec129.EntityData.Leafs = types.NewOrderedMap()

    fec129.EntityData.YListKeys = []string {}

    return &(fec129.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi
// AGI
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
}

func (agi *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec129"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1
// agi1
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii
// Source Attachment Individual Identifier
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
}

func (saii *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec129"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1
// aii1
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2
// aii2
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii
// Target Attachment Individual Identifier
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1

    // aii2.
    Aii2 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
}

func (taii *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii) GetEntityData() *types.CommonEntityData {
    taii.EntityData.YFilter = taii.YFilter
    taii.EntityData.YangName = "taii"
    taii.EntityData.BundleName = "cisco_ios_xr"
    taii.EntityData.ParentYangName = "fec129"
    taii.EntityData.SegmentPath = "taii"
    taii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/" + taii.EntityData.SegmentPath
    taii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taii.EntityData.Children = types.NewOrderedMap()
    taii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &taii.Aii1})
    taii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &taii.Aii2})
    taii.EntityData.Leafs = types.NewOrderedMap()
    taii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", taii.AiiType})

    taii.EntityData.YListKeys = []string {}

    return &(taii.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1
// aii1
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "taii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2
// aii2
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec129_Taii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "taii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec129/taii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130
// fec130
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGI.
    Agi MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi

    // Source Attachment Individual Identifier.
    Saii MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
}

func (fec130 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130) GetEntityData() *types.CommonEntityData {
    fec130.EntityData.YFilter = fec130.YFilter
    fec130.EntityData.YangName = "fec130"
    fec130.EntityData.BundleName = "cisco_ios_xr"
    fec130.EntityData.ParentYangName = "fec-info"
    fec130.EntityData.SegmentPath = "fec130"
    fec130.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/" + fec130.EntityData.SegmentPath
    fec130.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fec130.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fec130.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fec130.EntityData.Children = types.NewOrderedMap()
    fec130.EntityData.Children.Append("agi", types.YChild{"Agi", &fec130.Agi})
    fec130.EntityData.Children.Append("saii", types.YChild{"Saii", &fec130.Saii})
    fec130.EntityData.Leafs = types.NewOrderedMap()

    fec130.EntityData.YListKeys = []string {}

    return &(fec130.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi
// AGI
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AGIType. The type is L2vpnLdpPwAgi.
    AgiType interface{}

    // agi1.
    Agi1 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
}

func (agi *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi) GetEntityData() *types.CommonEntityData {
    agi.EntityData.YFilter = agi.YFilter
    agi.EntityData.YangName = "agi"
    agi.EntityData.BundleName = "cisco_ios_xr"
    agi.EntityData.ParentYangName = "fec130"
    agi.EntityData.SegmentPath = "agi"
    agi.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + agi.EntityData.SegmentPath
    agi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi.EntityData.Children = types.NewOrderedMap()
    agi.EntityData.Children.Append("agi1", types.YChild{"Agi1", &agi.Agi1})
    agi.EntityData.Leafs = types.NewOrderedMap()
    agi.EntityData.Leafs.Append("agi-type", types.YLeaf{"AgiType", agi.AgiType})

    agi.EntityData.YListKeys = []string {}

    return &(agi.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1
// agi1
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route Distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    Rd interface{}
}

func (agi1 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Agi_Agi1) GetEntityData() *types.CommonEntityData {
    agi1.EntityData.YFilter = agi1.YFilter
    agi1.EntityData.YangName = "agi1"
    agi1.EntityData.BundleName = "cisco_ios_xr"
    agi1.EntityData.ParentYangName = "agi"
    agi1.EntityData.SegmentPath = "agi1"
    agi1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/agi/" + agi1.EntityData.SegmentPath
    agi1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    agi1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    agi1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    agi1.EntityData.Children = types.NewOrderedMap()
    agi1.EntityData.Leafs = types.NewOrderedMap()
    agi1.EntityData.Leafs.Append("rd", types.YLeaf{"Rd", agi1.Rd})

    agi1.EntityData.YListKeys = []string {}

    return &(agi1.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii
// Source Attachment Individual Identifier
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AIIType. The type is L2vpnLdpPwAii.
    AiiType interface{}

    // aii1.
    Aii1 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1

    // aii2.
    Aii2 MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
}

func (saii *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii) GetEntityData() *types.CommonEntityData {
    saii.EntityData.YFilter = saii.YFilter
    saii.EntityData.YangName = "saii"
    saii.EntityData.BundleName = "cisco_ios_xr"
    saii.EntityData.ParentYangName = "fec130"
    saii.EntityData.SegmentPath = "saii"
    saii.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/" + saii.EntityData.SegmentPath
    saii.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    saii.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    saii.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    saii.EntityData.Children = types.NewOrderedMap()
    saii.EntityData.Children.Append("aii1", types.YChild{"Aii1", &saii.Aii1})
    saii.EntityData.Children.Append("aii2", types.YChild{"Aii2", &saii.Aii2})
    saii.EntityData.Leafs = types.NewOrderedMap()
    saii.EntityData.Leafs.Append("aii-type", types.YLeaf{"AiiType", saii.AiiType})

    saii.EntityData.YListKeys = []string {}

    return &(saii.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1
// aii1
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalId interface{}
}

func (aii1 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii1) GetEntityData() *types.CommonEntityData {
    aii1.EntityData.YFilter = aii1.YFilter
    aii1.EntityData.YangName = "aii1"
    aii1.EntityData.BundleName = "cisco_ios_xr"
    aii1.EntityData.ParentYangName = "saii"
    aii1.EntityData.SegmentPath = "aii1"
    aii1.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii1.EntityData.SegmentPath
    aii1.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii1.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii1.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii1.EntityData.Children = types.NewOrderedMap()
    aii1.EntityData.Leafs = types.NewOrderedMap()
    aii1.EntityData.Leafs.Append("local-id", types.YLeaf{"LocalId", aii1.LocalId})

    aii1.EntityData.YListKeys = []string {}

    return &(aii1.EntityData)
}

// MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2
// aii2
type MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global ID. The type is interface{} with range: 0..4294967295.
    GobalId interface{}

    // Prefix. The type is interface{} with range: 0..4294967295.
    Prefix interface{}

    // AC ID. The type is interface{} with range: 0..4294967295.
    AcId interface{}
}

func (aii2 *MplsLdp_Nodes_Node_AtoMdbTableEntries_AtoMdbTableEntry_FecInfo_Fec130_Saii_Aii2) GetEntityData() *types.CommonEntityData {
    aii2.EntityData.YFilter = aii2.YFilter
    aii2.EntityData.YangName = "aii2"
    aii2.EntityData.BundleName = "cisco_ios_xr"
    aii2.EntityData.ParentYangName = "saii"
    aii2.EntityData.SegmentPath = "aii2"
    aii2.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/ato-mdb-table-entries/ato-mdb-table-entry/fec-info/fec130/saii/" + aii2.EntityData.SegmentPath
    aii2.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aii2.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aii2.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aii2.EntityData.Children = types.NewOrderedMap()
    aii2.EntityData.Leafs = types.NewOrderedMap()
    aii2.EntityData.Leafs.Append("gobal-id", types.YLeaf{"GobalId", aii2.GobalId})
    aii2.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", aii2.Prefix})
    aii2.EntityData.Leafs.Append("ac-id", types.YLeaf{"AcId", aii2.AcId})

    aii2.EntityData.YListKeys = []string {}

    return &(aii2.EntityData)
}

// MplsLdp_Nodes_Node_NsrSummaryAll
// Summary information regarding LDP NSR State
type MplsLdp_Nodes_Node_NsrSummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_NsrSummaryAll_Vrf

    // Session summary.
    Sessions MplsLdp_Nodes_Node_NsrSummaryAll_Sessions
}

func (nsrSummaryAll *MplsLdp_Nodes_Node_NsrSummaryAll) GetEntityData() *types.CommonEntityData {
    nsrSummaryAll.EntityData.YFilter = nsrSummaryAll.YFilter
    nsrSummaryAll.EntityData.YangName = "nsr-summary-all"
    nsrSummaryAll.EntityData.BundleName = "cisco_ios_xr"
    nsrSummaryAll.EntityData.ParentYangName = "node"
    nsrSummaryAll.EntityData.SegmentPath = "nsr-summary-all"
    nsrSummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + nsrSummaryAll.EntityData.SegmentPath
    nsrSummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrSummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrSummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrSummaryAll.EntityData.Children = types.NewOrderedMap()
    nsrSummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &nsrSummaryAll.Vrf})
    nsrSummaryAll.EntityData.Children.Append("sessions", types.YChild{"Sessions", &nsrSummaryAll.Sessions})
    nsrSummaryAll.EntityData.Leafs = types.NewOrderedMap()

    nsrSummaryAll.EntityData.YListKeys = []string {}

    return &(nsrSummaryAll.EntityData)
}

// MplsLdp_Nodes_Node_NsrSummaryAll_Vrf
// VRF information
type MplsLdp_Nodes_Node_NsrSummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_NsrSummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "nsr-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/nsr-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_NsrSummaryAll_Sessions
// Session summary
type MplsLdp_Nodes_Node_NsrSummaryAll_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Nodes_Node_NsrSummaryAll_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "nsr-summary-all"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/nsr-summary-all/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Nodes_Node_Summary
// LDP summary
type MplsLdp_Nodes_Node_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of configured VRFs (including default). The type is interface{} with
    // range: 0..4294967295.
    NumberOfVrf interface{}

    // Number of configured operational VRFs (including default). The type is
    // interface{} with range: 0..4294967295.
    NumberOfVrfOper interface{}

    // Number of known interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfInterfaces interface{}

    // Number of Forward Referenc interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfFwdRefInterfaces interface{}

    // Number of auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfAutocfgInterfaces interface{}

    // Bound status with sysdb. The type is bool.
    IsBoundWithSysdb interface{}

    // Registration status with Sysdb. The type is bool.
    IsRegisteredWithSysdb interface{}

    // Bound status with rsi. The type is bool.
    IsBoundWithRsi interface{}

    // Bound status with Interface Manager. The type is bool.
    IsBoundWithInterfaceManager interface{}

    // Registration status with Interface Manager. The type is bool.
    IsRegisteredWithInterfaceManager interface{}

    // Bound status with IP Arm. The type is bool.
    IsBoundWithIpArm interface{}

    // Bound status with LSD. The type is bool.
    IsBoundWithLsd interface{}

    // Registration status with LSD. The type is bool.
    IsRegisteredWithLsd interface{}

    // Bound status with IPv4 RIB. The type is bool.
    IsBoundWithIpv4Rib interface{}

    // Registration status with IPv4 RIB. The type is bool.
    IsRegisteredWithIpv4Rib interface{}

    // Total number of ipv4 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4ribTables interface{}

    // Number of ipv4 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv4ribTables interface{}

    // Bound status with IPv6 RIB. The type is bool.
    IsBoundWithIpv6Rib interface{}

    // Registration status with IPv6 RIB. The type is bool.
    IsRegisteredWithIpv6Rib interface{}

    // Total number of ipv6 RIB tables. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6ribTables interface{}

    // Number of ipv6 RIB tables registered. The type is interface{} with range:
    // 0..4294967295.
    NumberOfRegisteredIpv6ribTables interface{}

    // Bound status with L2VPN ATOM. The type is bool.
    IsBoundWithAtom interface{}

    // Bound status with NSR Mate. The type is bool.
    IsBoundWithNsrMate interface{}

    // NSR configured. The type is bool.
    IsNsrConfigured interface{}

    // mLDP registration status. The type is bool.
    IsMldpRegistered interface{}

    // Common Summary information.
    Common MplsLdp_Nodes_Node_Summary_Common
}

func (summary *MplsLdp_Nodes_Node_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "node"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("number-of-vrf", types.YLeaf{"NumberOfVrf", summary.NumberOfVrf})
    summary.EntityData.Leafs.Append("number-of-vrf-oper", types.YLeaf{"NumberOfVrfOper", summary.NumberOfVrfOper})
    summary.EntityData.Leafs.Append("number-of-interfaces", types.YLeaf{"NumberOfInterfaces", summary.NumberOfInterfaces})
    summary.EntityData.Leafs.Append("number-of-fwd-ref-interfaces", types.YLeaf{"NumberOfFwdRefInterfaces", summary.NumberOfFwdRefInterfaces})
    summary.EntityData.Leafs.Append("number-of-autocfg-interfaces", types.YLeaf{"NumberOfAutocfgInterfaces", summary.NumberOfAutocfgInterfaces})
    summary.EntityData.Leafs.Append("is-bound-with-sysdb", types.YLeaf{"IsBoundWithSysdb", summary.IsBoundWithSysdb})
    summary.EntityData.Leafs.Append("is-registered-with-sysdb", types.YLeaf{"IsRegisteredWithSysdb", summary.IsRegisteredWithSysdb})
    summary.EntityData.Leafs.Append("is-bound-with-rsi", types.YLeaf{"IsBoundWithRsi", summary.IsBoundWithRsi})
    summary.EntityData.Leafs.Append("is-bound-with-interface-manager", types.YLeaf{"IsBoundWithInterfaceManager", summary.IsBoundWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-registered-with-interface-manager", types.YLeaf{"IsRegisteredWithInterfaceManager", summary.IsRegisteredWithInterfaceManager})
    summary.EntityData.Leafs.Append("is-bound-with-ip-arm", types.YLeaf{"IsBoundWithIpArm", summary.IsBoundWithIpArm})
    summary.EntityData.Leafs.Append("is-bound-with-lsd", types.YLeaf{"IsBoundWithLsd", summary.IsBoundWithLsd})
    summary.EntityData.Leafs.Append("is-registered-with-lsd", types.YLeaf{"IsRegisteredWithLsd", summary.IsRegisteredWithLsd})
    summary.EntityData.Leafs.Append("is-bound-with-ipv4-rib", types.YLeaf{"IsBoundWithIpv4Rib", summary.IsBoundWithIpv4Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv4-rib", types.YLeaf{"IsRegisteredWithIpv4Rib", summary.IsRegisteredWithIpv4Rib})
    summary.EntityData.Leafs.Append("number-of-ipv4rib-tables", types.YLeaf{"NumberOfIpv4ribTables", summary.NumberOfIpv4ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv4rib-tables", types.YLeaf{"NumberOfRegisteredIpv4ribTables", summary.NumberOfRegisteredIpv4ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-ipv6-rib", types.YLeaf{"IsBoundWithIpv6Rib", summary.IsBoundWithIpv6Rib})
    summary.EntityData.Leafs.Append("is-registered-with-ipv6-rib", types.YLeaf{"IsRegisteredWithIpv6Rib", summary.IsRegisteredWithIpv6Rib})
    summary.EntityData.Leafs.Append("number-of-ipv6rib-tables", types.YLeaf{"NumberOfIpv6ribTables", summary.NumberOfIpv6ribTables})
    summary.EntityData.Leafs.Append("number-of-registered-ipv6rib-tables", types.YLeaf{"NumberOfRegisteredIpv6ribTables", summary.NumberOfRegisteredIpv6ribTables})
    summary.EntityData.Leafs.Append("is-bound-with-atom", types.YLeaf{"IsBoundWithAtom", summary.IsBoundWithAtom})
    summary.EntityData.Leafs.Append("is-bound-with-nsr-mate", types.YLeaf{"IsBoundWithNsrMate", summary.IsBoundWithNsrMate})
    summary.EntityData.Leafs.Append("is-nsr-configured", types.YLeaf{"IsNsrConfigured", summary.IsNsrConfigured})
    summary.EntityData.Leafs.Append("is-mldp-registered", types.YLeaf{"IsMldpRegistered", summary.IsMldpRegistered})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Nodes_Node_Summary_Common
// Common Summary information
type MplsLdp_Nodes_Node_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Nodes_Node_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs
// VRF specific operational data
type MplsLdp_Nodes_Node_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given VRF. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf.
    Vrf []*MplsLdp_Nodes_Node_Vrfs_Vrf
}

func (vrfs *MplsLdp_Nodes_Node_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "node"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf
// Operational data for given VRF
type MplsLdp_Nodes_Node_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // LDP Graceful Restart info.
    GracefulRestart MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart

    // LDP capability database information.
    Capabilities MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities

    // LDP VRF summary.
    Summary MplsLdp_Nodes_Node_Vrfs_Vrf_Summary

    // Address Family specific operational data.
    Afs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs

    // The LDP Neighbors (brief).
    NeighborBriefs MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs

    // The LDP Backoff Parameters.
    BackoffParameters MplsLdp_Nodes_Node_Vrfs_Vrf_BackoffParameters

    // The LDP backoff.
    Backoffs MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs

    // LDP NSR related information.
    Nsr MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr

    // LDP parameters.
    Parameters MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters

    // LDP ISSU related information.
    Issu MplsLdp_Nodes_Node_Vrfs_Vrf_Issu

    // LDP Neighbors Capabilities.
    NeighborCapabilities MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities

    // The LDP Neighbors.
    Neighbors MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors

    // Local LDP Id.
    LdpId MplsLdp_Nodes_Node_Vrfs_Vrf_LdpId

    // The LDP Statistics.
    Statistics MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &vrf.GracefulRestart})
    vrf.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &vrf.Capabilities})
    vrf.EntityData.Children.Append("summary", types.YChild{"Summary", &vrf.Summary})
    vrf.EntityData.Children.Append("afs", types.YChild{"Afs", &vrf.Afs})
    vrf.EntityData.Children.Append("neighbor-briefs", types.YChild{"NeighborBriefs", &vrf.NeighborBriefs})
    vrf.EntityData.Children.Append("backoff-parameters", types.YChild{"BackoffParameters", &vrf.BackoffParameters})
    vrf.EntityData.Children.Append("backoffs", types.YChild{"Backoffs", &vrf.Backoffs})
    vrf.EntityData.Children.Append("nsr", types.YChild{"Nsr", &vrf.Nsr})
    vrf.EntityData.Children.Append("parameters", types.YChild{"Parameters", &vrf.Parameters})
    vrf.EntityData.Children.Append("issu", types.YChild{"Issu", &vrf.Issu})
    vrf.EntityData.Children.Append("neighbor-capabilities", types.YChild{"NeighborCapabilities", &vrf.NeighborCapabilities})
    vrf.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &vrf.Neighbors})
    vrf.EntityData.Children.Append("ldp-id", types.YChild{"LdpId", &vrf.LdpId})
    vrf.EntityData.Children.Append("statistics", types.YChild{"Statistics", &vrf.Statistics})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart
// LDP Graceful Restart info
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart forwarding state hold timer running. The type is bool.
    IsForwardingStateHoldTimerRunning interface{}

    // Forwarding state hold timer remaining time in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    ForwardingStateHoldTimerRemainingSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_Vrf

    // Vector of graceful restart neighbor information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor.
    GracefulRestartableNeighbor []*MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
}

func (gracefulRestart *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "vrf"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("vrf", types.YChild{"Vrf", &gracefulRestart.Vrf})
    gracefulRestart.EntityData.Children.Append("graceful-restartable-neighbor", types.YChild{"GracefulRestartableNeighbor", nil})
    for i := range gracefulRestart.GracefulRestartableNeighbor {
        types.SetYListKey(gracefulRestart.GracefulRestartableNeighbor[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.GracefulRestartableNeighbor[i]), types.YChild{"GracefulRestartableNeighbor", gracefulRestart.GracefulRestartableNeighbor[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-forwarding-state-hold-timer-running", types.YLeaf{"IsForwardingStateHoldTimerRunning", gracefulRestart.IsForwardingStateHoldTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("forwarding-state-hold-timer-remaining-seconds", types.YLeaf{"ForwardingStateHoldTimerRemainingSeconds", gracefulRestart.ForwardingStateHoldTimerRemainingSeconds})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "graceful-restart"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/graceful-restart/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor
// Vector of graceful restart neighbor information
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // ConnectCount. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Is neighbor up. The type is bool.
    IsNeighborUp interface{}

    // Is liveness timer running. The type is bool.
    IsLivenessTimerRunning interface{}

    // Remaining time from liveness timer. The type is interface{} with range:
    // 0..4294967295.
    LivenessTimerRemainingSeconds interface{}

    // Is recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Recovery timer remining time. The type is interface{} with range:
    // 0..4294967295.
    RecoveryTimerRemainingSeconds interface{}

    // Count of back2back flaps. The type is interface{} with range: 0..255.
    DownNbrFlapCount interface{}

    // Flags. The type is interface{} with range: 0..4294967295.
    DownNbrFlags interface{}

    // Session down reason code. The type is interface{} with range:
    // 0..4294967295.
    DownNbrDownReason interface{}

    // GR peer LDP Id.
    GrPeer MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer

    // Interfaces bound to GR down Nbr. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface.
    DownNbrInterface []*MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface

    // Addresses bound to GR down Nbr. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress.
    DownNbrAddress []*MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
}

func (gracefulRestartableNeighbor *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor) GetEntityData() *types.CommonEntityData {
    gracefulRestartableNeighbor.EntityData.YFilter = gracefulRestartableNeighbor.YFilter
    gracefulRestartableNeighbor.EntityData.YangName = "graceful-restartable-neighbor"
    gracefulRestartableNeighbor.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartableNeighbor.EntityData.ParentYangName = "graceful-restart"
    gracefulRestartableNeighbor.EntityData.SegmentPath = "graceful-restartable-neighbor" + types.AddNoKeyToken(gracefulRestartableNeighbor)
    gracefulRestartableNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/graceful-restart/" + gracefulRestartableNeighbor.EntityData.SegmentPath
    gracefulRestartableNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartableNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartableNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartableNeighbor.EntityData.Children = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Children.Append("gr-peer", types.YChild{"GrPeer", &gracefulRestartableNeighbor.GrPeer})
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-interface", types.YChild{"DownNbrInterface", nil})
    for i := range gracefulRestartableNeighbor.DownNbrInterface {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrInterface[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrInterface[i]), types.YChild{"DownNbrInterface", gracefulRestartableNeighbor.DownNbrInterface[i]})
    }
    gracefulRestartableNeighbor.EntityData.Children.Append("down-nbr-address", types.YChild{"DownNbrAddress", nil})
    for i := range gracefulRestartableNeighbor.DownNbrAddress {
        types.SetYListKey(gracefulRestartableNeighbor.DownNbrAddress[i], i)
        gracefulRestartableNeighbor.EntityData.Children.Append(types.GetSegmentPath(gracefulRestartableNeighbor.DownNbrAddress[i]), types.YChild{"DownNbrAddress", gracefulRestartableNeighbor.DownNbrAddress[i]})
    }
    gracefulRestartableNeighbor.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartableNeighbor.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", gracefulRestartableNeighbor.ConnectCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-neighbor-up", types.YLeaf{"IsNeighborUp", gracefulRestartableNeighbor.IsNeighborUp})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-liveness-timer-running", types.YLeaf{"IsLivenessTimerRunning", gracefulRestartableNeighbor.IsLivenessTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("liveness-timer-remaining-seconds", types.YLeaf{"LivenessTimerRemainingSeconds", gracefulRestartableNeighbor.LivenessTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestartableNeighbor.IsRecoveryTimerRunning})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("recovery-timer-remaining-seconds", types.YLeaf{"RecoveryTimerRemainingSeconds", gracefulRestartableNeighbor.RecoveryTimerRemainingSeconds})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flap-count", types.YLeaf{"DownNbrFlapCount", gracefulRestartableNeighbor.DownNbrFlapCount})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-flags", types.YLeaf{"DownNbrFlags", gracefulRestartableNeighbor.DownNbrFlags})
    gracefulRestartableNeighbor.EntityData.Leafs.Append("down-nbr-down-reason", types.YLeaf{"DownNbrDownReason", gracefulRestartableNeighbor.DownNbrDownReason})

    gracefulRestartableNeighbor.EntityData.YListKeys = []string {}

    return &(gracefulRestartableNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer
// GR peer LDP Id
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (grPeer *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_GrPeer) GetEntityData() *types.CommonEntityData {
    grPeer.EntityData.YFilter = grPeer.YFilter
    grPeer.EntityData.YangName = "gr-peer"
    grPeer.EntityData.BundleName = "cisco_ios_xr"
    grPeer.EntityData.ParentYangName = "graceful-restartable-neighbor"
    grPeer.EntityData.SegmentPath = "gr-peer"
    grPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + grPeer.EntityData.SegmentPath
    grPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grPeer.EntityData.Children = types.NewOrderedMap()
    grPeer.EntityData.Leafs = types.NewOrderedMap()
    grPeer.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", grPeer.LsrId})
    grPeer.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", grPeer.LabelSpaceId})
    grPeer.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", grPeer.LdpId})

    grPeer.EntityData.YListKeys = []string {}

    return &(grPeer.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface
// Interfaces bound to GR down Nbr
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface adj Address Family. The type is LdpAfId.
    AddressFamily interface{}

    // Interfaces handle. The type is string with pattern: [a-zA-Z0-9._/-]+.
    InterfaceHandle interface{}
}

func (downNbrInterface *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrInterface) GetEntityData() *types.CommonEntityData {
    downNbrInterface.EntityData.YFilter = downNbrInterface.YFilter
    downNbrInterface.EntityData.YangName = "down-nbr-interface"
    downNbrInterface.EntityData.BundleName = "cisco_ios_xr"
    downNbrInterface.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrInterface.EntityData.SegmentPath = "down-nbr-interface" + types.AddNoKeyToken(downNbrInterface)
    downNbrInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrInterface.EntityData.SegmentPath
    downNbrInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrInterface.EntityData.Children = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs = types.NewOrderedMap()
    downNbrInterface.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", downNbrInterface.AddressFamily})
    downNbrInterface.EntityData.Leafs.Append("interface-handle", types.YLeaf{"InterfaceHandle", downNbrInterface.InterfaceHandle})

    downNbrInterface.EntityData.YListKeys = []string {}

    return &(downNbrInterface.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress
// Addresses bound to GR down Nbr
type MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (downNbrAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_GracefulRestart_GracefulRestartableNeighbor_DownNbrAddress) GetEntityData() *types.CommonEntityData {
    downNbrAddress.EntityData.YFilter = downNbrAddress.YFilter
    downNbrAddress.EntityData.YangName = "down-nbr-address"
    downNbrAddress.EntityData.BundleName = "cisco_ios_xr"
    downNbrAddress.EntityData.ParentYangName = "graceful-restartable-neighbor"
    downNbrAddress.EntityData.SegmentPath = "down-nbr-address" + types.AddNoKeyToken(downNbrAddress)
    downNbrAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/graceful-restart/graceful-restartable-neighbor/" + downNbrAddress.EntityData.SegmentPath
    downNbrAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    downNbrAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    downNbrAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    downNbrAddress.EntityData.Children = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs = types.NewOrderedMap()
    downNbrAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", downNbrAddress.Afi})
    downNbrAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", downNbrAddress.Dummy})
    downNbrAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", downNbrAddress.Ipv4})
    downNbrAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", downNbrAddress.Ipv6})

    downNbrAddress.EntityData.YListKeys = []string {}

    return &(downNbrAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities
// LDP capability database information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP capability. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability.
    Capability []*MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability
}

func (capabilities *MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "vrf"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("capability", types.YChild{"Capability", nil})
    for i := range capabilities.Capability {
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Capability[i]), types.YChild{"Capability", capabilities.Capability[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability
// Information on LDP capability
type MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The capability type (IANA assigned). The type is
    // interface{} with range: 0..4294967295.
    CapabilityType interface{}

    // Capability owner. The type is string.
    CapabilityOwner interface{}

    // Capability information.
    Capability MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability_Capability
}

func (capability *MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capabilities"
    capability.EntityData.SegmentPath = "capability" + types.AddKeyToken(capability.CapabilityType, "capability-type")
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/capabilities/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Children.Append("capability", types.YChild{"Capability", &capability.Capability})
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("capability-type", types.YLeaf{"CapabilityType", capability.CapabilityType})
    capability.EntityData.Leafs.Append("capability-owner", types.YLeaf{"CapabilityOwner", capability.CapabilityOwner})

    capability.EntityData.YListKeys = []string {"CapabilityType"}

    return &(capability.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability_Capability
// Capability information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability_Capability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (capability *MplsLdp_Nodes_Node_Vrfs_Vrf_Capabilities_Capability_Capability) GetEntityData() *types.CommonEntityData {
    capability.EntityData.YFilter = capability.YFilter
    capability.EntityData.YangName = "capability"
    capability.EntityData.BundleName = "cisco_ios_xr"
    capability.EntityData.ParentYangName = "capability"
    capability.EntityData.SegmentPath = "capability"
    capability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/capabilities/capability/" + capability.EntityData.SegmentPath
    capability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capability.EntityData.Children = types.NewOrderedMap()
    capability.EntityData.Leafs = types.NewOrderedMap()
    capability.EntityData.Leafs.Append("type", types.YLeaf{"Type", capability.Type})
    capability.EntityData.Leafs.Append("description", types.YLeaf{"Description", capability.Description})
    capability.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", capability.CapabilityDataLength})
    capability.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", capability.CapabilityData})

    capability.EntityData.YListKeys = []string {}

    return &(capability.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Summary
// LDP VRF summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Vrf

    // Common Summary information.
    Common MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Common
}

func (summary *MplsLdp_Nodes_Node_Vrfs_Vrf_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "vrf"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Children.Append("common", types.YChild{"Common", &summary.Common})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Common
// Common Summary information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Common struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Families enabled. The type is LdpAf.
    AddressFamilies interface{}

    // Number of IPv4 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4af interface{}

    // Number of IPv6 address-families enabled. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6af interface{}

    // Number of neighbors. The type is interface{} with range: 0..4294967295.
    NumberOfNeighbors interface{}

    // Number of NSR-synced/operational neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfNsrSyncedNeighbors interface{}

    // Number of Graceful Restart neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumberOfGracefulRestartNeighbors interface{}

    // Number of Downstream-On-Demand neighbors. The type is interface{} with
    // range: 0..4294967295.
    NumberOfDownstreamOnDemandNeighbors interface{}

    // Number of LDP discovery IPv4 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv4HelloAdj interface{}

    // Number of LDP discovery IPv6 hello adjacencies. The type is interface{}
    // with range: 0..4294967295.
    NumberOfIpv6HelloAdj interface{}

    // Number of resolved IPv4 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4Routes interface{}

    // Number of resolved IPv6 routes. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6Routes interface{}

    // Number of IPv4 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv4LocalAddresses interface{}

    // Number of IPv6 local addresses. The type is interface{} with range:
    // 0..4294967295.
    NumberOfIpv6LocalAddresses interface{}

    // Number of LDP configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    NumberOfLdpInterfaces interface{}

    // Number of LDP IPv4 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv4ldpInterfaces interface{}

    // Number of LDP IPv6 configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumberOfIpv6ldpInterfaces interface{}

    // Total number of ipv4 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv4 interface{}

    // Total number of ipv6 bindings. The type is interface{} with range:
    // 0..4294967295.
    NumberOfBindingsIpv6 interface{}

    // Total number of ipv4 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv4 interface{}

    // Total number of ipv6 local label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfLocalBindingsIpv6 interface{}

    // Total number of ipv4 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv4 interface{}

    // Total number of ipv6 remote label bindings. The type is interface{} with
    // range: 0..4294967295.
    NumberOfRemoteBindingsIpv6 interface{}
}

func (common *MplsLdp_Nodes_Node_Vrfs_Vrf_Summary_Common) GetEntityData() *types.CommonEntityData {
    common.EntityData.YFilter = common.YFilter
    common.EntityData.YangName = "common"
    common.EntityData.BundleName = "cisco_ios_xr"
    common.EntityData.ParentYangName = "summary"
    common.EntityData.SegmentPath = "common"
    common.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/summary/" + common.EntityData.SegmentPath
    common.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    common.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    common.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    common.EntityData.Children = types.NewOrderedMap()
    common.EntityData.Leafs = types.NewOrderedMap()
    common.EntityData.Leafs.Append("address-families", types.YLeaf{"AddressFamilies", common.AddressFamilies})
    common.EntityData.Leafs.Append("number-of-ipv4af", types.YLeaf{"NumberOfIpv4af", common.NumberOfIpv4af})
    common.EntityData.Leafs.Append("number-of-ipv6af", types.YLeaf{"NumberOfIpv6af", common.NumberOfIpv6af})
    common.EntityData.Leafs.Append("number-of-neighbors", types.YLeaf{"NumberOfNeighbors", common.NumberOfNeighbors})
    common.EntityData.Leafs.Append("number-of-nsr-synced-neighbors", types.YLeaf{"NumberOfNsrSyncedNeighbors", common.NumberOfNsrSyncedNeighbors})
    common.EntityData.Leafs.Append("number-of-graceful-restart-neighbors", types.YLeaf{"NumberOfGracefulRestartNeighbors", common.NumberOfGracefulRestartNeighbors})
    common.EntityData.Leafs.Append("number-of-downstream-on-demand-neighbors", types.YLeaf{"NumberOfDownstreamOnDemandNeighbors", common.NumberOfDownstreamOnDemandNeighbors})
    common.EntityData.Leafs.Append("number-of-ipv4-hello-adj", types.YLeaf{"NumberOfIpv4HelloAdj", common.NumberOfIpv4HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv6-hello-adj", types.YLeaf{"NumberOfIpv6HelloAdj", common.NumberOfIpv6HelloAdj})
    common.EntityData.Leafs.Append("number-of-ipv4-routes", types.YLeaf{"NumberOfIpv4Routes", common.NumberOfIpv4Routes})
    common.EntityData.Leafs.Append("number-of-ipv6-routes", types.YLeaf{"NumberOfIpv6Routes", common.NumberOfIpv6Routes})
    common.EntityData.Leafs.Append("number-of-ipv4-local-addresses", types.YLeaf{"NumberOfIpv4LocalAddresses", common.NumberOfIpv4LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ipv6-local-addresses", types.YLeaf{"NumberOfIpv6LocalAddresses", common.NumberOfIpv6LocalAddresses})
    common.EntityData.Leafs.Append("number-of-ldp-interfaces", types.YLeaf{"NumberOfLdpInterfaces", common.NumberOfLdpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv4ldp-interfaces", types.YLeaf{"NumberOfIpv4ldpInterfaces", common.NumberOfIpv4ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-ipv6ldp-interfaces", types.YLeaf{"NumberOfIpv6ldpInterfaces", common.NumberOfIpv6ldpInterfaces})
    common.EntityData.Leafs.Append("number-of-bindings-ipv4", types.YLeaf{"NumberOfBindingsIpv4", common.NumberOfBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-bindings-ipv6", types.YLeaf{"NumberOfBindingsIpv6", common.NumberOfBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv4", types.YLeaf{"NumberOfLocalBindingsIpv4", common.NumberOfLocalBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-local-bindings-ipv6", types.YLeaf{"NumberOfLocalBindingsIpv6", common.NumberOfLocalBindingsIpv6})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv4", types.YLeaf{"NumberOfRemoteBindingsIpv4", common.NumberOfRemoteBindingsIpv4})
    common.EntityData.Leafs.Append("number-of-remote-bindings-ipv6", types.YLeaf{"NumberOfRemoteBindingsIpv6", common.NumberOfRemoteBindingsIpv6})

    common.EntityData.YListKeys = []string {}

    return &(common.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs
// Address Family specific operational data
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational data for given Address Family. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af.
    Af []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af
}

func (afs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs) GetEntityData() *types.CommonEntityData {
    afs.EntityData.YFilter = afs.YFilter
    afs.EntityData.YangName = "afs"
    afs.EntityData.BundleName = "cisco_ios_xr"
    afs.EntityData.ParentYangName = "vrf"
    afs.EntityData.SegmentPath = "afs"
    afs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + afs.EntityData.SegmentPath
    afs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afs.EntityData.Children = types.NewOrderedMap()
    afs.EntityData.Children.Append("af", types.YChild{"Af", nil})
    for i := range afs.Af {
        afs.EntityData.Children.Append(types.GetSegmentPath(afs.Af[i]), types.YChild{"Af", afs.Af[i]})
    }
    afs.EntityData.Leafs = types.NewOrderedMap()

    afs.EntityData.YListKeys = []string {}

    return &(afs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af
// Operational data for given Address Family
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address Family name. The type is
    // MplsLdpOperAfName.
    AfName interface{}

    // IPv4 interface summary information.
    InterfaceSummary MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_InterfaceSummary

    // The LDP Bindings.
    Bindings MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings

    // LDP IGP related information.
    Igp MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp

    // Counters for the LDP Label Infomation Base (LIB).
    BindingsSummary MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary

    // LDP Interface related information.
    Interfaces MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces

    // The LDP Discovery.
    Discovery MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery

    // The LDP Forwarding rewrites.
    Forwardings MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings

    // Advertisement Spec (ACL) for LDP Label Infomation Base (LIB).
    BindingsAdvertiseSpec MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec

    // Summary information regarding LDP forwarding setup.
    ForwardingSummary MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary
}

func (af *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af) GetEntityData() *types.CommonEntityData {
    af.EntityData.YFilter = af.YFilter
    af.EntityData.YangName = "af"
    af.EntityData.BundleName = "cisco_ios_xr"
    af.EntityData.ParentYangName = "afs"
    af.EntityData.SegmentPath = "af" + types.AddKeyToken(af.AfName, "af-name")
    af.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/" + af.EntityData.SegmentPath
    af.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    af.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    af.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    af.EntityData.Children = types.NewOrderedMap()
    af.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", &af.InterfaceSummary})
    af.EntityData.Children.Append("bindings", types.YChild{"Bindings", &af.Bindings})
    af.EntityData.Children.Append("igp", types.YChild{"Igp", &af.Igp})
    af.EntityData.Children.Append("bindings-summary", types.YChild{"BindingsSummary", &af.BindingsSummary})
    af.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &af.Interfaces})
    af.EntityData.Children.Append("discovery", types.YChild{"Discovery", &af.Discovery})
    af.EntityData.Children.Append("forwardings", types.YChild{"Forwardings", &af.Forwardings})
    af.EntityData.Children.Append("bindings-advertise-spec", types.YChild{"BindingsAdvertiseSpec", &af.BindingsAdvertiseSpec})
    af.EntityData.Children.Append("forwarding-summary", types.YChild{"ForwardingSummary", &af.ForwardingSummary})
    af.EntityData.Leafs = types.NewOrderedMap()
    af.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", af.AfName})

    af.EntityData.YListKeys = []string {"AfName"}

    return &(af.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_InterfaceSummary
// IPv4 interface summary information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of known IP Interfaces. The type is interface{} with range:
    // 0..4294967295.
    KnownIpInterfaceCount interface{}

    // Number of known IP Interfaces with LDP Enabled. The type is interface{}
    // with range: 0..4294967295.
    KnownIpInterfaceLdpEnabled interface{}

    // Number of attached interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredAttachedInterface interface{}

    // Number of TE tunnel interfaces configured in LDP. The type is interface{}
    // with range: 0..4294967295.
    LdpConfiguredTeInterface interface{}

    // Number of forward referenced interfaces. The type is interface{} with
    // range: 0..4294967295.
    ForwardReferences interface{}

    // Autoconfigure disabled. The type is interface{} with range: 0..4294967295.
    AutoConfigDisabled interface{}

    // Auto-configured interfaces. The type is interface{} with range:
    // 0..4294967295.
    AutoConfig interface{}

    // Auto-configured forward references. The type is interface{} with range:
    // 0..4294967295.
    AutoConfigForwardReferenceInterfaces interface{}
}

func (interfaceSummary *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "af"
    interfaceSummary.EntityData.SegmentPath = "interface-summary"
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-count", types.YLeaf{"KnownIpInterfaceCount", interfaceSummary.KnownIpInterfaceCount})
    interfaceSummary.EntityData.Leafs.Append("known-ip-interface-ldp-enabled", types.YLeaf{"KnownIpInterfaceLdpEnabled", interfaceSummary.KnownIpInterfaceLdpEnabled})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-attached-interface", types.YLeaf{"LdpConfiguredAttachedInterface", interfaceSummary.LdpConfiguredAttachedInterface})
    interfaceSummary.EntityData.Leafs.Append("ldp-configured-te-interface", types.YLeaf{"LdpConfiguredTeInterface", interfaceSummary.LdpConfiguredTeInterface})
    interfaceSummary.EntityData.Leafs.Append("forward-references", types.YLeaf{"ForwardReferences", interfaceSummary.ForwardReferences})
    interfaceSummary.EntityData.Leafs.Append("auto-config-disabled", types.YLeaf{"AutoConfigDisabled", interfaceSummary.AutoConfigDisabled})
    interfaceSummary.EntityData.Leafs.Append("auto-config", types.YLeaf{"AutoConfig", interfaceSummary.AutoConfig})
    interfaceSummary.EntityData.Leafs.Append("auto-config-forward-reference-interfaces", types.YLeaf{"AutoConfigForwardReferenceInterfaces", interfaceSummary.AutoConfigForwardReferenceInterfaces})

    interfaceSummary.EntityData.YListKeys = []string {}

    return &(interfaceSummary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings
// The LDP Bindings
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Binding Information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding.
    Binding []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding
}

func (bindings *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings) GetEntityData() *types.CommonEntityData {
    bindings.EntityData.YFilter = bindings.YFilter
    bindings.EntityData.YangName = "bindings"
    bindings.EntityData.BundleName = "cisco_ios_xr"
    bindings.EntityData.ParentYangName = "af"
    bindings.EntityData.SegmentPath = "bindings"
    bindings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + bindings.EntityData.SegmentPath
    bindings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindings.EntityData.Children = types.NewOrderedMap()
    bindings.EntityData.Children.Append("binding", types.YChild{"Binding", nil})
    for i := range bindings.Binding {
        bindings.EntityData.Children.Append(types.GetSegmentPath(bindings.Binding[i]), types.YChild{"Binding", bindings.Binding[i]})
    }
    bindings.EntityData.Leafs = types.NewOrderedMap()

    bindings.EntityData.YListKeys = []string {}

    return &(bindings.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding
// Binding Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Local Binding revision. The type is interface{} with range: 0..4294967295.
    LeLocalBindingRevision interface{}

    // Local label state. The type is LocalLabelState.
    LeLocalLabelState interface{}

    // No route. The type is bool.
    IsNoRoute interface{}

    // Label space depletion OOR. The type is bool.
    LabelOor interface{}

    // Advertise Prerfix ACL. The type is string.
    AdvertisePrefixAcl interface{}

    // Advertise TSR ACL. The type is string.
    AdvertiseTsrAcl interface{}

    // Config/User enforced local label value. The type is bool.
    ConfigEnforcedLocalLabelValue interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr

    // Remote binding. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding.
    RemoteBinding []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding

    // Peers this entry is advertised to. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo.
    PeersAdvertisedTo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo

    // Peers that have ACKed this entry. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked.
    PeersAcked []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
}

func (binding *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding) GetEntityData() *types.CommonEntityData {
    binding.EntityData.YFilter = binding.YFilter
    binding.EntityData.YangName = "binding"
    binding.EntityData.BundleName = "cisco_ios_xr"
    binding.EntityData.ParentYangName = "bindings"
    binding.EntityData.SegmentPath = "binding" + types.AddKeyToken(binding.Prefix, "prefix")
    binding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/" + binding.EntityData.SegmentPath
    binding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    binding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    binding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    binding.EntityData.Children = types.NewOrderedMap()
    binding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &binding.Vrf})
    binding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &binding.PrefixXr})
    binding.EntityData.Children.Append("remote-binding", types.YChild{"RemoteBinding", nil})
    for i := range binding.RemoteBinding {
        types.SetYListKey(binding.RemoteBinding[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.RemoteBinding[i]), types.YChild{"RemoteBinding", binding.RemoteBinding[i]})
    }
    binding.EntityData.Children.Append("peers-advertised-to", types.YChild{"PeersAdvertisedTo", nil})
    for i := range binding.PeersAdvertisedTo {
        types.SetYListKey(binding.PeersAdvertisedTo[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAdvertisedTo[i]), types.YChild{"PeersAdvertisedTo", binding.PeersAdvertisedTo[i]})
    }
    binding.EntityData.Children.Append("peers-acked", types.YChild{"PeersAcked", nil})
    for i := range binding.PeersAcked {
        types.SetYListKey(binding.PeersAcked[i], i)
        binding.EntityData.Children.Append(types.GetSegmentPath(binding.PeersAcked[i]), types.YChild{"PeersAcked", binding.PeersAcked[i]})
    }
    binding.EntityData.Leafs = types.NewOrderedMap()
    binding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", binding.Prefix})
    binding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", binding.PrefixLength})
    binding.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", binding.LocalLabel})
    binding.EntityData.Leafs.Append("le-local-binding-revision", types.YLeaf{"LeLocalBindingRevision", binding.LeLocalBindingRevision})
    binding.EntityData.Leafs.Append("le-local-label-state", types.YLeaf{"LeLocalLabelState", binding.LeLocalLabelState})
    binding.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", binding.IsNoRoute})
    binding.EntityData.Leafs.Append("label-oor", types.YLeaf{"LabelOor", binding.LabelOor})
    binding.EntityData.Leafs.Append("advertise-prefix-acl", types.YLeaf{"AdvertisePrefixAcl", binding.AdvertisePrefixAcl})
    binding.EntityData.Leafs.Append("advertise-tsr-acl", types.YLeaf{"AdvertiseTsrAcl", binding.AdvertiseTsrAcl})
    binding.EntityData.Leafs.Append("config-enforced-local-label-value", types.YLeaf{"ConfigEnforcedLocalLabelValue", binding.ConfigEnforcedLocalLabelValue})
    binding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", binding.IsElc})

    binding.EntityData.YListKeys = []string {"Prefix"}

    return &(binding.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "binding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr
// IP Prefix
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "binding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding
// Remote binding
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Remote Label. The type is interface{} with range: 0..4294967295.
    RemoteLabel interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Is the entry entropy label capable. The type is bool.
    IsElc interface{}

    // Assigning peer.
    AssigningPeerLdpIdent MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
}

func (remoteBinding *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding) GetEntityData() *types.CommonEntityData {
    remoteBinding.EntityData.YFilter = remoteBinding.YFilter
    remoteBinding.EntityData.YangName = "remote-binding"
    remoteBinding.EntityData.BundleName = "cisco_ios_xr"
    remoteBinding.EntityData.ParentYangName = "binding"
    remoteBinding.EntityData.SegmentPath = "remote-binding" + types.AddNoKeyToken(remoteBinding)
    remoteBinding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/" + remoteBinding.EntityData.SegmentPath
    remoteBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteBinding.EntityData.Children = types.NewOrderedMap()
    remoteBinding.EntityData.Children.Append("assigning-peer-ldp-ident", types.YChild{"AssigningPeerLdpIdent", &remoteBinding.AssigningPeerLdpIdent})
    remoteBinding.EntityData.Leafs = types.NewOrderedMap()
    remoteBinding.EntityData.Leafs.Append("remote-label", types.YLeaf{"RemoteLabel", remoteBinding.RemoteLabel})
    remoteBinding.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", remoteBinding.IsStale})
    remoteBinding.EntityData.Leafs.Append("is-elc", types.YLeaf{"IsElc", remoteBinding.IsElc})

    remoteBinding.EntityData.YListKeys = []string {}

    return &(remoteBinding.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent
// Assigning peer
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (assigningPeerLdpIdent *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_RemoteBinding_AssigningPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    assigningPeerLdpIdent.EntityData.YFilter = assigningPeerLdpIdent.YFilter
    assigningPeerLdpIdent.EntityData.YangName = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    assigningPeerLdpIdent.EntityData.ParentYangName = "remote-binding"
    assigningPeerLdpIdent.EntityData.SegmentPath = "assigning-peer-ldp-ident"
    assigningPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/remote-binding/" + assigningPeerLdpIdent.EntityData.SegmentPath
    assigningPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    assigningPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    assigningPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    assigningPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    assigningPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", assigningPeerLdpIdent.LsrId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", assigningPeerLdpIdent.LabelSpaceId})
    assigningPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", assigningPeerLdpIdent.LdpId})

    assigningPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(assigningPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo
// Peers this entry is advertised to
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAdvertisedTo *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAdvertisedTo) GetEntityData() *types.CommonEntityData {
    peersAdvertisedTo.EntityData.YFilter = peersAdvertisedTo.YFilter
    peersAdvertisedTo.EntityData.YangName = "peers-advertised-to"
    peersAdvertisedTo.EntityData.BundleName = "cisco_ios_xr"
    peersAdvertisedTo.EntityData.ParentYangName = "binding"
    peersAdvertisedTo.EntityData.SegmentPath = "peers-advertised-to" + types.AddNoKeyToken(peersAdvertisedTo)
    peersAdvertisedTo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/" + peersAdvertisedTo.EntityData.SegmentPath
    peersAdvertisedTo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAdvertisedTo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAdvertisedTo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAdvertisedTo.EntityData.Children = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs = types.NewOrderedMap()
    peersAdvertisedTo.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAdvertisedTo.LsrId})
    peersAdvertisedTo.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAdvertisedTo.LabelSpaceId})
    peersAdvertisedTo.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAdvertisedTo.LdpId})

    peersAdvertisedTo.EntityData.YListKeys = []string {}

    return &(peersAdvertisedTo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked
// Peers that have ACKed this entry
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (peersAcked *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Bindings_Binding_PeersAcked) GetEntityData() *types.CommonEntityData {
    peersAcked.EntityData.YFilter = peersAcked.YFilter
    peersAcked.EntityData.YangName = "peers-acked"
    peersAcked.EntityData.BundleName = "cisco_ios_xr"
    peersAcked.EntityData.ParentYangName = "binding"
    peersAcked.EntityData.SegmentPath = "peers-acked" + types.AddNoKeyToken(peersAcked)
    peersAcked.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings/binding/" + peersAcked.EntityData.SegmentPath
    peersAcked.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peersAcked.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peersAcked.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peersAcked.EntityData.Children = types.NewOrderedMap()
    peersAcked.EntityData.Leafs = types.NewOrderedMap()
    peersAcked.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", peersAcked.LsrId})
    peersAcked.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", peersAcked.LabelSpaceId})
    peersAcked.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", peersAcked.LdpId})

    peersAcked.EntityData.YListKeys = []string {}

    return &(peersAcked.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp
// LDP IGP related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP IGP Sync related information.
    Syncs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs

    // LDP-IGP Synchronization Delay related information.
    SyncDelayRestart MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
}

func (igp *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp) GetEntityData() *types.CommonEntityData {
    igp.EntityData.YFilter = igp.YFilter
    igp.EntityData.YangName = "igp"
    igp.EntityData.BundleName = "cisco_ios_xr"
    igp.EntityData.ParentYangName = "af"
    igp.EntityData.SegmentPath = "igp"
    igp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + igp.EntityData.SegmentPath
    igp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    igp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    igp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    igp.EntityData.Children = types.NewOrderedMap()
    igp.EntityData.Children.Append("syncs", types.YChild{"Syncs", &igp.Syncs})
    igp.EntityData.Children.Append("sync-delay-restart", types.YChild{"SyncDelayRestart", &igp.SyncDelayRestart})
    igp.EntityData.Leafs = types.NewOrderedMap()

    igp.EntityData.YListKeys = []string {}

    return &(igp.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs
// LDP IGP Sync related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP-IGP Synchronization related information for an interface. The type is
    // slice of MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync.
    Sync []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
}

func (syncs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs) GetEntityData() *types.CommonEntityData {
    syncs.EntityData.YFilter = syncs.YFilter
    syncs.EntityData.YangName = "syncs"
    syncs.EntityData.BundleName = "cisco_ios_xr"
    syncs.EntityData.ParentYangName = "igp"
    syncs.EntityData.SegmentPath = "syncs"
    syncs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/" + syncs.EntityData.SegmentPath
    syncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncs.EntityData.Children = types.NewOrderedMap()
    syncs.EntityData.Children.Append("sync", types.YChild{"Sync", nil})
    for i := range syncs.Sync {
        syncs.EntityData.Children.Append(types.GetSegmentPath(syncs.Sync[i]), types.YChild{"Sync", syncs.Sync[i]})
    }
    syncs.EntityData.Leafs = types.NewOrderedMap()

    syncs.EntityData.YListKeys = []string {}

    return &(syncs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync
// LDP-IGP Synchronization related information
// for an interface
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // IGP Sync state. The type is LdpIgpSyncState.
    IgpSyncState interface{}

    // IGP sync delay in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IgpSyncDelay interface{}

    // Is sync delay timer running. The type is bool.
    IsDelayTimerRunning interface{}

    // Remaining timer (seconds) till expiry of sync delay timer. The type is
    // interface{} with range: 0..4294967295. Units are second.
    DelayTimerRemaining interface{}

    // Reason IGP Sync Not Achieved. The type is LdpIgpSyncDownReason.
    IgpSyncDownReason interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf

    // Interface Peers. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers.
    Peers []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers

    // Interface GR-only reachable peers. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer.
    GrOnlyPeer []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
}

func (sync *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync) GetEntityData() *types.CommonEntityData {
    sync.EntityData.YFilter = sync.YFilter
    sync.EntityData.YangName = "sync"
    sync.EntityData.BundleName = "cisco_ios_xr"
    sync.EntityData.ParentYangName = "syncs"
    sync.EntityData.SegmentPath = "sync" + types.AddKeyToken(sync.InterfaceName, "interface-name")
    sync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/syncs/" + sync.EntityData.SegmentPath
    sync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sync.EntityData.Children = types.NewOrderedMap()
    sync.EntityData.Children.Append("vrf", types.YChild{"Vrf", &sync.Vrf})
    sync.EntityData.Children.Append("peers", types.YChild{"Peers", nil})
    for i := range sync.Peers {
        types.SetYListKey(sync.Peers[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.Peers[i]), types.YChild{"Peers", sync.Peers[i]})
    }
    sync.EntityData.Children.Append("gr-only-peer", types.YChild{"GrOnlyPeer", nil})
    for i := range sync.GrOnlyPeer {
        types.SetYListKey(sync.GrOnlyPeer[i], i)
        sync.EntityData.Children.Append(types.GetSegmentPath(sync.GrOnlyPeer[i]), types.YChild{"GrOnlyPeer", sync.GrOnlyPeer[i]})
    }
    sync.EntityData.Leafs = types.NewOrderedMap()
    sync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", sync.InterfaceName})
    sync.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", sync.InterfaceNameXr})
    sync.EntityData.Leafs.Append("igp-sync-state", types.YLeaf{"IgpSyncState", sync.IgpSyncState})
    sync.EntityData.Leafs.Append("igp-sync-delay", types.YLeaf{"IgpSyncDelay", sync.IgpSyncDelay})
    sync.EntityData.Leafs.Append("is-delay-timer-running", types.YLeaf{"IsDelayTimerRunning", sync.IsDelayTimerRunning})
    sync.EntityData.Leafs.Append("delay-timer-remaining", types.YLeaf{"DelayTimerRemaining", sync.DelayTimerRemaining})
    sync.EntityData.Leafs.Append("igp-sync-down-reason", types.YLeaf{"IgpSyncDownReason", sync.IgpSyncDownReason})

    sync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(sync.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "sync"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/syncs/sync/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers
// Interface Peers
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is GR enabled session. The type is bool.
    IsGrEnabled interface{}
}

func (peers *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "sync"
    peers.EntityData.SegmentPath = "peers" + types.AddNoKeyToken(peers)
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/syncs/sync/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Leafs = types.NewOrderedMap()
    peers.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", peers.PeerId})
    peers.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", peers.IsGrEnabled})

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer
// Interface GR-only reachable peers
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Peer Identifier. The type is string.
    PeerId interface{}

    // Is created due to checkpointing. The type is bool.
    IsChkptCreated interface{}
}

func (grOnlyPeer *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_Syncs_Sync_GrOnlyPeer) GetEntityData() *types.CommonEntityData {
    grOnlyPeer.EntityData.YFilter = grOnlyPeer.YFilter
    grOnlyPeer.EntityData.YangName = "gr-only-peer"
    grOnlyPeer.EntityData.BundleName = "cisco_ios_xr"
    grOnlyPeer.EntityData.ParentYangName = "sync"
    grOnlyPeer.EntityData.SegmentPath = "gr-only-peer" + types.AddNoKeyToken(grOnlyPeer)
    grOnlyPeer.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/syncs/sync/" + grOnlyPeer.EntityData.SegmentPath
    grOnlyPeer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    grOnlyPeer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    grOnlyPeer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    grOnlyPeer.EntityData.Children = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs = types.NewOrderedMap()
    grOnlyPeer.EntityData.Leafs.Append("peer-id", types.YLeaf{"PeerId", grOnlyPeer.PeerId})
    grOnlyPeer.EntityData.Leafs.Append("is-chkpt-created", types.YLeaf{"IsChkptCreated", grOnlyPeer.IsChkptCreated})

    grOnlyPeer.EntityData.YListKeys = []string {}

    return &(grOnlyPeer.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart
// LDP-IGP Synchronization Delay related
// information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is restart delay configured. The type is bool.
    Configured interface{}

    // Delay time. The type is interface{} with range: 0..4294967295.
    DelaySecs interface{}

    // Is restart delay timer running. The type is bool.
    TimerRunning interface{}

    // Delay timer remaining time. The type is interface{} with range:
    // 0..4294967295.
    RemainingSecs interface{}
}

func (syncDelayRestart *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Igp_SyncDelayRestart) GetEntityData() *types.CommonEntityData {
    syncDelayRestart.EntityData.YFilter = syncDelayRestart.YFilter
    syncDelayRestart.EntityData.YangName = "sync-delay-restart"
    syncDelayRestart.EntityData.BundleName = "cisco_ios_xr"
    syncDelayRestart.EntityData.ParentYangName = "igp"
    syncDelayRestart.EntityData.SegmentPath = "sync-delay-restart"
    syncDelayRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/igp/" + syncDelayRestart.EntityData.SegmentPath
    syncDelayRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    syncDelayRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    syncDelayRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    syncDelayRestart.EntityData.Children = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs = types.NewOrderedMap()
    syncDelayRestart.EntityData.Leafs.Append("configured", types.YLeaf{"Configured", syncDelayRestart.Configured})
    syncDelayRestart.EntityData.Leafs.Append("delay-secs", types.YLeaf{"DelaySecs", syncDelayRestart.DelaySecs})
    syncDelayRestart.EntityData.Leafs.Append("timer-running", types.YLeaf{"TimerRunning", syncDelayRestart.TimerRunning})
    syncDelayRestart.EntityData.Leafs.Append("remaining-secs", types.YLeaf{"RemainingSecs", syncDelayRestart.RemainingSecs})

    syncDelayRestart.EntityData.YListKeys = []string {}

    return &(syncDelayRestart.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary
// Counters for the LDP Label Infomation Base
// (LIB)
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Bindings with no route. The type is interface{} with range: 0..4294967295.
    BindingNoRoute interface{}

    // Local bindings with no route. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNoRoute interface{}

    // Number of local null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNull interface{}

    // Number of local implicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalImplicitNull interface{}

    // Number of local explicit null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalExplicitNull interface{}

    // Number of local non-null bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocalNonNull interface{}

    // Number of local bindings        needing label - OOR. The type is
    // interface{} with range: 0..4294967295.
    BindingLocalOor interface{}

    // Lowest allocated label. The type is interface{} with range: 0..4294967295.
    LowestAllocatedLabel interface{}

    // Highest allocated label. The type is interface{} with range: 0..4294967295.
    HighestAllocatedLabel interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf

    // bind af. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf.
    BindAf []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
}

func (bindingsSummary *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary) GetEntityData() *types.CommonEntityData {
    bindingsSummary.EntityData.YFilter = bindingsSummary.YFilter
    bindingsSummary.EntityData.YangName = "bindings-summary"
    bindingsSummary.EntityData.BundleName = "cisco_ios_xr"
    bindingsSummary.EntityData.ParentYangName = "af"
    bindingsSummary.EntityData.SegmentPath = "bindings-summary"
    bindingsSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + bindingsSummary.EntityData.SegmentPath
    bindingsSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsSummary.EntityData.Children = types.NewOrderedMap()
    bindingsSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &bindingsSummary.Vrf})
    bindingsSummary.EntityData.Children.Append("bind-af", types.YChild{"BindAf", nil})
    for i := range bindingsSummary.BindAf {
        types.SetYListKey(bindingsSummary.BindAf[i], i)
        bindingsSummary.EntityData.Children.Append(types.GetSegmentPath(bindingsSummary.BindAf[i]), types.YChild{"BindAf", bindingsSummary.BindAf[i]})
    }
    bindingsSummary.EntityData.Leafs = types.NewOrderedMap()
    bindingsSummary.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindingsSummary.AddressFamily})
    bindingsSummary.EntityData.Leafs.Append("binding-no-route", types.YLeaf{"BindingNoRoute", bindingsSummary.BindingNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-no-route", types.YLeaf{"BindingLocalNoRoute", bindingsSummary.BindingLocalNoRoute})
    bindingsSummary.EntityData.Leafs.Append("binding-local-null", types.YLeaf{"BindingLocalNull", bindingsSummary.BindingLocalNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-implicit-null", types.YLeaf{"BindingLocalImplicitNull", bindingsSummary.BindingLocalImplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-explicit-null", types.YLeaf{"BindingLocalExplicitNull", bindingsSummary.BindingLocalExplicitNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-non-null", types.YLeaf{"BindingLocalNonNull", bindingsSummary.BindingLocalNonNull})
    bindingsSummary.EntityData.Leafs.Append("binding-local-oor", types.YLeaf{"BindingLocalOor", bindingsSummary.BindingLocalOor})
    bindingsSummary.EntityData.Leafs.Append("lowest-allocated-label", types.YLeaf{"LowestAllocatedLabel", bindingsSummary.LowestAllocatedLabel})
    bindingsSummary.EntityData.Leafs.Append("highest-allocated-label", types.YLeaf{"HighestAllocatedLabel", bindingsSummary.HighestAllocatedLabel})

    bindingsSummary.EntityData.YListKeys = []string {}

    return &(bindingsSummary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "bindings-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf
// bind af
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Binding Summary Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Last update to LIB local binding. The type is interface{} with range:
    // 0..4294967295.
    LastLibUpdate interface{}

    // Last update sent to all peers. The type is interface{} with range:
    // 0..4294967295.
    LibMinimumRevisionSentAll interface{}

    // Total bindings. The type is interface{} with range: 0..4294967295.
    BindingTotal interface{}

    // Number of local bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingLocal interface{}

    // Number of remote bindings. The type is interface{} with range:
    // 0..4294967295.
    BindingRemote interface{}
}

func (bindAf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsSummary_BindAf) GetEntityData() *types.CommonEntityData {
    bindAf.EntityData.YFilter = bindAf.YFilter
    bindAf.EntityData.YangName = "bind-af"
    bindAf.EntityData.BundleName = "cisco_ios_xr"
    bindAf.EntityData.ParentYangName = "bindings-summary"
    bindAf.EntityData.SegmentPath = "bind-af" + types.AddNoKeyToken(bindAf)
    bindAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings-summary/" + bindAf.EntityData.SegmentPath
    bindAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindAf.EntityData.Children = types.NewOrderedMap()
    bindAf.EntityData.Leafs = types.NewOrderedMap()
    bindAf.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", bindAf.AddressFamily})
    bindAf.EntityData.Leafs.Append("last-lib-update", types.YLeaf{"LastLibUpdate", bindAf.LastLibUpdate})
    bindAf.EntityData.Leafs.Append("lib-minimum-revision-sent-all", types.YLeaf{"LibMinimumRevisionSentAll", bindAf.LibMinimumRevisionSentAll})
    bindAf.EntityData.Leafs.Append("binding-total", types.YLeaf{"BindingTotal", bindAf.BindingTotal})
    bindAf.EntityData.Leafs.Append("binding-local", types.YLeaf{"BindingLocal", bindAf.BindingLocal})
    bindAf.EntityData.Leafs.Append("binding-remote", types.YLeaf{"BindingRemote", bindAf.BindingRemote})

    bindAf.EntityData.YListKeys = []string {}

    return &(bindAf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces
// LDP Interface related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 interface information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface.
    Interface []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface
}

func (interfaces *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "af"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface
// IPv4 interface information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // LDP enabled. The type is bool.
    LdpEnabled interface{}

    // Is IM information stale. The type is bool.
    IsImStale interface{}

    // LDP config mode. The type is bool.
    LdpConfigMode interface{}

    // LDP autoconfig disable. The type is bool.
    LdpAutoconfigDisable interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf

    // TE tunnel mesh-group. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp.
    TeMeshGrp []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp

    // Auto config. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig.
    AutoConfig []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
}

func (self *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("vrf", types.YChild{"Vrf", &self.Vrf})
    self.EntityData.Children.Append("te-mesh-grp", types.YChild{"TeMeshGrp", nil})
    for i := range self.TeMeshGrp {
        types.SetYListKey(self.TeMeshGrp[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.TeMeshGrp[i]), types.YChild{"TeMeshGrp", self.TeMeshGrp[i]})
    }
    self.EntityData.Children.Append("auto-config", types.YChild{"AutoConfig", nil})
    for i := range self.AutoConfig {
        types.SetYListKey(self.AutoConfig[i], i)
        self.EntityData.Children.Append(types.GetSegmentPath(self.AutoConfig[i]), types.YChild{"AutoConfig", self.AutoConfig[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", self.InterfaceNameXr})
    self.EntityData.Leafs.Append("ldp-enabled", types.YLeaf{"LdpEnabled", self.LdpEnabled})
    self.EntityData.Leafs.Append("is-im-stale", types.YLeaf{"IsImStale", self.IsImStale})
    self.EntityData.Leafs.Append("ldp-config-mode", types.YLeaf{"LdpConfigMode", self.LdpConfigMode})
    self.EntityData.Leafs.Append("ldp-autoconfig-disable", types.YLeaf{"LdpAutoconfigDisable", self.LdpAutoconfigDisable})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "interface"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/interfaces/interface/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp
// TE tunnel mesh-group
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LDP has enabled all TE mesh-groups. The type is bool.
    LdpTeMeshGroupAllCfgd interface{}

    // LDP has enabled this TE mesh-group. The type is bool.
    LdpMeshGroupEnabled interface{}

    // TE tunnel Mesh Group ID. The type is interface{} with range: 0..4294967295.
    TeMeshGroupId interface{}
}

func (teMeshGrp *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_TeMeshGrp) GetEntityData() *types.CommonEntityData {
    teMeshGrp.EntityData.YFilter = teMeshGrp.YFilter
    teMeshGrp.EntityData.YangName = "te-mesh-grp"
    teMeshGrp.EntityData.BundleName = "cisco_ios_xr"
    teMeshGrp.EntityData.ParentYangName = "interface"
    teMeshGrp.EntityData.SegmentPath = "te-mesh-grp" + types.AddNoKeyToken(teMeshGrp)
    teMeshGrp.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/interfaces/interface/" + teMeshGrp.EntityData.SegmentPath
    teMeshGrp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teMeshGrp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teMeshGrp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teMeshGrp.EntityData.Children = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs = types.NewOrderedMap()
    teMeshGrp.EntityData.Leafs.Append("ldp-te-mesh-group-all-cfgd", types.YLeaf{"LdpTeMeshGroupAllCfgd", teMeshGrp.LdpTeMeshGroupAllCfgd})
    teMeshGrp.EntityData.Leafs.Append("ldp-mesh-group-enabled", types.YLeaf{"LdpMeshGroupEnabled", teMeshGrp.LdpMeshGroupEnabled})
    teMeshGrp.EntityData.Leafs.Append("te-mesh-group-id", types.YLeaf{"TeMeshGroupId", teMeshGrp.TeMeshGroupId})

    teMeshGrp.EntityData.YListKeys = []string {}

    return &(teMeshGrp.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig
// Auto config
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Tuple. The type is string.
    Tuple interface{}
}

func (autoConfig *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Interfaces_Interface_AutoConfig) GetEntityData() *types.CommonEntityData {
    autoConfig.EntityData.YFilter = autoConfig.YFilter
    autoConfig.EntityData.YangName = "auto-config"
    autoConfig.EntityData.BundleName = "cisco_ios_xr"
    autoConfig.EntityData.ParentYangName = "interface"
    autoConfig.EntityData.SegmentPath = "auto-config" + types.AddNoKeyToken(autoConfig)
    autoConfig.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/interfaces/interface/" + autoConfig.EntityData.SegmentPath
    autoConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    autoConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    autoConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    autoConfig.EntityData.Children = types.NewOrderedMap()
    autoConfig.EntityData.Leafs = types.NewOrderedMap()
    autoConfig.EntityData.Leafs.Append("tuple", types.YLeaf{"Tuple", autoConfig.Tuple})

    autoConfig.EntityData.YListKeys = []string {}

    return &(autoConfig.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery
// The LDP Discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link.
    LinkHellos MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos

    // Summarized information on LDP discovery.
    Summary MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary

    // The LDP Discovery Targeted.
    TargetedHellos MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos

    // Brief information on LDP discovery.
    Brief MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief

    // The LDP Discovery Statistics.
    Stats MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats
}

func (discovery *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery) GetEntityData() *types.CommonEntityData {
    discovery.EntityData.YFilter = discovery.YFilter
    discovery.EntityData.YangName = "discovery"
    discovery.EntityData.BundleName = "cisco_ios_xr"
    discovery.EntityData.ParentYangName = "af"
    discovery.EntityData.SegmentPath = "discovery"
    discovery.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + discovery.EntityData.SegmentPath
    discovery.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discovery.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discovery.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discovery.EntityData.Children = types.NewOrderedMap()
    discovery.EntityData.Children.Append("link-hellos", types.YChild{"LinkHellos", &discovery.LinkHellos})
    discovery.EntityData.Children.Append("summary", types.YChild{"Summary", &discovery.Summary})
    discovery.EntityData.Children.Append("targeted-hellos", types.YChild{"TargetedHellos", &discovery.TargetedHellos})
    discovery.EntityData.Children.Append("brief", types.YChild{"Brief", &discovery.Brief})
    discovery.EntityData.Children.Append("stats", types.YChild{"Stats", &discovery.Stats})
    discovery.EntityData.Leafs = types.NewOrderedMap()

    discovery.EntityData.YListKeys = []string {}

    return &(discovery.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos
// The LDP Discovery link
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP link discovery. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello.
    LinkHello []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
}

func (linkHellos *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos) GetEntityData() *types.CommonEntityData {
    linkHellos.EntityData.YFilter = linkHellos.YFilter
    linkHellos.EntityData.YangName = "link-hellos"
    linkHellos.EntityData.BundleName = "cisco_ios_xr"
    linkHellos.EntityData.ParentYangName = "discovery"
    linkHellos.EntityData.SegmentPath = "link-hellos"
    linkHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/" + linkHellos.EntityData.SegmentPath
    linkHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHellos.EntityData.Children = types.NewOrderedMap()
    linkHellos.EntityData.Children.Append("link-hello", types.YChild{"LinkHello", nil})
    for i := range linkHellos.LinkHello {
        linkHellos.EntityData.Children.Append(types.GetSegmentPath(linkHellos.LinkHello[i]), types.YChild{"LinkHello", linkHellos.LinkHello[i]})
    }
    linkHellos.EntityData.Leafs = types.NewOrderedMap()

    linkHellos.EntityData.YListKeys = []string {}

    return &(linkHellos.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello
// Information on LDP link discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation

    // LDP hello AF info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf.
    DiscoveryLinkAf []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
}

func (linkHello *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello) GetEntityData() *types.CommonEntityData {
    linkHello.EntityData.YFilter = linkHello.YFilter
    linkHello.EntityData.YangName = "link-hello"
    linkHello.EntityData.BundleName = "cisco_ios_xr"
    linkHello.EntityData.ParentYangName = "link-hellos"
    linkHello.EntityData.SegmentPath = "link-hello" + types.AddKeyToken(linkHello.InterfaceName, "interface-name")
    linkHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/" + linkHello.EntityData.SegmentPath
    linkHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHello.EntityData.Children = types.NewOrderedMap()
    linkHello.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHello.Vrf})
    linkHello.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHello.HelloInformation {
        types.SetYListKey(linkHello.HelloInformation[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.HelloInformation[i]), types.YChild{"HelloInformation", linkHello.HelloInformation[i]})
    }
    linkHello.EntityData.Children.Append("discovery-link-af", types.YChild{"DiscoveryLinkAf", nil})
    for i := range linkHello.DiscoveryLinkAf {
        types.SetYListKey(linkHello.DiscoveryLinkAf[i], i)
        linkHello.EntityData.Children.Append(types.GetSegmentPath(linkHello.DiscoveryLinkAf[i]), types.YChild{"DiscoveryLinkAf", linkHello.DiscoveryLinkAf[i]})
    }
    linkHello.EntityData.Leafs = types.NewOrderedMap()
    linkHello.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHello.InterfaceName})
    linkHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", linkHello.NextHello})
    linkHello.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHello.Interface})
    linkHello.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHello.InterfaceNameXr})
    linkHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", linkHello.QuickStartDisabled})

    linkHello.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHello.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Is route valid. The type is bool.
    IsNoRoute interface{}

    // Session hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    HoldTime interface{}

    // Local hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LocalHoldTime interface{}

    // Neighbor hold time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    NeighborHoldTime interface{}

    // Discovery expiry time in sec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Is session a targeted session. The type is bool.
    IsTargeted interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // Neighbor source address.
    NeighborSrcAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress

    // Neighbor transport address.
    NeighborTransportAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress

    // Target address.
    Target MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target

    // Last session down information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
}

func (helloInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Children.Append("neighbor-src-address", types.YChild{"NeighborSrcAddress", &helloInformation.NeighborSrcAddress})
    helloInformation.EntityData.Children.Append("neighbor-transport-address", types.YChild{"NeighborTransportAddress", &helloInformation.NeighborTransportAddress})
    helloInformation.EntityData.Children.Append("target", types.YChild{"Target", &helloInformation.Target})
    helloInformation.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range helloInformation.LastSessionDownInfo {
        types.SetYListKey(helloInformation.LastSessionDownInfo[i], i)
        helloInformation.EntityData.Children.Append(types.GetSegmentPath(helloInformation.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", helloInformation.LastSessionDownInfo[i]})
    }
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("is-no-route", types.YLeaf{"IsNoRoute", helloInformation.IsNoRoute})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", helloInformation.LocalHoldTime})
    helloInformation.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", helloInformation.NeighborHoldTime})
    helloInformation.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", helloInformation.DiscExpiry})
    helloInformation.EntityData.Leafs.Append("is-targeted", types.YLeaf{"IsTargeted", helloInformation.IsTargeted})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})
    helloInformation.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", helloInformation.EstablishedTime})
    helloInformation.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", helloInformation.EstablishedAge})
    helloInformation.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", helloInformation.SessionBringupFailureReason})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress
// Neighbor source address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborSrcAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborSrcAddress) GetEntityData() *types.CommonEntityData {
    neighborSrcAddress.EntityData.YFilter = neighborSrcAddress.YFilter
    neighborSrcAddress.EntityData.YangName = "neighbor-src-address"
    neighborSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborSrcAddress.EntityData.ParentYangName = "hello-information"
    neighborSrcAddress.EntityData.SegmentPath = "neighbor-src-address"
    neighborSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborSrcAddress.EntityData.SegmentPath
    neighborSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborSrcAddress.EntityData.Children = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborSrcAddress.Afi})
    neighborSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborSrcAddress.Dummy})
    neighborSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborSrcAddress.Ipv4})
    neighborSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborSrcAddress.Ipv6})

    neighborSrcAddress.EntityData.YListKeys = []string {}

    return &(neighborSrcAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress
// Neighbor transport address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (neighborTransportAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_NeighborTransportAddress) GetEntityData() *types.CommonEntityData {
    neighborTransportAddress.EntityData.YFilter = neighborTransportAddress.YFilter
    neighborTransportAddress.EntityData.YangName = "neighbor-transport-address"
    neighborTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    neighborTransportAddress.EntityData.ParentYangName = "hello-information"
    neighborTransportAddress.EntityData.SegmentPath = "neighbor-transport-address"
    neighborTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + neighborTransportAddress.EntityData.SegmentPath
    neighborTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborTransportAddress.EntityData.Children = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    neighborTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", neighborTransportAddress.Afi})
    neighborTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", neighborTransportAddress.Dummy})
    neighborTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", neighborTransportAddress.Ipv4})
    neighborTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", neighborTransportAddress.Ipv6})

    neighborTransportAddress.EntityData.YListKeys = []string {}

    return &(neighborTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target
// Target address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (target *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_Target) GetEntityData() *types.CommonEntityData {
    target.EntityData.YFilter = target.YFilter
    target.EntityData.YangName = "target"
    target.EntityData.BundleName = "cisco_ios_xr"
    target.EntityData.ParentYangName = "hello-information"
    target.EntityData.SegmentPath = "target"
    target.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + target.EntityData.SegmentPath
    target.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    target.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    target.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    target.EntityData.Children = types.NewOrderedMap()
    target.EntityData.Leafs = types.NewOrderedMap()
    target.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", target.Afi})
    target.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", target.Dummy})
    target.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", target.Ipv4})
    target.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", target.Ipv6})

    target.EntityData.YListKeys = []string {}

    return &(target.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo
// Last session down information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_HelloInformation_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "hello-information"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/hello-information/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf
// LDP hello AF info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Local source address.
    LocalSrcAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress

    // Local transport address.
    LocalTransportAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
}

func (discoveryLinkAf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf) GetEntityData() *types.CommonEntityData {
    discoveryLinkAf.EntityData.YFilter = discoveryLinkAf.YFilter
    discoveryLinkAf.EntityData.YangName = "discovery-link-af"
    discoveryLinkAf.EntityData.BundleName = "cisco_ios_xr"
    discoveryLinkAf.EntityData.ParentYangName = "link-hello"
    discoveryLinkAf.EntityData.SegmentPath = "discovery-link-af" + types.AddNoKeyToken(discoveryLinkAf)
    discoveryLinkAf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/" + discoveryLinkAf.EntityData.SegmentPath
    discoveryLinkAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryLinkAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryLinkAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryLinkAf.EntityData.Children = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Children.Append("local-src-address", types.YChild{"LocalSrcAddress", &discoveryLinkAf.LocalSrcAddress})
    discoveryLinkAf.EntityData.Children.Append("local-transport-address", types.YChild{"LocalTransportAddress", &discoveryLinkAf.LocalTransportAddress})
    discoveryLinkAf.EntityData.Leafs = types.NewOrderedMap()
    discoveryLinkAf.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", discoveryLinkAf.Interval})

    discoveryLinkAf.EntityData.YListKeys = []string {}

    return &(discoveryLinkAf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress
// Local source address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localSrcAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalSrcAddress) GetEntityData() *types.CommonEntityData {
    localSrcAddress.EntityData.YFilter = localSrcAddress.YFilter
    localSrcAddress.EntityData.YangName = "local-src-address"
    localSrcAddress.EntityData.BundleName = "cisco_ios_xr"
    localSrcAddress.EntityData.ParentYangName = "discovery-link-af"
    localSrcAddress.EntityData.SegmentPath = "local-src-address"
    localSrcAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localSrcAddress.EntityData.SegmentPath
    localSrcAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localSrcAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localSrcAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localSrcAddress.EntityData.Children = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs = types.NewOrderedMap()
    localSrcAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localSrcAddress.Afi})
    localSrcAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localSrcAddress.Dummy})
    localSrcAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localSrcAddress.Ipv4})
    localSrcAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localSrcAddress.Ipv6})

    localSrcAddress.EntityData.YListKeys = []string {}

    return &(localSrcAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress
// Local transport address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localTransportAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_LinkHellos_LinkHello_DiscoveryLinkAf_LocalTransportAddress) GetEntityData() *types.CommonEntityData {
    localTransportAddress.EntityData.YFilter = localTransportAddress.YFilter
    localTransportAddress.EntityData.YangName = "local-transport-address"
    localTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    localTransportAddress.EntityData.ParentYangName = "discovery-link-af"
    localTransportAddress.EntityData.SegmentPath = "local-transport-address"
    localTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/link-hellos/link-hello/discovery-link-af/" + localTransportAddress.EntityData.SegmentPath
    localTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localTransportAddress.EntityData.Children = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    localTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localTransportAddress.Afi})
    localTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localTransportAddress.Dummy})
    localTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localTransportAddress.Ipv4})
    localTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localTransportAddress.Ipv6})

    localTransportAddress.EntityData.YListKeys = []string {}

    return &(localTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary
// Summarized information on LDP discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
}

func (summary *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "discovery"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &summary.Vrf})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", summary.LocalLdpId})
    summary.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", summary.NumOfLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", summary.NumOfActiveLdpInterfaces})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", summary.NumOfLnkDiscXmit})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", summary.NumOfTgtDiscXmit})
    summary.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", summary.NumOfLnkDiscRecv})
    summary.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", summary.NumOfTgtDiscRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", summary.NumOfDiscWithBadAddrRecv})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", summary.NumOfDiscWithBadHelloPdu})
    summary.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", summary.NumOfDiscWithBadXportAddr})
    summary.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", summary.NumOfDiscWithSameRouterId})
    summary.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", summary.NumOfDiscWithWrongRouterId})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Summary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos
// The LDP Discovery Targeted
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP targeted discovery. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello.
    TargetedHello []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
}

func (targetedHellos *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos) GetEntityData() *types.CommonEntityData {
    targetedHellos.EntityData.YFilter = targetedHellos.YFilter
    targetedHellos.EntityData.YangName = "targeted-hellos"
    targetedHellos.EntityData.BundleName = "cisco_ios_xr"
    targetedHellos.EntityData.ParentYangName = "discovery"
    targetedHellos.EntityData.SegmentPath = "targeted-hellos"
    targetedHellos.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/" + targetedHellos.EntityData.SegmentPath
    targetedHellos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHellos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHellos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHellos.EntityData.Children = types.NewOrderedMap()
    targetedHellos.EntityData.Children.Append("targeted-hello", types.YChild{"TargetedHello", nil})
    for i := range targetedHellos.TargetedHello {
        types.SetYListKey(targetedHellos.TargetedHello[i], i)
        targetedHellos.EntityData.Children.Append(types.GetSegmentPath(targetedHellos.TargetedHello[i]), types.YChild{"TargetedHello", targetedHellos.TargetedHello[i]})
    }
    targetedHellos.EntityData.Leafs = types.NewOrderedMap()

    targetedHellos.EntityData.YListKeys = []string {}

    return &(targetedHellos.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello
// Information on LDP targeted discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted hello state. The type is DhcbState.
    State interface{}

    // Adjacency LDP Identifier. The type is string.
    AdjacencyLdpIdentifier interface{}

    // Hello interval in sec. The type is interface{} with range: 0..4294967295.
    Interval interface{}

    // Next hello due time in msec. The type is interface{} with range:
    // 0..4294967295.
    NextHello interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Local hold time. The type is interface{} with range: 0..4294967295.
    LocalHoldTime interface{}

    // Neighbor hold time. The type is interface{} with range: 0..4294967295.
    NeighborHoldTime interface{}

    // Discovery expiry time in msec. The type is interface{} with range:
    // 0..4294967295.
    DiscExpiry interface{}

    // Quick-start disabled. The type is bool.
    QuickStartDisabled interface{}

    // Hello adjacency estabished time in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedTime interface{}

    // Hello adjacency estabished age in nanosec. The type is interface{} with
    // range: 0..18446744073709551615.
    EstablishedAge interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}

    // session bringup failure reason. The type is string.
    SessionBringupFailureReason interface{}

    // DHCB local address.
    DhcbLocalAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress

    // Last session down information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo.
    LastSessionDownInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
}

func (targetedHello *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello) GetEntityData() *types.CommonEntityData {
    targetedHello.EntityData.YFilter = targetedHello.YFilter
    targetedHello.EntityData.YangName = "targeted-hello"
    targetedHello.EntityData.BundleName = "cisco_ios_xr"
    targetedHello.EntityData.ParentYangName = "targeted-hellos"
    targetedHello.EntityData.SegmentPath = "targeted-hello" + types.AddNoKeyToken(targetedHello)
    targetedHello.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/targeted-hellos/" + targetedHello.EntityData.SegmentPath
    targetedHello.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHello.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHello.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHello.EntityData.Children = types.NewOrderedMap()
    targetedHello.EntityData.Children.Append("dhcb-local-address", types.YChild{"DhcbLocalAddress", &targetedHello.DhcbLocalAddress})
    targetedHello.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHello.DhcbTargetAddress})
    targetedHello.EntityData.Children.Append("last-session-down-info", types.YChild{"LastSessionDownInfo", nil})
    for i := range targetedHello.LastSessionDownInfo {
        types.SetYListKey(targetedHello.LastSessionDownInfo[i], i)
        targetedHello.EntityData.Children.Append(types.GetSegmentPath(targetedHello.LastSessionDownInfo[i]), types.YChild{"LastSessionDownInfo", targetedHello.LastSessionDownInfo[i]})
    }
    targetedHello.EntityData.Leafs = types.NewOrderedMap()
    targetedHello.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHello.LocalAddress})
    targetedHello.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHello.TargetAddress})
    targetedHello.EntityData.Leafs.Append("state", types.YLeaf{"State", targetedHello.State})
    targetedHello.EntityData.Leafs.Append("adjacency-ldp-identifier", types.YLeaf{"AdjacencyLdpIdentifier", targetedHello.AdjacencyLdpIdentifier})
    targetedHello.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", targetedHello.Interval})
    targetedHello.EntityData.Leafs.Append("next-hello", types.YLeaf{"NextHello", targetedHello.NextHello})
    targetedHello.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", targetedHello.HoldTime})
    targetedHello.EntityData.Leafs.Append("local-hold-time", types.YLeaf{"LocalHoldTime", targetedHello.LocalHoldTime})
    targetedHello.EntityData.Leafs.Append("neighbor-hold-time", types.YLeaf{"NeighborHoldTime", targetedHello.NeighborHoldTime})
    targetedHello.EntityData.Leafs.Append("disc-expiry", types.YLeaf{"DiscExpiry", targetedHello.DiscExpiry})
    targetedHello.EntityData.Leafs.Append("quick-start-disabled", types.YLeaf{"QuickStartDisabled", targetedHello.QuickStartDisabled})
    targetedHello.EntityData.Leafs.Append("established-time", types.YLeaf{"EstablishedTime", targetedHello.EstablishedTime})
    targetedHello.EntityData.Leafs.Append("established-age", types.YLeaf{"EstablishedAge", targetedHello.EstablishedAge})
    targetedHello.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", targetedHello.SessionUp})
    targetedHello.EntityData.Leafs.Append("session-bringup-failure-reason", types.YLeaf{"SessionBringupFailureReason", targetedHello.SessionBringupFailureReason})

    targetedHello.EntityData.YListKeys = []string {}

    return &(targetedHello.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress
// DHCB local address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbLocalAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbLocalAddress) GetEntityData() *types.CommonEntityData {
    dhcbLocalAddress.EntityData.YFilter = dhcbLocalAddress.YFilter
    dhcbLocalAddress.EntityData.YangName = "dhcb-local-address"
    dhcbLocalAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbLocalAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbLocalAddress.EntityData.SegmentPath = "dhcb-local-address"
    dhcbLocalAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbLocalAddress.EntityData.SegmentPath
    dhcbLocalAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbLocalAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbLocalAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbLocalAddress.EntityData.Children = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbLocalAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbLocalAddress.Afi})
    dhcbLocalAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbLocalAddress.Dummy})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbLocalAddress.Ipv4})
    dhcbLocalAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbLocalAddress.Ipv6})

    dhcbLocalAddress.EntityData.YListKeys = []string {}

    return &(dhcbLocalAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress
// DHCB target address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo
// Last session down information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The reason of last socket failure. The type is string.
    LastSessionDownReason interface{}

    // Timestamp of when the last session went down. The type is interface{} with
    // range: 0..18446744073709551615.
    LastSessionDownTime interface{}

    // The time duration the last session was up. The type is interface{} with
    // range: 0..4294967295.
    LastSessionUpTime interface{}
}

func (lastSessionDownInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_TargetedHellos_TargetedHello_LastSessionDownInfo) GetEntityData() *types.CommonEntityData {
    lastSessionDownInfo.EntityData.YFilter = lastSessionDownInfo.YFilter
    lastSessionDownInfo.EntityData.YangName = "last-session-down-info"
    lastSessionDownInfo.EntityData.BundleName = "cisco_ios_xr"
    lastSessionDownInfo.EntityData.ParentYangName = "targeted-hello"
    lastSessionDownInfo.EntityData.SegmentPath = "last-session-down-info" + types.AddNoKeyToken(lastSessionDownInfo)
    lastSessionDownInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/targeted-hellos/targeted-hello/" + lastSessionDownInfo.EntityData.SegmentPath
    lastSessionDownInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastSessionDownInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastSessionDownInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastSessionDownInfo.EntityData.Children = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs = types.NewOrderedMap()
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-reason", types.YLeaf{"LastSessionDownReason", lastSessionDownInfo.LastSessionDownReason})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-down-time", types.YLeaf{"LastSessionDownTime", lastSessionDownInfo.LastSessionDownTime})
    lastSessionDownInfo.EntityData.Leafs.Append("last-session-up-time", types.YLeaf{"LastSessionUpTime", lastSessionDownInfo.LastSessionUpTime})

    lastSessionDownInfo.EntityData.YListKeys = []string {}

    return &(lastSessionDownInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief
// Brief information on LDP discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP Discovery link brief information.
    LinkHelloBriefs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs

    // The LDP Discovery Targeted brief information.
    TargetedHelloBriefs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
}

func (brief *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "discovery"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/" + brief.EntityData.SegmentPath
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = types.NewOrderedMap()
    brief.EntityData.Children.Append("link-hello-briefs", types.YChild{"LinkHelloBriefs", &brief.LinkHelloBriefs})
    brief.EntityData.Children.Append("targeted-hello-briefs", types.YChild{"TargetedHelloBriefs", &brief.TargetedHelloBriefs})
    brief.EntityData.Leafs = types.NewOrderedMap()

    brief.EntityData.YListKeys = []string {}

    return &(brief.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs
// The LDP Discovery link brief information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP link discovery. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief.
    LinkHelloBrief []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
}

func (linkHelloBriefs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs) GetEntityData() *types.CommonEntityData {
    linkHelloBriefs.EntityData.YFilter = linkHelloBriefs.YFilter
    linkHelloBriefs.EntityData.YangName = "link-hello-briefs"
    linkHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBriefs.EntityData.ParentYangName = "brief"
    linkHelloBriefs.EntityData.SegmentPath = "link-hello-briefs"
    linkHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/" + linkHelloBriefs.EntityData.SegmentPath
    linkHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBriefs.EntityData.Children = types.NewOrderedMap()
    linkHelloBriefs.EntityData.Children.Append("link-hello-brief", types.YChild{"LinkHelloBrief", nil})
    for i := range linkHelloBriefs.LinkHelloBrief {
        linkHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(linkHelloBriefs.LinkHelloBrief[i]), types.YChild{"LinkHelloBrief", linkHelloBriefs.LinkHelloBrief[i]})
    }
    linkHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    linkHelloBriefs.EntityData.YListKeys = []string {}

    return &(linkHelloBriefs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief
// Brief information on LDP link discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The Interface Name. The type is string with
    // pattern: [a-zA-Z0-9._/-]+.
    InterfaceName interface{}

    // Discovery Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Discovery Brief Address Family Set. The type is LdpAf.
    AddressFamilySet interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
}

func (linkHelloBrief *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief) GetEntityData() *types.CommonEntityData {
    linkHelloBrief.EntityData.YFilter = linkHelloBrief.YFilter
    linkHelloBrief.EntityData.YangName = "link-hello-brief"
    linkHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    linkHelloBrief.EntityData.ParentYangName = "link-hello-briefs"
    linkHelloBrief.EntityData.SegmentPath = "link-hello-brief" + types.AddKeyToken(linkHelloBrief.InterfaceName, "interface-name")
    linkHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/" + linkHelloBrief.EntityData.SegmentPath
    linkHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloBrief.EntityData.Children = types.NewOrderedMap()
    linkHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &linkHelloBrief.Vrf})
    linkHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range linkHelloBrief.HelloInformation {
        types.SetYListKey(linkHelloBrief.HelloInformation[i], i)
        linkHelloBrief.EntityData.Children.Append(types.GetSegmentPath(linkHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", linkHelloBrief.HelloInformation[i]})
    }
    linkHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    linkHelloBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloBrief.InterfaceName})
    linkHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", linkHelloBrief.AddressFamily})
    linkHelloBrief.EntityData.Leafs.Append("address-family-set", types.YLeaf{"AddressFamilySet", linkHelloBrief.AddressFamilySet})
    linkHelloBrief.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloBrief.Interface})
    linkHelloBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", linkHelloBrief.InterfaceNameXr})

    linkHelloBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(linkHelloBrief.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "link-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_LinkHelloBriefs_LinkHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "link-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/link-hello-briefs/link-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs
// The LDP Discovery Targeted brief information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on LDP targeted discovery. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief.
    TargetedHelloBrief []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
}

func (targetedHelloBriefs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs) GetEntityData() *types.CommonEntityData {
    targetedHelloBriefs.EntityData.YFilter = targetedHelloBriefs.YFilter
    targetedHelloBriefs.EntityData.YangName = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBriefs.EntityData.ParentYangName = "brief"
    targetedHelloBriefs.EntityData.SegmentPath = "targeted-hello-briefs"
    targetedHelloBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/" + targetedHelloBriefs.EntityData.SegmentPath
    targetedHelloBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBriefs.EntityData.Children = types.NewOrderedMap()
    targetedHelloBriefs.EntityData.Children.Append("targeted-hello-brief", types.YChild{"TargetedHelloBrief", nil})
    for i := range targetedHelloBriefs.TargetedHelloBrief {
        types.SetYListKey(targetedHelloBriefs.TargetedHelloBrief[i], i)
        targetedHelloBriefs.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBriefs.TargetedHelloBrief[i]), types.YChild{"TargetedHelloBrief", targetedHelloBriefs.TargetedHelloBrief[i]})
    }
    targetedHelloBriefs.EntityData.Leafs = types.NewOrderedMap()

    targetedHelloBriefs.EntityData.YListKeys = []string {}

    return &(targetedHelloBriefs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief
// Brief information on LDP targeted discovery
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalAddress interface{}

    // The target IP Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TargetAddress interface{}

    // Targeted Discovery Address Family. The type is LdpAf.
    AddressFamily interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf

    // DHCB target address.
    DhcbTargetAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress

    // LDP hello info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation.
    HelloInformation []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
}

func (targetedHelloBrief *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief) GetEntityData() *types.CommonEntityData {
    targetedHelloBrief.EntityData.YFilter = targetedHelloBrief.YFilter
    targetedHelloBrief.EntityData.YangName = "targeted-hello-brief"
    targetedHelloBrief.EntityData.BundleName = "cisco_ios_xr"
    targetedHelloBrief.EntityData.ParentYangName = "targeted-hello-briefs"
    targetedHelloBrief.EntityData.SegmentPath = "targeted-hello-brief" + types.AddNoKeyToken(targetedHelloBrief)
    targetedHelloBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/" + targetedHelloBrief.EntityData.SegmentPath
    targetedHelloBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetedHelloBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetedHelloBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetedHelloBrief.EntityData.Children = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &targetedHelloBrief.Vrf})
    targetedHelloBrief.EntityData.Children.Append("dhcb-target-address", types.YChild{"DhcbTargetAddress", &targetedHelloBrief.DhcbTargetAddress})
    targetedHelloBrief.EntityData.Children.Append("hello-information", types.YChild{"HelloInformation", nil})
    for i := range targetedHelloBrief.HelloInformation {
        types.SetYListKey(targetedHelloBrief.HelloInformation[i], i)
        targetedHelloBrief.EntityData.Children.Append(types.GetSegmentPath(targetedHelloBrief.HelloInformation[i]), types.YChild{"HelloInformation", targetedHelloBrief.HelloInformation[i]})
    }
    targetedHelloBrief.EntityData.Leafs = types.NewOrderedMap()
    targetedHelloBrief.EntityData.Leafs.Append("local-address", types.YLeaf{"LocalAddress", targetedHelloBrief.LocalAddress})
    targetedHelloBrief.EntityData.Leafs.Append("target-address", types.YLeaf{"TargetAddress", targetedHelloBrief.TargetAddress})
    targetedHelloBrief.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", targetedHelloBrief.AddressFamily})

    targetedHelloBrief.EntityData.YListKeys = []string {}

    return &(targetedHelloBrief.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "targeted-hello-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress
// DHCB target address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (dhcbTargetAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_DhcbTargetAddress) GetEntityData() *types.CommonEntityData {
    dhcbTargetAddress.EntityData.YFilter = dhcbTargetAddress.YFilter
    dhcbTargetAddress.EntityData.YangName = "dhcb-target-address"
    dhcbTargetAddress.EntityData.BundleName = "cisco_ios_xr"
    dhcbTargetAddress.EntityData.ParentYangName = "targeted-hello-brief"
    dhcbTargetAddress.EntityData.SegmentPath = "dhcb-target-address"
    dhcbTargetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + dhcbTargetAddress.EntityData.SegmentPath
    dhcbTargetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dhcbTargetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dhcbTargetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dhcbTargetAddress.EntityData.Children = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs = types.NewOrderedMap()
    dhcbTargetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", dhcbTargetAddress.Afi})
    dhcbTargetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", dhcbTargetAddress.Dummy})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", dhcbTargetAddress.Ipv4})
    dhcbTargetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", dhcbTargetAddress.Ipv6})

    dhcbTargetAddress.EntityData.YListKeys = []string {}

    return &(dhcbTargetAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation
// LDP hello info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor LDP Identifier. The type is string.
    NeighborLdpIdentifier interface{}

    // Session hold time in sec. The type is interface{} with range:
    // 0..4294967295.
    HoldTime interface{}

    // Is session up for this adj. The type is bool.
    SessionUp interface{}
}

func (helloInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Brief_TargetedHelloBriefs_TargetedHelloBrief_HelloInformation) GetEntityData() *types.CommonEntityData {
    helloInformation.EntityData.YFilter = helloInformation.YFilter
    helloInformation.EntityData.YangName = "hello-information"
    helloInformation.EntityData.BundleName = "cisco_ios_xr"
    helloInformation.EntityData.ParentYangName = "targeted-hello-brief"
    helloInformation.EntityData.SegmentPath = "hello-information" + types.AddNoKeyToken(helloInformation)
    helloInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/brief/targeted-hello-briefs/targeted-hello-brief/" + helloInformation.EntityData.SegmentPath
    helloInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInformation.EntityData.Children = types.NewOrderedMap()
    helloInformation.EntityData.Leafs = types.NewOrderedMap()
    helloInformation.EntityData.Leafs.Append("neighbor-ldp-identifier", types.YLeaf{"NeighborLdpIdentifier", helloInformation.NeighborLdpIdentifier})
    helloInformation.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", helloInformation.HoldTime})
    helloInformation.EntityData.Leafs.Append("session-up", types.YLeaf{"SessionUp", helloInformation.SessionUp})

    helloInformation.EntityData.YListKeys = []string {}

    return &(helloInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats
// The LDP Discovery Statistics
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on LDP discovery statistics. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat.
    Stat []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
}

func (stats *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats) GetEntityData() *types.CommonEntityData {
    stats.EntityData.YFilter = stats.YFilter
    stats.EntityData.YangName = "stats"
    stats.EntityData.BundleName = "cisco_ios_xr"
    stats.EntityData.ParentYangName = "discovery"
    stats.EntityData.SegmentPath = "stats"
    stats.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/" + stats.EntityData.SegmentPath
    stats.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stats.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stats.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stats.EntityData.Children = types.NewOrderedMap()
    stats.EntityData.Children.Append("stat", types.YChild{"Stat", nil})
    for i := range stats.Stat {
        types.SetYListKey(stats.Stat[i], i)
        stats.EntityData.Children.Append(types.GetSegmentPath(stats.Stat[i]), types.YChild{"Stat", stats.Stat[i]})
    }
    stats.EntityData.Leafs = types.NewOrderedMap()

    stats.EntityData.YListKeys = []string {}

    return &(stats.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat
// Information on LDP discovery statistics
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Adjacency group up time in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    AdjacencyGroupUpTime interface{}

    // Count of attempted TCP opens. The type is interface{} with range:
    // 0..4294967295.
    TcpOpenCount interface{}

    // Count of changes in TCP arbitration. The type is interface{} with range:
    // 0..4294967295.
    TcpArbChgCount interface{}

    // TCP Role. The type is interface{} with range: 0..4294967295.
    TcpRole interface{}
}

func (stat *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Discovery_Stats_Stat) GetEntityData() *types.CommonEntityData {
    stat.EntityData.YFilter = stat.YFilter
    stat.EntityData.YangName = "stat"
    stat.EntityData.BundleName = "cisco_ios_xr"
    stat.EntityData.ParentYangName = "stats"
    stat.EntityData.SegmentPath = "stat" + types.AddNoKeyToken(stat)
    stat.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/discovery/stats/" + stat.EntityData.SegmentPath
    stat.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stat.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stat.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stat.EntityData.Children = types.NewOrderedMap()
    stat.EntityData.Leafs = types.NewOrderedMap()
    stat.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", stat.LsrId})
    stat.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", stat.LabelSpaceId})
    stat.EntityData.Leafs.Append("adjacency-group-up-time", types.YLeaf{"AdjacencyGroupUpTime", stat.AdjacencyGroupUpTime})
    stat.EntityData.Leafs.Append("tcp-open-count", types.YLeaf{"TcpOpenCount", stat.TcpOpenCount})
    stat.EntityData.Leafs.Append("tcp-arb-chg-count", types.YLeaf{"TcpArbChgCount", stat.TcpArbChgCount})
    stat.EntityData.Leafs.Append("tcp-role", types.YLeaf{"TcpRole", stat.TcpRole})

    stat.EntityData.YListKeys = []string {}

    return &(stat.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings
// The LDP Forwarding rewrites
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP forwarding rewrite. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding.
    Forwarding []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
}

func (forwardings *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings) GetEntityData() *types.CommonEntityData {
    forwardings.EntityData.YFilter = forwardings.YFilter
    forwardings.EntityData.YangName = "forwardings"
    forwardings.EntityData.BundleName = "cisco_ios_xr"
    forwardings.EntityData.ParentYangName = "af"
    forwardings.EntityData.SegmentPath = "forwardings"
    forwardings.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + forwardings.EntityData.SegmentPath
    forwardings.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardings.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardings.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardings.EntityData.Children = types.NewOrderedMap()
    forwardings.EntityData.Children.Append("forwarding", types.YChild{"Forwarding", nil})
    for i := range forwardings.Forwarding {
        forwardings.EntityData.Children.Append(types.GetSegmentPath(forwardings.Forwarding[i]), types.YChild{"Forwarding", forwardings.Forwarding[i]})
    }
    forwardings.EntityData.Leafs = types.NewOrderedMap()

    forwardings.EntityData.YListKeys = []string {}

    return &(forwardings.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding
// Information on a particular LDP forwarding
// rewrite
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The IP Prefix. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    Prefix interface{}

    // Table ID associated with IP prefix. The type is interface{} with range:
    // 0..4294967295.
    TableId interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf

    // IP Prefix.
    PrefixXr MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr

    // Route.
    Route MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route

    // Paths. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths.
    Paths []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
}

func (forwarding *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding) GetEntityData() *types.CommonEntityData {
    forwarding.EntityData.YFilter = forwarding.YFilter
    forwarding.EntityData.YangName = "forwarding"
    forwarding.EntityData.BundleName = "cisco_ios_xr"
    forwarding.EntityData.ParentYangName = "forwardings"
    forwarding.EntityData.SegmentPath = "forwarding" + types.AddKeyToken(forwarding.Prefix, "prefix")
    forwarding.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/" + forwarding.EntityData.SegmentPath
    forwarding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarding.EntityData.Children = types.NewOrderedMap()
    forwarding.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwarding.Vrf})
    forwarding.EntityData.Children.Append("prefix-xr", types.YChild{"PrefixXr", &forwarding.PrefixXr})
    forwarding.EntityData.Children.Append("route", types.YChild{"Route", &forwarding.Route})
    forwarding.EntityData.Children.Append("paths", types.YChild{"Paths", nil})
    for i := range forwarding.Paths {
        types.SetYListKey(forwarding.Paths[i], i)
        forwarding.EntityData.Children.Append(types.GetSegmentPath(forwarding.Paths[i]), types.YChild{"Paths", forwarding.Paths[i]})
    }
    forwarding.EntityData.Leafs = types.NewOrderedMap()
    forwarding.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", forwarding.Prefix})
    forwarding.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", forwarding.TableId})
    forwarding.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", forwarding.PrefixLength})

    forwarding.EntityData.YListKeys = []string {"Prefix"}

    return &(forwarding.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr
// IP Prefix
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (prefixXr *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_PrefixXr) GetEntityData() *types.CommonEntityData {
    prefixXr.EntityData.YFilter = prefixXr.YFilter
    prefixXr.EntityData.YangName = "prefix-xr"
    prefixXr.EntityData.BundleName = "cisco_ios_xr"
    prefixXr.EntityData.ParentYangName = "forwarding"
    prefixXr.EntityData.SegmentPath = "prefix-xr"
    prefixXr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/" + prefixXr.EntityData.SegmentPath
    prefixXr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixXr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixXr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixXr.EntityData.Children = types.NewOrderedMap()
    prefixXr.EntityData.Leafs = types.NewOrderedMap()
    prefixXr.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", prefixXr.Afi})
    prefixXr.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", prefixXr.Dummy})
    prefixXr.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", prefixXr.Ipv4})
    prefixXr.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", prefixXr.Ipv6})

    prefixXr.EntityData.YListKeys = []string {}

    return &(prefixXr.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route
// Route
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP routing information.
    Routing MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing

    // MPLS information.
    Mpls MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
}

func (route *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route) GetEntityData() *types.CommonEntityData {
    route.EntityData.YFilter = route.YFilter
    route.EntityData.YangName = "route"
    route.EntityData.BundleName = "cisco_ios_xr"
    route.EntityData.ParentYangName = "forwarding"
    route.EntityData.SegmentPath = "route"
    route.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/" + route.EntityData.SegmentPath
    route.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    route.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    route.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    route.EntityData.Children = types.NewOrderedMap()
    route.EntityData.Children.Append("routing", types.YChild{"Routing", &route.Routing})
    route.EntityData.Children.Append("mpls", types.YChild{"Mpls", &route.Mpls})
    route.EntityData.Leafs = types.NewOrderedMap()

    route.EntityData.YListKeys = []string {}

    return &(route.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing
// IP routing information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route RIB ersion. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // Route priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Route source protol Id. The type is interface{} with range: 0..65535.
    Source interface{}

    // Route type. The type is interface{} with range: 0..65535.
    Type interface{}

    // Route RIB flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Route metric. The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // Is route leaked across local VRFs?. The type is bool.
    IsLocalVrfLeaked interface{}

    // Number of routing updates. The type is interface{} with range:
    // 0..4294967295.
    RoutingUpdateCount interface{}

    // Last Routing update nanosec timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateTimestamp interface{}

    // Last Routing update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    RoutingUpdateAge interface{}

    // SR Local-label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (routing *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "route"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/route/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("version", types.YLeaf{"Version", routing.Version})
    routing.EntityData.Leafs.Append("priority", types.YLeaf{"Priority", routing.Priority})
    routing.EntityData.Leafs.Append("source", types.YLeaf{"Source", routing.Source})
    routing.EntityData.Leafs.Append("type", types.YLeaf{"Type", routing.Type})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("metric", types.YLeaf{"Metric", routing.Metric})
    routing.EntityData.Leafs.Append("is-local-vrf-leaked", types.YLeaf{"IsLocalVrfLeaked", routing.IsLocalVrfLeaked})
    routing.EntityData.Leafs.Append("routing-update-count", types.YLeaf{"RoutingUpdateCount", routing.RoutingUpdateCount})
    routing.EntityData.Leafs.Append("routing-update-timestamp", types.YLeaf{"RoutingUpdateTimestamp", routing.RoutingUpdateTimestamp})
    routing.EntityData.Leafs.Append("routing-update-age", types.YLeaf{"RoutingUpdateAge", routing.RoutingUpdateAge})
    routing.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", routing.SrLocalLabel})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls
// MPLS information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}

    // Number of forwarding updates. The type is interface{} with range:
    // 0..4294967295.
    ForwardingUpdateCount interface{}

    // Last Forwarding update nanosec timestamp. The type is interface{} with
    // range: 0..18446744073709551615.
    ForwardingUpdateTimestamp interface{}

    // Last Forwarding update nanosec age. The type is interface{} with range:
    // 0..18446744073709551615.
    ForwardingUpdateAge interface{}
}

func (mpls *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Route_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "route"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/route/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Leafs = types.NewOrderedMap()
    mpls.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", mpls.LocalLabel})
    mpls.EntityData.Leafs.Append("forwarding-update-count", types.YLeaf{"ForwardingUpdateCount", mpls.ForwardingUpdateCount})
    mpls.EntityData.Leafs.Append("forwarding-update-timestamp", types.YLeaf{"ForwardingUpdateTimestamp", mpls.ForwardingUpdateTimestamp})
    mpls.EntityData.Leafs.Append("forwarding-update-age", types.YLeaf{"ForwardingUpdateAge", mpls.ForwardingUpdateAge})

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths
// Paths
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // IP routing information.
    Routing MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing

    // MPLS information.
    Mpls MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
}

func (paths *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths) GetEntityData() *types.CommonEntityData {
    paths.EntityData.YFilter = paths.YFilter
    paths.EntityData.YangName = "paths"
    paths.EntityData.BundleName = "cisco_ios_xr"
    paths.EntityData.ParentYangName = "forwarding"
    paths.EntityData.SegmentPath = "paths" + types.AddNoKeyToken(paths)
    paths.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/" + paths.EntityData.SegmentPath
    paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    paths.EntityData.Children = types.NewOrderedMap()
    paths.EntityData.Children.Append("routing", types.YChild{"Routing", &paths.Routing})
    paths.EntityData.Children.Append("mpls", types.YChild{"Mpls", &paths.Mpls})
    paths.EntityData.Leafs = types.NewOrderedMap()

    paths.EntityData.YListKeys = []string {}

    return &(paths.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing
// IP routing information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop is overriden by LDP. The type is bool.
    NhIsOverriden interface{}

    // Nexthop Identifier. The type is interface{} with range: 0..4294967295.
    NexthopId interface{}

    // Table ID for nexthop address. The type is interface{} with range:
    // 0..4294967295.
    NextHopTableId interface{}

    // Route path flags. The type is interface{} with range: 0..4294967295.
    Flags interface{}

    // Path's load metric for load balancing. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // path Id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Backup path Id. The type is interface{} with range: 0..255.
    BkupPathId interface{}

    // Routing path flags decoded. The type is LdpRoutePathFlags.
    PathFlags interface{}

    // Next Hop.
    NextHop MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
}

func (routing *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing) GetEntityData() *types.CommonEntityData {
    routing.EntityData.YFilter = routing.YFilter
    routing.EntityData.YangName = "routing"
    routing.EntityData.BundleName = "cisco_ios_xr"
    routing.EntityData.ParentYangName = "paths"
    routing.EntityData.SegmentPath = "routing"
    routing.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + routing.EntityData.SegmentPath
    routing.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routing.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routing.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routing.EntityData.Children = types.NewOrderedMap()
    routing.EntityData.Children.Append("next-hop", types.YChild{"NextHop", &routing.NextHop})
    routing.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &routing.RemoteLfa})
    routing.EntityData.Leafs = types.NewOrderedMap()
    routing.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", routing.Interface})
    routing.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", routing.InterfaceName})
    routing.EntityData.Leafs.Append("nh-is-overriden", types.YLeaf{"NhIsOverriden", routing.NhIsOverriden})
    routing.EntityData.Leafs.Append("nexthop-id", types.YLeaf{"NexthopId", routing.NexthopId})
    routing.EntityData.Leafs.Append("next-hop-table-id", types.YLeaf{"NextHopTableId", routing.NextHopTableId})
    routing.EntityData.Leafs.Append("flags", types.YLeaf{"Flags", routing.Flags})
    routing.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", routing.LoadMetric})
    routing.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", routing.PathId})
    routing.EntityData.Leafs.Append("bkup-path-id", types.YLeaf{"BkupPathId", routing.BkupPathId})
    routing.EntityData.Leafs.Append("path-flags", types.YLeaf{"PathFlags", routing.PathFlags})

    routing.EntityData.YListKeys = []string {}

    return &(routing.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop
// Next Hop
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (nextHop *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_NextHop) GetEntityData() *types.CommonEntityData {
    nextHop.EntityData.YFilter = nextHop.YFilter
    nextHop.EntityData.YangName = "next-hop"
    nextHop.EntityData.BundleName = "cisco_ios_xr"
    nextHop.EntityData.ParentYangName = "routing"
    nextHop.EntityData.SegmentPath = "next-hop"
    nextHop.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + nextHop.EntityData.SegmentPath
    nextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHop.EntityData.Children = types.NewOrderedMap()
    nextHop.EntityData.Leafs = types.NewOrderedMap()
    nextHop.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", nextHop.Afi})
    nextHop.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", nextHop.Dummy})
    nextHop.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", nextHop.Ipv4})
    nextHop.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", nextHop.Ipv6})

    nextHop.EntityData.YListKeys = []string {}

    return &(nextHop.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Whether TLDP is needed with remote PQ node. The type is bool.
    NeedsTldp interface{}

    // Whether remote LFA path has a Q node associated. The type is bool.
    HasQNode interface{}

    // Remote/P node address.
    RemotePNodeId MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId

    // Remote/Q node address.
    RemoteQNodeId MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
}

func (remoteLfa *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "routing"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("remote-p-node-id", types.YChild{"RemotePNodeId", &remoteLfa.RemotePNodeId})
    remoteLfa.EntityData.Children.Append("remote-q-node-id", types.YChild{"RemoteQNodeId", &remoteLfa.RemoteQNodeId})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})
    remoteLfa.EntityData.Leafs.Append("needs-tldp", types.YLeaf{"NeedsTldp", remoteLfa.NeedsTldp})
    remoteLfa.EntityData.Leafs.Append("has-q-node", types.YLeaf{"HasQNode", remoteLfa.HasQNode})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId
// Remote/P node address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remotePNodeId *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemotePNodeId) GetEntityData() *types.CommonEntityData {
    remotePNodeId.EntityData.YFilter = remotePNodeId.YFilter
    remotePNodeId.EntityData.YangName = "remote-p-node-id"
    remotePNodeId.EntityData.BundleName = "cisco_ios_xr"
    remotePNodeId.EntityData.ParentYangName = "remote-lfa"
    remotePNodeId.EntityData.SegmentPath = "remote-p-node-id"
    remotePNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remotePNodeId.EntityData.SegmentPath
    remotePNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remotePNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remotePNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remotePNodeId.EntityData.Children = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs = types.NewOrderedMap()
    remotePNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remotePNodeId.Afi})
    remotePNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remotePNodeId.Dummy})
    remotePNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remotePNodeId.Ipv4})
    remotePNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remotePNodeId.Ipv6})

    remotePNodeId.EntityData.YListKeys = []string {}

    return &(remotePNodeId.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId
// Remote/Q node address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (remoteQNodeId *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Routing_RemoteLfa_RemoteQNodeId) GetEntityData() *types.CommonEntityData {
    remoteQNodeId.EntityData.YFilter = remoteQNodeId.YFilter
    remoteQNodeId.EntityData.YangName = "remote-q-node-id"
    remoteQNodeId.EntityData.BundleName = "cisco_ios_xr"
    remoteQNodeId.EntityData.ParentYangName = "remote-lfa"
    remoteQNodeId.EntityData.SegmentPath = "remote-q-node-id"
    remoteQNodeId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/routing/remote-lfa/" + remoteQNodeId.EntityData.SegmentPath
    remoteQNodeId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteQNodeId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteQNodeId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteQNodeId.EntityData.Children = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs = types.NewOrderedMap()
    remoteQNodeId.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", remoteQNodeId.Afi})
    remoteQNodeId.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", remoteQNodeId.Dummy})
    remoteQNodeId.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", remoteQNodeId.Ipv4})
    remoteQNodeId.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", remoteQNodeId.Ipv6})

    remoteQNodeId.EntityData.YListKeys = []string {}

    return &(remoteQNodeId.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls
// MPLS information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS nexthop info.
    MplsOutgoingInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo

    // Remote LFA-FRR backup info.
    RemoteLfa MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
}

func (mpls *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls) GetEntityData() *types.CommonEntityData {
    mpls.EntityData.YFilter = mpls.YFilter
    mpls.EntityData.YangName = "mpls"
    mpls.EntityData.BundleName = "cisco_ios_xr"
    mpls.EntityData.ParentYangName = "paths"
    mpls.EntityData.SegmentPath = "mpls"
    mpls.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/" + mpls.EntityData.SegmentPath
    mpls.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mpls.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mpls.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mpls.EntityData.Children = types.NewOrderedMap()
    mpls.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &mpls.MplsOutgoingInfo})
    mpls.EntityData.Children.Append("remote-lfa", types.YChild{"RemoteLfa", &mpls.RemoteLfa})
    mpls.EntityData.Leafs = types.NewOrderedMap()

    mpls.EntityData.YListKeys = []string {}

    return &(mpls.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo
// MPLS nexthop info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
}

func (mplsOutgoingInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "mpls"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &mplsOutgoingInfo.NexthopPeerLdpIdent})
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", mplsOutgoingInfo.OutLabel})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", mplsOutgoingInfo.OutLabelRsn})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", mplsOutgoingInfo.OutLabelType})
    mplsOutgoingInfo.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", mplsOutgoingInfo.OutLabelOwner})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", mplsOutgoingInfo.IsFromGracefulRestartableNeighbor})
    mplsOutgoingInfo.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", mplsOutgoingInfo.IsStale})

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_MplsOutgoingInfo_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "mpls-outgoing-info"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/mpls-outgoing-info/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa
// Remote LFA-FRR backup info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether path has remote LFA backup. The type is bool.
    HasRemoteLfaBkup interface{}

    // Remote LFA MPLS nexthop(s_ info.
    MplsOutgoingInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
}

func (remoteLfa *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa) GetEntityData() *types.CommonEntityData {
    remoteLfa.EntityData.YFilter = remoteLfa.YFilter
    remoteLfa.EntityData.YangName = "remote-lfa"
    remoteLfa.EntityData.BundleName = "cisco_ios_xr"
    remoteLfa.EntityData.ParentYangName = "mpls"
    remoteLfa.EntityData.SegmentPath = "remote-lfa"
    remoteLfa.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/" + remoteLfa.EntityData.SegmentPath
    remoteLfa.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteLfa.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteLfa.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteLfa.EntityData.Children = types.NewOrderedMap()
    remoteLfa.EntityData.Children.Append("mpls-outgoing-info", types.YChild{"MplsOutgoingInfo", &remoteLfa.MplsOutgoingInfo})
    remoteLfa.EntityData.Leafs = types.NewOrderedMap()
    remoteLfa.EntityData.Leafs.Append("has-remote-lfa-bkup", types.YLeaf{"HasRemoteLfaBkup", remoteLfa.HasRemoteLfaBkup})

    remoteLfa.EntityData.YListKeys = []string {}

    return &(remoteLfa.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo
// Remote LFA MPLS nexthop(s_ info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inner label stack info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack.
    Stack []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
}

func (mplsOutgoingInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo) GetEntityData() *types.CommonEntityData {
    mplsOutgoingInfo.EntityData.YFilter = mplsOutgoingInfo.YFilter
    mplsOutgoingInfo.EntityData.YangName = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.BundleName = "cisco_ios_xr"
    mplsOutgoingInfo.EntityData.ParentYangName = "remote-lfa"
    mplsOutgoingInfo.EntityData.SegmentPath = "mpls-outgoing-info"
    mplsOutgoingInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/" + mplsOutgoingInfo.EntityData.SegmentPath
    mplsOutgoingInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsOutgoingInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsOutgoingInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsOutgoingInfo.EntityData.Children = types.NewOrderedMap()
    mplsOutgoingInfo.EntityData.Children.Append("stack", types.YChild{"Stack", nil})
    for i := range mplsOutgoingInfo.Stack {
        types.SetYListKey(mplsOutgoingInfo.Stack[i], i)
        mplsOutgoingInfo.EntityData.Children.Append(types.GetSegmentPath(mplsOutgoingInfo.Stack[i]), types.YChild{"Stack", mplsOutgoingInfo.Stack[i]})
    }
    mplsOutgoingInfo.EntityData.Leafs = types.NewOrderedMap()

    mplsOutgoingInfo.EntityData.YListKeys = []string {}

    return &(mplsOutgoingInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack
// Inner label stack info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label reason. The type is LdpFwdUnlblRsn.
    OutLabelRsn interface{}

    // Outgoing Label Type. The type is LabelValue.
    OutLabelType interface{}

    // Outgoing label owner. The type is LdpRoutePathLblOwner.
    OutLabelOwner interface{}

    // Is from a GR neighbor. The type is bool.
    IsFromGracefulRestartableNeighbor interface{}

    // Is the entry stale. The type is bool.
    IsStale interface{}

    // Nexthop LDP peer.
    NexthopPeerLdpIdent MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
}

func (stack *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack) GetEntityData() *types.CommonEntityData {
    stack.EntityData.YFilter = stack.YFilter
    stack.EntityData.YangName = "stack"
    stack.EntityData.BundleName = "cisco_ios_xr"
    stack.EntityData.ParentYangName = "mpls-outgoing-info"
    stack.EntityData.SegmentPath = "stack" + types.AddNoKeyToken(stack)
    stack.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/" + stack.EntityData.SegmentPath
    stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stack.EntityData.Children = types.NewOrderedMap()
    stack.EntityData.Children.Append("nexthop-peer-ldp-ident", types.YChild{"NexthopPeerLdpIdent", &stack.NexthopPeerLdpIdent})
    stack.EntityData.Leafs = types.NewOrderedMap()
    stack.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", stack.OutLabel})
    stack.EntityData.Leafs.Append("out-label-rsn", types.YLeaf{"OutLabelRsn", stack.OutLabelRsn})
    stack.EntityData.Leafs.Append("out-label-type", types.YLeaf{"OutLabelType", stack.OutLabelType})
    stack.EntityData.Leafs.Append("out-label-owner", types.YLeaf{"OutLabelOwner", stack.OutLabelOwner})
    stack.EntityData.Leafs.Append("is-from-graceful-restartable-neighbor", types.YLeaf{"IsFromGracefulRestartableNeighbor", stack.IsFromGracefulRestartableNeighbor})
    stack.EntityData.Leafs.Append("is-stale", types.YLeaf{"IsStale", stack.IsStale})

    stack.EntityData.YListKeys = []string {}

    return &(stack.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent
// Nexthop LDP peer
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (nexthopPeerLdpIdent *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_Forwardings_Forwarding_Paths_Mpls_RemoteLfa_MplsOutgoingInfo_Stack_NexthopPeerLdpIdent) GetEntityData() *types.CommonEntityData {
    nexthopPeerLdpIdent.EntityData.YFilter = nexthopPeerLdpIdent.YFilter
    nexthopPeerLdpIdent.EntityData.YangName = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.BundleName = "cisco_ios_xr"
    nexthopPeerLdpIdent.EntityData.ParentYangName = "stack"
    nexthopPeerLdpIdent.EntityData.SegmentPath = "nexthop-peer-ldp-ident"
    nexthopPeerLdpIdent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwardings/forwarding/paths/mpls/remote-lfa/mpls-outgoing-info/stack/" + nexthopPeerLdpIdent.EntityData.SegmentPath
    nexthopPeerLdpIdent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthopPeerLdpIdent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthopPeerLdpIdent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthopPeerLdpIdent.EntityData.Children = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs = types.NewOrderedMap()
    nexthopPeerLdpIdent.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", nexthopPeerLdpIdent.LsrId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", nexthopPeerLdpIdent.LabelSpaceId})
    nexthopPeerLdpIdent.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", nexthopPeerLdpIdent.LdpId})

    nexthopPeerLdpIdent.EntityData.YListKeys = []string {}

    return &(nexthopPeerLdpIdent.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec
// Advertisement Spec (ACL) for LDP Label
// Infomation Base (LIB)
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local label Allocation filter.
    AllocationAcl MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl

    // Advertisement ACLs. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl.
    AdvtAcl []*MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
}

func (bindingsAdvertiseSpec *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec) GetEntityData() *types.CommonEntityData {
    bindingsAdvertiseSpec.EntityData.YFilter = bindingsAdvertiseSpec.YFilter
    bindingsAdvertiseSpec.EntityData.YangName = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.BundleName = "cisco_ios_xr"
    bindingsAdvertiseSpec.EntityData.ParentYangName = "af"
    bindingsAdvertiseSpec.EntityData.SegmentPath = "bindings-advertise-spec"
    bindingsAdvertiseSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + bindingsAdvertiseSpec.EntityData.SegmentPath
    bindingsAdvertiseSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bindingsAdvertiseSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bindingsAdvertiseSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bindingsAdvertiseSpec.EntityData.Children = types.NewOrderedMap()
    bindingsAdvertiseSpec.EntityData.Children.Append("allocation-acl", types.YChild{"AllocationAcl", &bindingsAdvertiseSpec.AllocationAcl})
    bindingsAdvertiseSpec.EntityData.Children.Append("advt-acl", types.YChild{"AdvtAcl", nil})
    for i := range bindingsAdvertiseSpec.AdvtAcl {
        types.SetYListKey(bindingsAdvertiseSpec.AdvtAcl[i], i)
        bindingsAdvertiseSpec.EntityData.Children.Append(types.GetSegmentPath(bindingsAdvertiseSpec.AdvtAcl[i]), types.YChild{"AdvtAcl", bindingsAdvertiseSpec.AdvtAcl[i]})
    }
    bindingsAdvertiseSpec.EntityData.Leafs = types.NewOrderedMap()

    bindingsAdvertiseSpec.EntityData.YListKeys = []string {}

    return &(bindingsAdvertiseSpec.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl
// Local label Allocation filter
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Has ACL filter?. The type is bool.
    HasAcl interface{}

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Host-routes only?. The type is bool.
    IsHostRouteOnly interface{}
}

func (allocationAcl *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AllocationAcl) GetEntityData() *types.CommonEntityData {
    allocationAcl.EntityData.YFilter = allocationAcl.YFilter
    allocationAcl.EntityData.YangName = "allocation-acl"
    allocationAcl.EntityData.BundleName = "cisco_ios_xr"
    allocationAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    allocationAcl.EntityData.SegmentPath = "allocation-acl"
    allocationAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings-advertise-spec/" + allocationAcl.EntityData.SegmentPath
    allocationAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocationAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocationAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocationAcl.EntityData.Children = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs = types.NewOrderedMap()
    allocationAcl.EntityData.Leafs.Append("has-acl", types.YLeaf{"HasAcl", allocationAcl.HasAcl})
    allocationAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", allocationAcl.PrefixAcl})
    allocationAcl.EntityData.Leafs.Append("is-host-route-only", types.YLeaf{"IsHostRouteOnly", allocationAcl.IsHostRouteOnly})

    allocationAcl.EntityData.YListKeys = []string {}

    return &(allocationAcl.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl
// Advertisement ACLs
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Prefix ACL. The type is string with length: 0..64.
    PrefixAcl interface{}

    // Peer ACL. The type is string with length: 0..64.
    PeerAcl interface{}
}

func (advtAcl *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_BindingsAdvertiseSpec_AdvtAcl) GetEntityData() *types.CommonEntityData {
    advtAcl.EntityData.YFilter = advtAcl.YFilter
    advtAcl.EntityData.YangName = "advt-acl"
    advtAcl.EntityData.BundleName = "cisco_ios_xr"
    advtAcl.EntityData.ParentYangName = "bindings-advertise-spec"
    advtAcl.EntityData.SegmentPath = "advt-acl" + types.AddNoKeyToken(advtAcl)
    advtAcl.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/bindings-advertise-spec/" + advtAcl.EntityData.SegmentPath
    advtAcl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advtAcl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advtAcl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advtAcl.EntityData.Children = types.NewOrderedMap()
    advtAcl.EntityData.Leafs = types.NewOrderedMap()
    advtAcl.EntityData.Leafs.Append("prefix-acl", types.YLeaf{"PrefixAcl", advtAcl.PrefixAcl})
    advtAcl.EntityData.Leafs.Append("peer-acl", types.YLeaf{"PeerAcl", advtAcl.PeerAcl})

    advtAcl.EntityData.YListKeys = []string {}

    return &(advtAcl.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary
// Summary information regarding LDP forwarding
// setup
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP is connected to LSD server. The type is bool.
    IsLsdBound interface{}

    // Forwarding state hold time registered with LSD. The type is interface{}
    // with range: 0..65535.
    Fsht interface{}

    // MPLS forwarding enabled interface count. The type is interface{} with
    // range: 0..65535.
    Intfs interface{}

    // Local label allocated count. The type is interface{} with range: 0..65535.
    Lbls interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf

    // Forwarding rewrites summary.
    Rws MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
}

func (forwardingSummary *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary) GetEntityData() *types.CommonEntityData {
    forwardingSummary.EntityData.YFilter = forwardingSummary.YFilter
    forwardingSummary.EntityData.YangName = "forwarding-summary"
    forwardingSummary.EntityData.BundleName = "cisco_ios_xr"
    forwardingSummary.EntityData.ParentYangName = "af"
    forwardingSummary.EntityData.SegmentPath = "forwarding-summary"
    forwardingSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/" + forwardingSummary.EntityData.SegmentPath
    forwardingSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwardingSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwardingSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwardingSummary.EntityData.Children = types.NewOrderedMap()
    forwardingSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &forwardingSummary.Vrf})
    forwardingSummary.EntityData.Children.Append("rws", types.YChild{"Rws", &forwardingSummary.Rws})
    forwardingSummary.EntityData.Leafs = types.NewOrderedMap()
    forwardingSummary.EntityData.Leafs.Append("is-lsd-bound", types.YLeaf{"IsLsdBound", forwardingSummary.IsLsdBound})
    forwardingSummary.EntityData.Leafs.Append("fsht", types.YLeaf{"Fsht", forwardingSummary.Fsht})
    forwardingSummary.EntityData.Leafs.Append("intfs", types.YLeaf{"Intfs", forwardingSummary.Intfs})
    forwardingSummary.EntityData.Leafs.Append("lbls", types.YLeaf{"Lbls", forwardingSummary.Lbls})

    forwardingSummary.EntityData.YListKeys = []string {}

    return &(forwardingSummary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "forwarding-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws
// Forwarding rewrites summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Forwarding rewrites prefix summary.
    Pfxs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs

    // Forwarding rewrites nexthops (paths) summary.
    Nhs MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
}

func (rws *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws) GetEntityData() *types.CommonEntityData {
    rws.EntityData.YFilter = rws.YFilter
    rws.EntityData.YangName = "rws"
    rws.EntityData.BundleName = "cisco_ios_xr"
    rws.EntityData.ParentYangName = "forwarding-summary"
    rws.EntityData.SegmentPath = "rws"
    rws.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/" + rws.EntityData.SegmentPath
    rws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rws.EntityData.Children = types.NewOrderedMap()
    rws.EntityData.Children.Append("pfxs", types.YChild{"Pfxs", &rws.Pfxs})
    rws.EntityData.Children.Append("nhs", types.YChild{"Nhs", &rws.Nhs})
    rws.EntityData.Leafs = types.NewOrderedMap()

    rws.EntityData.YListKeys = []string {}

    return &(rws.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs
// Forwarding rewrites prefix summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total Prefix count. The type is interface{} with range: 0..65535.
    TotalPfxs interface{}

    // Count of prefixes with ECMP. The type is interface{} with range: 0..65535.
    EcmpPfxs interface{}

    // Count of FRR protected prefixes. The type is interface{} with range:
    // 0..65535.
    ProtectedPfxs interface{}

    // Labeled prefix count for all paths.
    LabeledPfxsAggr MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr

    // Labeled prefix count related to primary paths only.
    LabeledPfxsPrimary MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary

    // Labeled prefix count related to backup paths only.
    LabeledPfxsBackup MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
}

func (pfxs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs) GetEntityData() *types.CommonEntityData {
    pfxs.EntityData.YFilter = pfxs.YFilter
    pfxs.EntityData.YangName = "pfxs"
    pfxs.EntityData.BundleName = "cisco_ios_xr"
    pfxs.EntityData.ParentYangName = "rws"
    pfxs.EntityData.SegmentPath = "pfxs"
    pfxs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/rws/" + pfxs.EntityData.SegmentPath
    pfxs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfxs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfxs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfxs.EntityData.Children = types.NewOrderedMap()
    pfxs.EntityData.Children.Append("labeled-pfxs-aggr", types.YChild{"LabeledPfxsAggr", &pfxs.LabeledPfxsAggr})
    pfxs.EntityData.Children.Append("labeled-pfxs-primary", types.YChild{"LabeledPfxsPrimary", &pfxs.LabeledPfxsPrimary})
    pfxs.EntityData.Children.Append("labeled-pfxs-backup", types.YChild{"LabeledPfxsBackup", &pfxs.LabeledPfxsBackup})
    pfxs.EntityData.Leafs = types.NewOrderedMap()
    pfxs.EntityData.Leafs.Append("total-pfxs", types.YLeaf{"TotalPfxs", pfxs.TotalPfxs})
    pfxs.EntityData.Leafs.Append("ecmp-pfxs", types.YLeaf{"EcmpPfxs", pfxs.EcmpPfxs})
    pfxs.EntityData.Leafs.Append("protected-pfxs", types.YLeaf{"ProtectedPfxs", pfxs.ProtectedPfxs})

    pfxs.EntityData.YListKeys = []string {}

    return &(pfxs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr
// Labeled prefix count for all paths
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsAggr *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsAggr) GetEntityData() *types.CommonEntityData {
    labeledPfxsAggr.EntityData.YFilter = labeledPfxsAggr.YFilter
    labeledPfxsAggr.EntityData.YangName = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsAggr.EntityData.ParentYangName = "pfxs"
    labeledPfxsAggr.EntityData.SegmentPath = "labeled-pfxs-aggr"
    labeledPfxsAggr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsAggr.EntityData.SegmentPath
    labeledPfxsAggr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsAggr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsAggr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsAggr.EntityData.Children = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsAggr.LabeledPfxs})
    labeledPfxsAggr.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsAggr.LabeledPfxsPartial})
    labeledPfxsAggr.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsAggr.UnlabeledPfxs})

    labeledPfxsAggr.EntityData.YListKeys = []string {}

    return &(labeledPfxsAggr.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary
// Labeled prefix count related to primary paths
// only
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsPrimary *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsPrimary) GetEntityData() *types.CommonEntityData {
    labeledPfxsPrimary.EntityData.YFilter = labeledPfxsPrimary.YFilter
    labeledPfxsPrimary.EntityData.YangName = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsPrimary.EntityData.ParentYangName = "pfxs"
    labeledPfxsPrimary.EntityData.SegmentPath = "labeled-pfxs-primary"
    labeledPfxsPrimary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsPrimary.EntityData.SegmentPath
    labeledPfxsPrimary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsPrimary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsPrimary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsPrimary.EntityData.Children = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsPrimary.LabeledPfxs})
    labeledPfxsPrimary.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsPrimary.LabeledPfxsPartial})
    labeledPfxsPrimary.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsPrimary.UnlabeledPfxs})

    labeledPfxsPrimary.EntityData.YListKeys = []string {}

    return &(labeledPfxsPrimary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup
// Labeled prefix count related to backup paths
// only
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of labeled prefixes with 1 or more paths labeled. The type is
    // interface{} with range: 0..65535.
    LabeledPfxs interface{}

    // Count of labeled prefixes with some (but not ALL) paths labeled. The type
    // is interface{} with range: 0..65535.
    LabeledPfxsPartial interface{}

    // Count of labeled prefixes with ALL paths unlabeled. The type is interface{}
    // with range: 0..65535.
    UnlabeledPfxs interface{}
}

func (labeledPfxsBackup *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Pfxs_LabeledPfxsBackup) GetEntityData() *types.CommonEntityData {
    labeledPfxsBackup.EntityData.YFilter = labeledPfxsBackup.YFilter
    labeledPfxsBackup.EntityData.YangName = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.BundleName = "cisco_ios_xr"
    labeledPfxsBackup.EntityData.ParentYangName = "pfxs"
    labeledPfxsBackup.EntityData.SegmentPath = "labeled-pfxs-backup"
    labeledPfxsBackup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/rws/pfxs/" + labeledPfxsBackup.EntityData.SegmentPath
    labeledPfxsBackup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labeledPfxsBackup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labeledPfxsBackup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labeledPfxsBackup.EntityData.Children = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs = types.NewOrderedMap()
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs", types.YLeaf{"LabeledPfxs", labeledPfxsBackup.LabeledPfxs})
    labeledPfxsBackup.EntityData.Leafs.Append("labeled-pfxs-partial", types.YLeaf{"LabeledPfxsPartial", labeledPfxsBackup.LabeledPfxsPartial})
    labeledPfxsBackup.EntityData.Leafs.Append("unlabeled-pfxs", types.YLeaf{"UnlabeledPfxs", labeledPfxsBackup.UnlabeledPfxs})

    labeledPfxsBackup.EntityData.YListKeys = []string {}

    return &(labeledPfxsBackup.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs
// Forwarding rewrites nexthops (paths) summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total path count. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Count of FRR protected paths. The type is interface{} with range:
    // 0..4294967295.
    ProtectedPaths interface{}

    // Count of non-primary backup paths. The type is interface{} with range:
    // 0..4294967295.
    BackupPaths interface{}

    // Count of non-primary remote backup paths. The type is interface{} with
    // range: 0..4294967295.
    RemoteBackupPaths interface{}

    // Count of all labeled paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledPaths interface{}

    // Count of labeled backup paths. The type is interface{} with range:
    // 0..4294967295.
    LabeledBackupPaths interface{}
}

func (nhs *MplsLdp_Nodes_Node_Vrfs_Vrf_Afs_Af_ForwardingSummary_Rws_Nhs) GetEntityData() *types.CommonEntityData {
    nhs.EntityData.YFilter = nhs.YFilter
    nhs.EntityData.YangName = "nhs"
    nhs.EntityData.BundleName = "cisco_ios_xr"
    nhs.EntityData.ParentYangName = "rws"
    nhs.EntityData.SegmentPath = "nhs"
    nhs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/afs/af/forwarding-summary/rws/" + nhs.EntityData.SegmentPath
    nhs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nhs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nhs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nhs.EntityData.Children = types.NewOrderedMap()
    nhs.EntityData.Leafs = types.NewOrderedMap()
    nhs.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", nhs.TotalPaths})
    nhs.EntityData.Leafs.Append("protected-paths", types.YLeaf{"ProtectedPaths", nhs.ProtectedPaths})
    nhs.EntityData.Leafs.Append("backup-paths", types.YLeaf{"BackupPaths", nhs.BackupPaths})
    nhs.EntityData.Leafs.Append("remote-backup-paths", types.YLeaf{"RemoteBackupPaths", nhs.RemoteBackupPaths})
    nhs.EntityData.Leafs.Append("labeled-paths", types.YLeaf{"LabeledPaths", nhs.LabeledPaths})
    nhs.EntityData.Leafs.Append("labeled-backup-paths", types.YLeaf{"LabeledBackupPaths", nhs.LabeledBackupPaths})

    nhs.EntityData.YListKeys = []string {}

    return &(nhs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs
// The LDP Neighbors (brief)
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief.
    NeighborBrief []*MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief
}

func (neighborBriefs *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs) GetEntityData() *types.CommonEntityData {
    neighborBriefs.EntityData.YFilter = neighborBriefs.YFilter
    neighborBriefs.EntityData.YangName = "neighbor-briefs"
    neighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    neighborBriefs.EntityData.ParentYangName = "vrf"
    neighborBriefs.EntityData.SegmentPath = "neighbor-briefs"
    neighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + neighborBriefs.EntityData.SegmentPath
    neighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBriefs.EntityData.Children = types.NewOrderedMap()
    neighborBriefs.EntityData.Children.Append("neighbor-brief", types.YChild{"NeighborBrief", nil})
    for i := range neighborBriefs.NeighborBrief {
        types.SetYListKey(neighborBriefs.NeighborBrief[i], i)
        neighborBriefs.EntityData.Children.Append(types.GetSegmentPath(neighborBriefs.NeighborBrief[i]), types.YChild{"NeighborBrief", neighborBriefs.NeighborBrief[i]})
    }
    neighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    neighborBriefs.EntityData.YListKeys = []string {}

    return &(neighborBriefs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief
// Brief information on a particular LDP neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // NSR readiness state. The type is ShowNsrState.
    NsrState interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    UpTimeSeconds interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf

    // Neighbor Brief AF Info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo.
    NbrBrAfInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
}

func (neighborBrief *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief) GetEntityData() *types.CommonEntityData {
    neighborBrief.EntityData.YFilter = neighborBrief.YFilter
    neighborBrief.EntityData.YangName = "neighbor-brief"
    neighborBrief.EntityData.BundleName = "cisco_ios_xr"
    neighborBrief.EntityData.ParentYangName = "neighbor-briefs"
    neighborBrief.EntityData.SegmentPath = "neighbor-brief" + types.AddNoKeyToken(neighborBrief)
    neighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-briefs/" + neighborBrief.EntityData.SegmentPath
    neighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborBrief.EntityData.Children = types.NewOrderedMap()
    neighborBrief.EntityData.Children.Append("vrf", types.YChild{"Vrf", &neighborBrief.Vrf})
    neighborBrief.EntityData.Children.Append("nbr-br-af-info", types.YChild{"NbrBrAfInfo", nil})
    for i := range neighborBrief.NbrBrAfInfo {
        types.SetYListKey(neighborBrief.NbrBrAfInfo[i], i)
        neighborBrief.EntityData.Children.Append(types.GetSegmentPath(neighborBrief.NbrBrAfInfo[i]), types.YChild{"NbrBrAfInfo", neighborBrief.NbrBrAfInfo[i]})
    }
    neighborBrief.EntityData.Leafs = types.NewOrderedMap()
    neighborBrief.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborBrief.LsrId})
    neighborBrief.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborBrief.LabelSpaceId})
    neighborBrief.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", neighborBrief.IsGracefulRestartable})
    neighborBrief.EntityData.Leafs.Append("nsr-state", types.YLeaf{"NsrState", neighborBrief.NsrState})
    neighborBrief.EntityData.Leafs.Append("up-time-seconds", types.YLeaf{"UpTimeSeconds", neighborBrief.UpTimeSeconds})

    neighborBrief.EntityData.YListKeys = []string {}

    return &(neighborBrief.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "neighbor-brief"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-briefs/neighbor-brief/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo
// Neighbor Brief AF Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Brief Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Number of neighbor discovery sources. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrDiscovery interface{}

    // Number of neighbor addresses. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrAddresses interface{}

    // Number of neighbor labels. The type is interface{} with range:
    // 0..4294967295.
    NumOfNbrLbl interface{}
}

func (nbrBrAfInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborBriefs_NeighborBrief_NbrBrAfInfo) GetEntityData() *types.CommonEntityData {
    nbrBrAfInfo.EntityData.YFilter = nbrBrAfInfo.YFilter
    nbrBrAfInfo.EntityData.YangName = "nbr-br-af-info"
    nbrBrAfInfo.EntityData.BundleName = "cisco_ios_xr"
    nbrBrAfInfo.EntityData.ParentYangName = "neighbor-brief"
    nbrBrAfInfo.EntityData.SegmentPath = "nbr-br-af-info" + types.AddNoKeyToken(nbrBrAfInfo)
    nbrBrAfInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-briefs/neighbor-brief/" + nbrBrAfInfo.EntityData.SegmentPath
    nbrBrAfInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nbrBrAfInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nbrBrAfInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nbrBrAfInfo.EntityData.Children = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs = types.NewOrderedMap()
    nbrBrAfInfo.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", nbrBrAfInfo.AddressFamily})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-discovery", types.YLeaf{"NumOfNbrDiscovery", nbrBrAfInfo.NumOfNbrDiscovery})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-addresses", types.YLeaf{"NumOfNbrAddresses", nbrBrAfInfo.NumOfNbrAddresses})
    nbrBrAfInfo.EntityData.Leafs.Append("num-of-nbr-lbl", types.YLeaf{"NumOfNbrLbl", nbrBrAfInfo.NumOfNbrLbl})

    nbrBrAfInfo.EntityData.YListKeys = []string {}

    return &(nbrBrAfInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_BackoffParameters
// The LDP Backoff Parameters
type MplsLdp_Nodes_Node_Vrfs_Vrf_BackoffParameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Initial backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    InitialSeconds interface{}

    // Maximum backoff value in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    MaximumSeconds interface{}
}

func (backoffParameters *MplsLdp_Nodes_Node_Vrfs_Vrf_BackoffParameters) GetEntityData() *types.CommonEntityData {
    backoffParameters.EntityData.YFilter = backoffParameters.YFilter
    backoffParameters.EntityData.YangName = "backoff-parameters"
    backoffParameters.EntityData.BundleName = "cisco_ios_xr"
    backoffParameters.EntityData.ParentYangName = "vrf"
    backoffParameters.EntityData.SegmentPath = "backoff-parameters"
    backoffParameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + backoffParameters.EntityData.SegmentPath
    backoffParameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffParameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffParameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffParameters.EntityData.Children = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs = types.NewOrderedMap()
    backoffParameters.EntityData.Leafs.Append("initial-seconds", types.YLeaf{"InitialSeconds", backoffParameters.InitialSeconds})
    backoffParameters.EntityData.Leafs.Append("maximum-seconds", types.YLeaf{"MaximumSeconds", backoffParameters.MaximumSeconds})

    backoffParameters.EntityData.YListKeys = []string {}

    return &(backoffParameters.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs
// The LDP backoff
type MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP Backoff Information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs_Backoff.
    Backoff []*MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs_Backoff
}

func (backoffs *MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs) GetEntityData() *types.CommonEntityData {
    backoffs.EntityData.YFilter = backoffs.YFilter
    backoffs.EntityData.YangName = "backoffs"
    backoffs.EntityData.BundleName = "cisco_ios_xr"
    backoffs.EntityData.ParentYangName = "vrf"
    backoffs.EntityData.SegmentPath = "backoffs"
    backoffs.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + backoffs.EntityData.SegmentPath
    backoffs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoffs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoffs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoffs.EntityData.Children = types.NewOrderedMap()
    backoffs.EntityData.Children.Append("backoff", types.YChild{"Backoff", nil})
    for i := range backoffs.Backoff {
        types.SetYListKey(backoffs.Backoff[i], i)
        backoffs.EntityData.Children.Append(types.GetSegmentPath(backoffs.Backoff[i]), types.YChild{"Backoff", backoffs.Backoff[i]})
    }
    backoffs.EntityData.Leafs = types.NewOrderedMap()

    backoffs.EntityData.YListKeys = []string {}

    return &(backoffs.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs_Backoff
// LDP Backoff Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs_Backoff struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Backoff seconds. The type is interface{} with range: 0..4294967295. Units
    // are second.
    BackoffSeconds interface{}

    // Backoff waiting seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    WaitingSeconds interface{}
}

func (backoff *MplsLdp_Nodes_Node_Vrfs_Vrf_Backoffs_Backoff) GetEntityData() *types.CommonEntityData {
    backoff.EntityData.YFilter = backoff.YFilter
    backoff.EntityData.YangName = "backoff"
    backoff.EntityData.BundleName = "cisco_ios_xr"
    backoff.EntityData.ParentYangName = "backoffs"
    backoff.EntityData.SegmentPath = "backoff" + types.AddNoKeyToken(backoff)
    backoff.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/backoffs/" + backoff.EntityData.SegmentPath
    backoff.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    backoff.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    backoff.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    backoff.EntityData.Children = types.NewOrderedMap()
    backoff.EntityData.Leafs = types.NewOrderedMap()
    backoff.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", backoff.LsrId})
    backoff.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", backoff.LabelSpaceId})
    backoff.EntityData.Leafs.Append("backoff-seconds", types.YLeaf{"BackoffSeconds", backoff.BackoffSeconds})
    backoff.EntityData.Leafs.Append("waiting-seconds", types.YLeaf{"WaitingSeconds", backoff.WaitingSeconds})

    backoff.EntityData.YListKeys = []string {}

    return &(backoff.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr
// LDP NSR related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Pending related information.
    NsrPending MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending

    // LDP HA Summary.
    HaSummary MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics
}

func (nsr *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "vrf"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("nsr-pending", types.YChild{"NsrPending", &nsr.NsrPending})
    nsr.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &nsr.HaSummary})
    nsr.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &nsr.HaStatistics})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending
// LDP NSR Pending related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
}

func (nsrPending *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending) GetEntityData() *types.CommonEntityData {
    nsrPending.EntityData.YFilter = nsrPending.YFilter
    nsrPending.EntityData.YangName = "nsr-pending"
    nsrPending.EntityData.BundleName = "cisco_ios_xr"
    nsrPending.EntityData.ParentYangName = "nsr"
    nsrPending.EntityData.SegmentPath = "nsr-pending"
    nsrPending.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/" + nsrPending.EntityData.SegmentPath
    nsrPending.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrPending.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrPending.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrPending.EntityData.Children = types.NewOrderedMap()
    nsrPending.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &nsrPending.HaNeighbors})
    nsrPending.EntityData.Leafs = types.NewOrderedMap()

    nsrPending.EntityData.YListKeys = []string {}

    return &(nsrPending.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "nsr-pending"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/nsr-pending/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/nsr-pending/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_NsrPending_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/nsr-pending/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary
// LDP HA Summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Sessions
}

func (haSummary *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "nsr"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Sessions
// Session summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "nsr"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Nsr_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/nsr/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters
// LDP parameters
type MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is process role active or standby. The type is bool.
    RoleIsActive interface{}

    // Global MD5 password enabled. The type is bool.
    GlobalMd5PasswordEnabled interface{}

    // Protocol version. The type is interface{} with range: 0..4294967295.
    ProtocolVersion interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Keepalive interval. The type is interface{} with range: 0..4294967295.
    KeepaliveInterval interface{}

    // Hello hold time. The type is interface{} with range: 0..4294967295.
    HelloHoldTime interface{}

    // Hello interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Targeted hello hold time. The type is interface{} with range:
    // 0..4294967295.
    TargetedHelloHoldTime interface{}

    // Targeted hello interval. The type is interface{} with range: 0..4294967295.
    TargetedHelloInterval interface{}

    // Session hold time. The type is interface{} with range: 0..4294967295.
    SessionHoldTime interface{}

    // Housekeeping periodic timer interval. The type is interface{} with range:
    // 0..4294967295.
    HousekeepingTimerInterval interface{}

    // LIB entry no route timeout. The type is interface{} with range:
    // 0..4294967295.
    LeNoRouteTimeout interface{}

    // LDP recovery timeout with LSD. The type is interface{} with range:
    // 0..4294967295.
    LdpRecoveryTimeout interface{}

    // Delay (sec) in Binding Withdrawal for an Address Family. The type is
    // interface{} with range: 0..4294967295.
    AfBindingWithdrawDelay interface{}

    // Maximum number of LDP enabled attached interfaces. The type is interface{}
    // with range: 0..4294967295.
    MaxIntfAttached interface{}

    // Maximum number of LDP enabled TE interfaces. The type is interface{} with
    // range: 0..4294967295.
    MaxIntfTe interface{}

    // Maximum number of LDP peers. The type is interface{} with range:
    // 0..4294967295.
    MaxPeer interface{}

    // LDP Out of memory state. The type is interface{} with range: 0..4294967295.
    LdpOutOfMemState interface{}

    // TRUE if NSR is enabled. The type is bool.
    NsrEnabled interface{}

    // TRUE if LDP is standby and is NSR Sync-ed with active. The type is bool.
    NsrSynced interface{}

    // Interface IGP sync delay time in seconds. The type is interface{} with
    // range: 0..4294967295. Units are second.
    IgpSyncDelayTimeForInterface interface{}

    // IGP sync delay time on process restart in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    IgpSyncDelayTimeOnRestart interface{}

    // Discovery quick-start globally disabled. The type is bool.
    GlobalDiscoveryQuickStartDisabled interface{}

    // Discovery quick-start disabled on some LDP-enabled interfaces. The type is
    // bool.
    DiscoveryQuickStartDisabledOnInterfaces interface{}

    // Graceful restart information.
    GracefulRestartInformation MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_GracefulRestartInformation

    // Per AF parameters. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter.
    AddressFamilyParameter []*MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter
}

func (parameters *MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters) GetEntityData() *types.CommonEntityData {
    parameters.EntityData.YFilter = parameters.YFilter
    parameters.EntityData.YangName = "parameters"
    parameters.EntityData.BundleName = "cisco_ios_xr"
    parameters.EntityData.ParentYangName = "vrf"
    parameters.EntityData.SegmentPath = "parameters"
    parameters.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + parameters.EntityData.SegmentPath
    parameters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    parameters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    parameters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    parameters.EntityData.Children = types.NewOrderedMap()
    parameters.EntityData.Children.Append("graceful-restart-information", types.YChild{"GracefulRestartInformation", &parameters.GracefulRestartInformation})
    parameters.EntityData.Children.Append("address-family-parameter", types.YChild{"AddressFamilyParameter", nil})
    for i := range parameters.AddressFamilyParameter {
        types.SetYListKey(parameters.AddressFamilyParameter[i], i)
        parameters.EntityData.Children.Append(types.GetSegmentPath(parameters.AddressFamilyParameter[i]), types.YChild{"AddressFamilyParameter", parameters.AddressFamilyParameter[i]})
    }
    parameters.EntityData.Leafs = types.NewOrderedMap()
    parameters.EntityData.Leafs.Append("role-is-active", types.YLeaf{"RoleIsActive", parameters.RoleIsActive})
    parameters.EntityData.Leafs.Append("global-md5-password-enabled", types.YLeaf{"GlobalMd5PasswordEnabled", parameters.GlobalMd5PasswordEnabled})
    parameters.EntityData.Leafs.Append("protocol-version", types.YLeaf{"ProtocolVersion", parameters.ProtocolVersion})
    parameters.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", parameters.RouterId})
    parameters.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", parameters.KeepaliveInterval})
    parameters.EntityData.Leafs.Append("hello-hold-time", types.YLeaf{"HelloHoldTime", parameters.HelloHoldTime})
    parameters.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", parameters.HelloInterval})
    parameters.EntityData.Leafs.Append("targeted-hello-hold-time", types.YLeaf{"TargetedHelloHoldTime", parameters.TargetedHelloHoldTime})
    parameters.EntityData.Leafs.Append("targeted-hello-interval", types.YLeaf{"TargetedHelloInterval", parameters.TargetedHelloInterval})
    parameters.EntityData.Leafs.Append("session-hold-time", types.YLeaf{"SessionHoldTime", parameters.SessionHoldTime})
    parameters.EntityData.Leafs.Append("housekeeping-timer-interval", types.YLeaf{"HousekeepingTimerInterval", parameters.HousekeepingTimerInterval})
    parameters.EntityData.Leafs.Append("le-no-route-timeout", types.YLeaf{"LeNoRouteTimeout", parameters.LeNoRouteTimeout})
    parameters.EntityData.Leafs.Append("ldp-recovery-timeout", types.YLeaf{"LdpRecoveryTimeout", parameters.LdpRecoveryTimeout})
    parameters.EntityData.Leafs.Append("af-binding-withdraw-delay", types.YLeaf{"AfBindingWithdrawDelay", parameters.AfBindingWithdrawDelay})
    parameters.EntityData.Leafs.Append("max-intf-attached", types.YLeaf{"MaxIntfAttached", parameters.MaxIntfAttached})
    parameters.EntityData.Leafs.Append("max-intf-te", types.YLeaf{"MaxIntfTe", parameters.MaxIntfTe})
    parameters.EntityData.Leafs.Append("max-peer", types.YLeaf{"MaxPeer", parameters.MaxPeer})
    parameters.EntityData.Leafs.Append("ldp-out-of-mem-state", types.YLeaf{"LdpOutOfMemState", parameters.LdpOutOfMemState})
    parameters.EntityData.Leafs.Append("nsr-enabled", types.YLeaf{"NsrEnabled", parameters.NsrEnabled})
    parameters.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", parameters.NsrSynced})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-for-interface", types.YLeaf{"IgpSyncDelayTimeForInterface", parameters.IgpSyncDelayTimeForInterface})
    parameters.EntityData.Leafs.Append("igp-sync-delay-time-on-restart", types.YLeaf{"IgpSyncDelayTimeOnRestart", parameters.IgpSyncDelayTimeOnRestart})
    parameters.EntityData.Leafs.Append("global-discovery-quick-start-disabled", types.YLeaf{"GlobalDiscoveryQuickStartDisabled", parameters.GlobalDiscoveryQuickStartDisabled})
    parameters.EntityData.Leafs.Append("discovery-quick-start-disabled-on-interfaces", types.YLeaf{"DiscoveryQuickStartDisabledOnInterfaces", parameters.DiscoveryQuickStartDisabledOnInterfaces})

    parameters.EntityData.YListKeys = []string {}

    return &(parameters.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_GracefulRestartInformation
// Graceful restart information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_GracefulRestartInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restart configured. The type is bool.
    IsGracefulRestartConfigured interface{}

    // Reconnect timeout value. The type is interface{} with range: 0..4294967295.
    GracefulRestartReconnectTimeout interface{}

    // Graceful restart forward state hold time. The type is interface{} with
    // range: 0..4294967295.
    GracefulRestartForwardingStateHoldTime interface{}
}

func (gracefulRestartInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_GracefulRestartInformation) GetEntityData() *types.CommonEntityData {
    gracefulRestartInformation.EntityData.YFilter = gracefulRestartInformation.YFilter
    gracefulRestartInformation.EntityData.YangName = "graceful-restart-information"
    gracefulRestartInformation.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestartInformation.EntityData.ParentYangName = "parameters"
    gracefulRestartInformation.EntityData.SegmentPath = "graceful-restart-information"
    gracefulRestartInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/parameters/" + gracefulRestartInformation.EntityData.SegmentPath
    gracefulRestartInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestartInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestartInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestartInformation.EntityData.Children = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestartInformation.EntityData.Leafs.Append("is-graceful-restart-configured", types.YLeaf{"IsGracefulRestartConfigured", gracefulRestartInformation.IsGracefulRestartConfigured})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-reconnect-timeout", types.YLeaf{"GracefulRestartReconnectTimeout", gracefulRestartInformation.GracefulRestartReconnectTimeout})
    gracefulRestartInformation.EntityData.Leafs.Append("graceful-restart-forwarding-state-hold-time", types.YLeaf{"GracefulRestartForwardingStateHoldTime", gracefulRestartInformation.GracefulRestartForwardingStateHoldTime})

    gracefulRestartInformation.EntityData.YListKeys = []string {}

    return &(gracefulRestartInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter
// Per AF parameters
type MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Address Family. The type is LdpAf.
    AddressFamily interface{}

    // Null label. The type is string.
    NullLabel interface{}

    // ACL to override local label to use implicit-null. The type is string.
    LabelImpNullOverrideAcl interface{}

    // Accepting targeted Hellos. The type is bool.
    IsAcceptingTargetedHellos interface{}

    // Targeted Hello ACL. The type is string.
    TargetedHelloAcl interface{}

    // Discovery transport address.
    DiscoveryTransportAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
}

func (addressFamilyParameter *MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter) GetEntityData() *types.CommonEntityData {
    addressFamilyParameter.EntityData.YFilter = addressFamilyParameter.YFilter
    addressFamilyParameter.EntityData.YangName = "address-family-parameter"
    addressFamilyParameter.EntityData.BundleName = "cisco_ios_xr"
    addressFamilyParameter.EntityData.ParentYangName = "parameters"
    addressFamilyParameter.EntityData.SegmentPath = "address-family-parameter" + types.AddNoKeyToken(addressFamilyParameter)
    addressFamilyParameter.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/parameters/" + addressFamilyParameter.EntityData.SegmentPath
    addressFamilyParameter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    addressFamilyParameter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    addressFamilyParameter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    addressFamilyParameter.EntityData.Children = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Children.Append("discovery-transport-address", types.YChild{"DiscoveryTransportAddress", &addressFamilyParameter.DiscoveryTransportAddress})
    addressFamilyParameter.EntityData.Leafs = types.NewOrderedMap()
    addressFamilyParameter.EntityData.Leafs.Append("address-family", types.YLeaf{"AddressFamily", addressFamilyParameter.AddressFamily})
    addressFamilyParameter.EntityData.Leafs.Append("null-label", types.YLeaf{"NullLabel", addressFamilyParameter.NullLabel})
    addressFamilyParameter.EntityData.Leafs.Append("label-imp-null-override-acl", types.YLeaf{"LabelImpNullOverrideAcl", addressFamilyParameter.LabelImpNullOverrideAcl})
    addressFamilyParameter.EntityData.Leafs.Append("is-accepting-targeted-hellos", types.YLeaf{"IsAcceptingTargetedHellos", addressFamilyParameter.IsAcceptingTargetedHellos})
    addressFamilyParameter.EntityData.Leafs.Append("targeted-hello-acl", types.YLeaf{"TargetedHelloAcl", addressFamilyParameter.TargetedHelloAcl})

    addressFamilyParameter.EntityData.YListKeys = []string {}

    return &(addressFamilyParameter.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress
// Discovery transport address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (discoveryTransportAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Parameters_AddressFamilyParameter_DiscoveryTransportAddress) GetEntityData() *types.CommonEntityData {
    discoveryTransportAddress.EntityData.YFilter = discoveryTransportAddress.YFilter
    discoveryTransportAddress.EntityData.YangName = "discovery-transport-address"
    discoveryTransportAddress.EntityData.BundleName = "cisco_ios_xr"
    discoveryTransportAddress.EntityData.ParentYangName = "address-family-parameter"
    discoveryTransportAddress.EntityData.SegmentPath = "discovery-transport-address"
    discoveryTransportAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/parameters/address-family-parameter/" + discoveryTransportAddress.EntityData.SegmentPath
    discoveryTransportAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoveryTransportAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoveryTransportAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoveryTransportAddress.EntityData.Children = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs = types.NewOrderedMap()
    discoveryTransportAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", discoveryTransportAddress.Afi})
    discoveryTransportAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", discoveryTransportAddress.Dummy})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", discoveryTransportAddress.Ipv4})
    discoveryTransportAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", discoveryTransportAddress.Ipv6})

    discoveryTransportAddress.EntityData.YListKeys = []string {}

    return &(discoveryTransportAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu
// LDP ISSU related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP HA Summary.
    HaSummary MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary

    // LDP NSR Statistics related information.
    HaStatistics MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics
}

func (issu *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "vrf"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("ha-summary", types.YChild{"HaSummary", &issu.HaSummary})
    issu.EntityData.Children.Append("ha-statistics", types.YChild{"HaStatistics", &issu.HaStatistics})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary
// LDP HA Summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF information.
    Vrf MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Vrf

    // Session summary.
    Sessions MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Sessions
}

func (haSummary *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary) GetEntityData() *types.CommonEntityData {
    haSummary.EntityData.YFilter = haSummary.YFilter
    haSummary.EntityData.YangName = "ha-summary"
    haSummary.EntityData.BundleName = "cisco_ios_xr"
    haSummary.EntityData.ParentYangName = "issu"
    haSummary.EntityData.SegmentPath = "ha-summary"
    haSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/" + haSummary.EntityData.SegmentPath
    haSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haSummary.EntityData.Children = types.NewOrderedMap()
    haSummary.EntityData.Children.Append("vrf", types.YChild{"Vrf", &haSummary.Vrf})
    haSummary.EntityData.Children.Append("sessions", types.YChild{"Sessions", &haSummary.Sessions})
    haSummary.EntityData.Leafs = types.NewOrderedMap()

    haSummary.EntityData.YListKeys = []string {}

    return &(haSummary.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Vrf
// VRF information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "ha-summary"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-summary/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Sessions
// Session summary
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Sessions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total sessions. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // NSR eligible sessions. The type is interface{} with range: 0..4294967295.
    NsrEligible interface{}

    // Number of sessions in NSR none state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateNone interface{}

    // Number of sessions in NSR wait state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateWait interface{}

    // Number of sessions in NSR ready state. The type is interface{} with range:
    // 0..4294967295.
    NsrStateReady interface{}

    // Number of sessions in NSR prepare state. The type is interface{} with
    // range: 0..4294967295.
    NsrStatePrepare interface{}

    // Number of sessions in NSR app-wait state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateAppWait interface{}

    // Number of sessions in NSR operational state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateOperational interface{}

    // Number of sessions in NSR TCP phase 1 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase1 interface{}

    // Number of sessions in NSR TCP phase 2 state. The type is interface{} with
    // range: 0..4294967295.
    NsrStateTcpPhase2 interface{}
}

func (sessions *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaSummary_Sessions) GetEntityData() *types.CommonEntityData {
    sessions.EntityData.YFilter = sessions.YFilter
    sessions.EntityData.YangName = "sessions"
    sessions.EntityData.BundleName = "cisco_ios_xr"
    sessions.EntityData.ParentYangName = "ha-summary"
    sessions.EntityData.SegmentPath = "sessions"
    sessions.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-summary/" + sessions.EntityData.SegmentPath
    sessions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessions.EntityData.Children = types.NewOrderedMap()
    sessions.EntityData.Leafs = types.NewOrderedMap()
    sessions.EntityData.Leafs.Append("total", types.YLeaf{"Total", sessions.Total})
    sessions.EntityData.Leafs.Append("nsr-eligible", types.YLeaf{"NsrEligible", sessions.NsrEligible})
    sessions.EntityData.Leafs.Append("nsr-state-none", types.YLeaf{"NsrStateNone", sessions.NsrStateNone})
    sessions.EntityData.Leafs.Append("nsr-state-wait", types.YLeaf{"NsrStateWait", sessions.NsrStateWait})
    sessions.EntityData.Leafs.Append("nsr-state-ready", types.YLeaf{"NsrStateReady", sessions.NsrStateReady})
    sessions.EntityData.Leafs.Append("nsr-state-prepare", types.YLeaf{"NsrStatePrepare", sessions.NsrStatePrepare})
    sessions.EntityData.Leafs.Append("nsr-state-app-wait", types.YLeaf{"NsrStateAppWait", sessions.NsrStateAppWait})
    sessions.EntityData.Leafs.Append("nsr-state-operational", types.YLeaf{"NsrStateOperational", sessions.NsrStateOperational})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase1", types.YLeaf{"NsrStateTcpPhase1", sessions.NsrStateTcpPhase1})
    sessions.EntityData.Leafs.Append("nsr-state-tcp-phase2", types.YLeaf{"NsrStateTcpPhase2", sessions.NsrStateTcpPhase2})

    sessions.EntityData.YListKeys = []string {}

    return &(sessions.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics
// LDP NSR Statistics related information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LDP NSR Global Statistics information.
    HaGlobal MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal

    // The LDP HA Neighbors.
    HaNeighbors MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
}

func (haStatistics *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics) GetEntityData() *types.CommonEntityData {
    haStatistics.EntityData.YFilter = haStatistics.YFilter
    haStatistics.EntityData.YangName = "ha-statistics"
    haStatistics.EntityData.BundleName = "cisco_ios_xr"
    haStatistics.EntityData.ParentYangName = "issu"
    haStatistics.EntityData.SegmentPath = "ha-statistics"
    haStatistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/" + haStatistics.EntityData.SegmentPath
    haStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haStatistics.EntityData.Children = types.NewOrderedMap()
    haStatistics.EntityData.Children.Append("ha-global", types.YChild{"HaGlobal", &haStatistics.HaGlobal})
    haStatistics.EntityData.Children.Append("ha-neighbors", types.YChild{"HaNeighbors", &haStatistics.HaNeighbors})
    haStatistics.EntityData.Leafs = types.NewOrderedMap()

    haStatistics.EntityData.YListKeys = []string {}

    return &(haStatistics.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal
// LDP NSR Global Statistics information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync.
    InitSync MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
}

func (haGlobal *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal) GetEntityData() *types.CommonEntityData {
    haGlobal.EntityData.YFilter = haGlobal.YFilter
    haGlobal.EntityData.YangName = "ha-global"
    haGlobal.EntityData.BundleName = "cisco_ios_xr"
    haGlobal.EntityData.ParentYangName = "ha-statistics"
    haGlobal.EntityData.SegmentPath = "ha-global"
    haGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/" + haGlobal.EntityData.SegmentPath
    haGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haGlobal.EntityData.Children = types.NewOrderedMap()
    haGlobal.EntityData.Children.Append("init-sync", types.YChild{"InitSync", &haGlobal.InitSync})
    haGlobal.EntityData.Leafs = types.NewOrderedMap()

    haGlobal.EntityData.YListKeys = []string {}

    return &(haGlobal.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync
// Init Sync
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE if NSR configured. The type is bool.
    NsrCfged interface{}

    // TRUE if NSR synced. The type is bool.
    NsrSynced interface{}

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of Peers. The type is interface{} with range: 0..4294967295.
    NumPeers interface{}

    // Number of Sent Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Number of Rcvd Capabilities objects. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of binding prefixes. The type is interface{} with range:
    // 0..4294967295.
    NumPfx interface{}

    // Number of label bindings. The type is interface{} with range:
    // 0..4294967295.
    NumLbl interface{}

    // Num of lcl address withdraw. The type is interface{} with range:
    // 0..4294967295.
    NumLclAddrWd interface{}

    // Num of lbl adv. The type is interface{} with range: 0..4294967295.
    NumLblAdv interface{}

    // num IPC msgs sent. The type is interface{} with range: 0..4294967295.
    IpcMsgTxCnt interface{}

    // total IPC bytes sent. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMsgTxBytes interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxCnt interface{}

    // num IPC msgs rxed. The type is interface{} with range: 0..4294967295.
    IpcMsgRxBytes interface{}

    // biggest IPC TX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxTxBatchBytes interface{}

    // biggest IPC RX bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcMaxRxBatchBytes interface{}

    // number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    IpcTxFailCnt interface{}

    // total number of ipc send failures. The type is interface{} with range:
    // 0..4294967295.
    TotalIpcTxFailCnt interface{}

    // number of times ipc has been restarted. The type is interface{} with range:
    // 0..4294967295.
    IpcRestartCnt interface{}

    // default IPC MTU bytes. The type is interface{} with range: 0..4294967295.
    // Units are byte.
    IpcDefaultMtu interface{}

    // ipc exceeded mtu msg cnt. The type is interface{} with range:
    // 0..4294967295.
    IpcExceededMtuMsgCnt interface{}
}

func (initSync *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaGlobal_InitSync) GetEntityData() *types.CommonEntityData {
    initSync.EntityData.YFilter = initSync.YFilter
    initSync.EntityData.YangName = "init-sync"
    initSync.EntityData.BundleName = "cisco_ios_xr"
    initSync.EntityData.ParentYangName = "ha-global"
    initSync.EntityData.SegmentPath = "init-sync"
    initSync.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/ha-global/" + initSync.EntityData.SegmentPath
    initSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSync.EntityData.Children = types.NewOrderedMap()
    initSync.EntityData.Leafs = types.NewOrderedMap()
    initSync.EntityData.Leafs.Append("nsr-cfged", types.YLeaf{"NsrCfged", initSync.NsrCfged})
    initSync.EntityData.Leafs.Append("nsr-synced", types.YLeaf{"NsrSynced", initSync.NsrSynced})
    initSync.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSync.InitSyncStart})
    initSync.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSync.InitSyncEnd})
    initSync.EntityData.Leafs.Append("num-peers", types.YLeaf{"NumPeers", initSync.NumPeers})
    initSync.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSync.NumCapSent})
    initSync.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSync.NumCapRcvd})
    initSync.EntityData.Leafs.Append("num-pfx", types.YLeaf{"NumPfx", initSync.NumPfx})
    initSync.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSync.NumLbl})
    initSync.EntityData.Leafs.Append("num-lcl-addr-wd", types.YLeaf{"NumLclAddrWd", initSync.NumLclAddrWd})
    initSync.EntityData.Leafs.Append("num-lbl-adv", types.YLeaf{"NumLblAdv", initSync.NumLblAdv})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-cnt", types.YLeaf{"IpcMsgTxCnt", initSync.IpcMsgTxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-tx-bytes", types.YLeaf{"IpcMsgTxBytes", initSync.IpcMsgTxBytes})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-cnt", types.YLeaf{"IpcMsgRxCnt", initSync.IpcMsgRxCnt})
    initSync.EntityData.Leafs.Append("ipc-msg-rx-bytes", types.YLeaf{"IpcMsgRxBytes", initSync.IpcMsgRxBytes})
    initSync.EntityData.Leafs.Append("ipc-max-tx-batch-bytes", types.YLeaf{"IpcMaxTxBatchBytes", initSync.IpcMaxTxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-max-rx-batch-bytes", types.YLeaf{"IpcMaxRxBatchBytes", initSync.IpcMaxRxBatchBytes})
    initSync.EntityData.Leafs.Append("ipc-tx-fail-cnt", types.YLeaf{"IpcTxFailCnt", initSync.IpcTxFailCnt})
    initSync.EntityData.Leafs.Append("total-ipc-tx-fail-cnt", types.YLeaf{"TotalIpcTxFailCnt", initSync.TotalIpcTxFailCnt})
    initSync.EntityData.Leafs.Append("ipc-restart-cnt", types.YLeaf{"IpcRestartCnt", initSync.IpcRestartCnt})
    initSync.EntityData.Leafs.Append("ipc-default-mtu", types.YLeaf{"IpcDefaultMtu", initSync.IpcDefaultMtu})
    initSync.EntityData.Leafs.Append("ipc-exceeded-mtu-msg-cnt", types.YLeaf{"IpcExceededMtuMsgCnt", initSync.IpcExceededMtuMsgCnt})

    initSync.EntityData.YListKeys = []string {}

    return &(initSync.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors
// The LDP HA Neighbors
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP HA neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor.
    HaNeighbor []*MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
}

func (haNeighbors *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors) GetEntityData() *types.CommonEntityData {
    haNeighbors.EntityData.YFilter = haNeighbors.YFilter
    haNeighbors.EntityData.YangName = "ha-neighbors"
    haNeighbors.EntityData.BundleName = "cisco_ios_xr"
    haNeighbors.EntityData.ParentYangName = "ha-statistics"
    haNeighbors.EntityData.SegmentPath = "ha-neighbors"
    haNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/" + haNeighbors.EntityData.SegmentPath
    haNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbors.EntityData.Children = types.NewOrderedMap()
    haNeighbors.EntityData.Children.Append("ha-neighbor", types.YChild{"HaNeighbor", nil})
    for i := range haNeighbors.HaNeighbor {
        types.SetYListKey(haNeighbors.HaNeighbor[i], i)
        haNeighbors.EntityData.Children.Append(types.GetSegmentPath(haNeighbors.HaNeighbor[i]), types.YChild{"HaNeighbor", haNeighbors.HaNeighbor[i]})
    }
    haNeighbors.EntityData.Leafs = types.NewOrderedMap()

    haNeighbors.EntityData.YListKeys = []string {}

    return &(haNeighbors.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor
// Information on a particular LDP HA neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // lsr id xr. The type is interface{} with range: 0..4294967295.
    LsrIdXr interface{}

    // lbl spc id. The type is interface{} with range: 0..65535.
    LblSpcId interface{}

    // nsr sync state. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrSyncState interface{}

    // Number of sync messages. The type is interface{} with range: 0..4294967295.
    NumMsg interface{}

    // NSR Init Sync Info.
    InitSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo

    // NSR Steady State Sync Info.
    SteadyStateSyncInfo MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
}

func (haNeighbor *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor) GetEntityData() *types.CommonEntityData {
    haNeighbor.EntityData.YFilter = haNeighbor.YFilter
    haNeighbor.EntityData.YangName = "ha-neighbor"
    haNeighbor.EntityData.BundleName = "cisco_ios_xr"
    haNeighbor.EntityData.ParentYangName = "ha-neighbors"
    haNeighbor.EntityData.SegmentPath = "ha-neighbor" + types.AddNoKeyToken(haNeighbor)
    haNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/ha-neighbors/" + haNeighbor.EntityData.SegmentPath
    haNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    haNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    haNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    haNeighbor.EntityData.Children = types.NewOrderedMap()
    haNeighbor.EntityData.Children.Append("init-sync-info", types.YChild{"InitSyncInfo", &haNeighbor.InitSyncInfo})
    haNeighbor.EntityData.Children.Append("steady-state-sync-info", types.YChild{"SteadyStateSyncInfo", &haNeighbor.SteadyStateSyncInfo})
    haNeighbor.EntityData.Leafs = types.NewOrderedMap()
    haNeighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", haNeighbor.LsrId})
    haNeighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", haNeighbor.LabelSpaceId})
    haNeighbor.EntityData.Leafs.Append("lsr-id-xr", types.YLeaf{"LsrIdXr", haNeighbor.LsrIdXr})
    haNeighbor.EntityData.Leafs.Append("lbl-spc-id", types.YLeaf{"LblSpcId", haNeighbor.LblSpcId})
    haNeighbor.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", haNeighbor.NsrSyncState})
    haNeighbor.EntityData.Leafs.Append("num-msg", types.YLeaf{"NumMsg", haNeighbor.NumMsg})

    haNeighbor.EntityData.YListKeys = []string {}

    return &(haNeighbor.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo
// NSR Init Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Init Sync Start Time. The type is interface{} with range: 0..4294967295.
    InitSyncStart interface{}

    // Init Sync End Time. The type is interface{} with range: 0..4294967295.
    InitSyncEnd interface{}

    // Number of peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumAddr interface{}

    // Number of duplicate peer addresses. The type is interface{} with range:
    // 0..4294967295.
    NumDuplicateAddr interface{}

    // Number of unprocessed Rx buffer bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumRxBytes interface{}

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of peer bindings. The type is interface{} with range: 0..4294967295.
    NumLbl interface{}

    // Number of external App data bytes. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    NumAppBytes interface{}
}

func (initSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_InitSyncInfo) GetEntityData() *types.CommonEntityData {
    initSyncInfo.EntityData.YFilter = initSyncInfo.YFilter
    initSyncInfo.EntityData.YangName = "init-sync-info"
    initSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    initSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    initSyncInfo.EntityData.SegmentPath = "init-sync-info"
    initSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + initSyncInfo.EntityData.SegmentPath
    initSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initSyncInfo.EntityData.Children = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    initSyncInfo.EntityData.Leafs.Append("init-sync-start", types.YLeaf{"InitSyncStart", initSyncInfo.InitSyncStart})
    initSyncInfo.EntityData.Leafs.Append("init-sync-end", types.YLeaf{"InitSyncEnd", initSyncInfo.InitSyncEnd})
    initSyncInfo.EntityData.Leafs.Append("num-addr", types.YLeaf{"NumAddr", initSyncInfo.NumAddr})
    initSyncInfo.EntityData.Leafs.Append("num-duplicate-addr", types.YLeaf{"NumDuplicateAddr", initSyncInfo.NumDuplicateAddr})
    initSyncInfo.EntityData.Leafs.Append("num-rx-bytes", types.YLeaf{"NumRxBytes", initSyncInfo.NumRxBytes})
    initSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", initSyncInfo.NumCapSent})
    initSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", initSyncInfo.NumCapRcvd})
    initSyncInfo.EntityData.Leafs.Append("num-lbl", types.YLeaf{"NumLbl", initSyncInfo.NumLbl})
    initSyncInfo.EntityData.Leafs.Append("num-app-bytes", types.YLeaf{"NumAppBytes", initSyncInfo.NumAppBytes})

    initSyncInfo.EntityData.YListKeys = []string {}

    return &(initSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo
// NSR Steady State Sync Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Num of Sent Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapSent interface{}

    // Num of Rcvd Capabilities. The type is interface{} with range:
    // 0..4294967295.
    NumCapRcvd interface{}

    // Number of remote label withdraw events. The type is interface{} with range:
    // 0..4294967295.
    RemLblWd interface{}

    // Number of remote label request events. The type is interface{} with range:
    // 0..4294967295.
    RemLblRq interface{}

    // Number of standby adj join. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjJoin interface{}

    // Number of standby adj leave. The type is interface{} with range:
    // 0..4294967295.
    NumStdbyAdjLeave interface{}
}

func (steadyStateSyncInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Issu_HaStatistics_HaNeighbors_HaNeighbor_SteadyStateSyncInfo) GetEntityData() *types.CommonEntityData {
    steadyStateSyncInfo.EntityData.YFilter = steadyStateSyncInfo.YFilter
    steadyStateSyncInfo.EntityData.YangName = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.BundleName = "cisco_ios_xr"
    steadyStateSyncInfo.EntityData.ParentYangName = "ha-neighbor"
    steadyStateSyncInfo.EntityData.SegmentPath = "steady-state-sync-info"
    steadyStateSyncInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/issu/ha-statistics/ha-neighbors/ha-neighbor/" + steadyStateSyncInfo.EntityData.SegmentPath
    steadyStateSyncInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    steadyStateSyncInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    steadyStateSyncInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    steadyStateSyncInfo.EntityData.Children = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs = types.NewOrderedMap()
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-sent", types.YLeaf{"NumCapSent", steadyStateSyncInfo.NumCapSent})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-cap-rcvd", types.YLeaf{"NumCapRcvd", steadyStateSyncInfo.NumCapRcvd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-wd", types.YLeaf{"RemLblWd", steadyStateSyncInfo.RemLblWd})
    steadyStateSyncInfo.EntityData.Leafs.Append("rem-lbl-rq", types.YLeaf{"RemLblRq", steadyStateSyncInfo.RemLblRq})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-join", types.YLeaf{"NumStdbyAdjJoin", steadyStateSyncInfo.NumStdbyAdjJoin})
    steadyStateSyncInfo.EntityData.Leafs.Append("num-stdby-adj-leave", types.YLeaf{"NumStdbyAdjLeave", steadyStateSyncInfo.NumStdbyAdjLeave})

    steadyStateSyncInfo.EntityData.YListKeys = []string {}

    return &(steadyStateSyncInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities
// LDP Neighbors Capabilities
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on capabilities of a particular LDP neighbor. The type is slice
    // of MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability.
    NeighborCapability []*MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
}

func (neighborCapabilities *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities) GetEntityData() *types.CommonEntityData {
    neighborCapabilities.EntityData.YFilter = neighborCapabilities.YFilter
    neighborCapabilities.EntityData.YangName = "neighbor-capabilities"
    neighborCapabilities.EntityData.BundleName = "cisco_ios_xr"
    neighborCapabilities.EntityData.ParentYangName = "vrf"
    neighborCapabilities.EntityData.SegmentPath = "neighbor-capabilities"
    neighborCapabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + neighborCapabilities.EntityData.SegmentPath
    neighborCapabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapabilities.EntityData.Children = types.NewOrderedMap()
    neighborCapabilities.EntityData.Children.Append("neighbor-capability", types.YChild{"NeighborCapability", nil})
    for i := range neighborCapabilities.NeighborCapability {
        types.SetYListKey(neighborCapabilities.NeighborCapability[i], i)
        neighborCapabilities.EntityData.Children.Append(types.GetSegmentPath(neighborCapabilities.NeighborCapability[i]), types.YChild{"NeighborCapability", neighborCapabilities.NeighborCapability[i]})
    }
    neighborCapabilities.EntityData.Leafs = types.NewOrderedMap()

    neighborCapabilities.EntityData.YListKeys = []string {}

    return &(neighborCapabilities.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability
// Information on capabilities of a particular LDP
// neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // List of sent capabilities. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent.
    Sent []*MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received.
    Received []*MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
}

func (neighborCapability *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability) GetEntityData() *types.CommonEntityData {
    neighborCapability.EntityData.YFilter = neighborCapability.YFilter
    neighborCapability.EntityData.YangName = "neighbor-capability"
    neighborCapability.EntityData.BundleName = "cisco_ios_xr"
    neighborCapability.EntityData.ParentYangName = "neighbor-capabilities"
    neighborCapability.EntityData.SegmentPath = "neighbor-capability" + types.AddNoKeyToken(neighborCapability)
    neighborCapability.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-capabilities/" + neighborCapability.EntityData.SegmentPath
    neighborCapability.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborCapability.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborCapability.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborCapability.EntityData.Children = types.NewOrderedMap()
    neighborCapability.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range neighborCapability.Sent {
        types.SetYListKey(neighborCapability.Sent[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Sent[i]), types.YChild{"Sent", neighborCapability.Sent[i]})
    }
    neighborCapability.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range neighborCapability.Received {
        types.SetYListKey(neighborCapability.Received[i], i)
        neighborCapability.EntityData.Children.Append(types.GetSegmentPath(neighborCapability.Received[i]), types.YChild{"Received", neighborCapability.Received[i]})
    }
    neighborCapability.EntityData.Leafs = types.NewOrderedMap()
    neighborCapability.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighborCapability.LsrId})
    neighborCapability.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighborCapability.LabelSpaceId})

    neighborCapability.EntityData.YListKeys = []string {}

    return &(neighborCapability.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent
// List of sent capabilities
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "neighbor-capability"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received
// List of received capabilities
type MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Nodes_Node_Vrfs_Vrf_NeighborCapabilities_NeighborCapability_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "neighbor-capability"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbor-capabilities/neighbor-capability/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors
// The LDP Neighbors
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor.
    Neighbor []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor
}

func (neighbors *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "vrf"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        types.SetYListKey(neighbors.Neighbor[i], i)
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor
// Information on a particular LDP neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Protocol Information.
    ProtocolInformation MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation

    // TCP Information.
    TcpInformation MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation

    // Detailed information with regards to holdtime, KA, inbound filtering, and
    // Session protection.
    DetailedInformation MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation

    // Neighbor IPv4 Address Info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo.
    LdpNbrBoundIpv4AddressInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo

    // Neighbor IPv6 Address Info. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo.
    LdpNbrBoundIpv6AddressInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo

    // Neighbor's IPv4 Adjacency Information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo.
    LdpNbrIpv4AdjInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo

    // Neighbor's IPv6 Adjacency Information. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo.
    LdpNbrIpv6AdjInfo []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
}

func (neighbor *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddNoKeyToken(neighbor)
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("protocol-information", types.YChild{"ProtocolInformation", &neighbor.ProtocolInformation})
    neighbor.EntityData.Children.Append("tcp-information", types.YChild{"TcpInformation", &neighbor.TcpInformation})
    neighbor.EntityData.Children.Append("detailed-information", types.YChild{"DetailedInformation", &neighbor.DetailedInformation})
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv4-address-info", types.YChild{"LdpNbrBoundIpv4AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv4AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv4AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv4AddressInfo[i]), types.YChild{"LdpNbrBoundIpv4AddressInfo", neighbor.LdpNbrBoundIpv4AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-bound-ipv6-address-info", types.YChild{"LdpNbrBoundIpv6AddressInfo", nil})
    for i := range neighbor.LdpNbrBoundIpv6AddressInfo {
        types.SetYListKey(neighbor.LdpNbrBoundIpv6AddressInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrBoundIpv6AddressInfo[i]), types.YChild{"LdpNbrBoundIpv6AddressInfo", neighbor.LdpNbrBoundIpv6AddressInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv4-adj-info", types.YChild{"LdpNbrIpv4AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv4AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv4AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv4AdjInfo[i]), types.YChild{"LdpNbrIpv4AdjInfo", neighbor.LdpNbrIpv4AdjInfo[i]})
    }
    neighbor.EntityData.Children.Append("ldp-nbr-ipv6-adj-info", types.YChild{"LdpNbrIpv6AdjInfo", nil})
    for i := range neighbor.LdpNbrIpv6AdjInfo {
        types.SetYListKey(neighbor.LdpNbrIpv6AdjInfo[i], i)
        neighbor.EntityData.Children.Append(types.GetSegmentPath(neighbor.LdpNbrIpv6AdjInfo[i]), types.YChild{"LdpNbrIpv6AdjInfo", neighbor.LdpNbrIpv6AdjInfo[i]})
    }
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", neighbor.LsrId})
    neighbor.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", neighbor.LabelSpaceId})

    neighbor.EntityData.YListKeys = []string {}

    return &(neighbor.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation
// Protocol Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime in sec. The type is interface{} with range: 0..4294967295.
    TaHoldtime interface{}

    // State. The type is string.
    TaState interface{}

    // Number of pies sent. The type is interface{} with range: 0..4294967295.
    TaPiesSent interface{}

    // Number of pies received. The type is interface{} with range: 0..4294967295.
    TaPiesRcvd interface{}

    // Up time in seconds. The type is interface{} with range: 0..4294967295.
    // Units are second.
    TaUpTimeSeconds interface{}

    // Is Label advertisment mode in Downstream On Demand mode or Not. The type is
    // bool.
    DownstreamOnDemand interface{}

    // Graceful restart information.
    TaGracefulRestartAdjacency MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
}

func (protocolInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation) GetEntityData() *types.CommonEntityData {
    protocolInformation.EntityData.YFilter = protocolInformation.YFilter
    protocolInformation.EntityData.YangName = "protocol-information"
    protocolInformation.EntityData.BundleName = "cisco_ios_xr"
    protocolInformation.EntityData.ParentYangName = "neighbor"
    protocolInformation.EntityData.SegmentPath = "protocol-information"
    protocolInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + protocolInformation.EntityData.SegmentPath
    protocolInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protocolInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protocolInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protocolInformation.EntityData.Children = types.NewOrderedMap()
    protocolInformation.EntityData.Children.Append("ta-graceful-restart-adjacency", types.YChild{"TaGracefulRestartAdjacency", &protocolInformation.TaGracefulRestartAdjacency})
    protocolInformation.EntityData.Leafs = types.NewOrderedMap()
    protocolInformation.EntityData.Leafs.Append("ta-holdtime", types.YLeaf{"TaHoldtime", protocolInformation.TaHoldtime})
    protocolInformation.EntityData.Leafs.Append("ta-state", types.YLeaf{"TaState", protocolInformation.TaState})
    protocolInformation.EntityData.Leafs.Append("ta-pies-sent", types.YLeaf{"TaPiesSent", protocolInformation.TaPiesSent})
    protocolInformation.EntityData.Leafs.Append("ta-pies-rcvd", types.YLeaf{"TaPiesRcvd", protocolInformation.TaPiesRcvd})
    protocolInformation.EntityData.Leafs.Append("ta-up-time-seconds", types.YLeaf{"TaUpTimeSeconds", protocolInformation.TaUpTimeSeconds})
    protocolInformation.EntityData.Leafs.Append("downstream-on-demand", types.YLeaf{"DownstreamOnDemand", protocolInformation.DownstreamOnDemand})

    protocolInformation.EntityData.YListKeys = []string {}

    return &(protocolInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency
// Graceful restart information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is graceful restartable. The type is bool.
    IsGracefulRestartable interface{}

    // Reconnect timeout. The type is interface{} with range: 0..4294967295.
    ReconnectTimeout interface{}

    // Recovery time. The type is interface{} with range: 0..4294967295.
    RecoveryTime interface{}
}

func (taGracefulRestartAdjacency *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_ProtocolInformation_TaGracefulRestartAdjacency) GetEntityData() *types.CommonEntityData {
    taGracefulRestartAdjacency.EntityData.YFilter = taGracefulRestartAdjacency.YFilter
    taGracefulRestartAdjacency.EntityData.YangName = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.BundleName = "cisco_ios_xr"
    taGracefulRestartAdjacency.EntityData.ParentYangName = "protocol-information"
    taGracefulRestartAdjacency.EntityData.SegmentPath = "ta-graceful-restart-adjacency"
    taGracefulRestartAdjacency.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/protocol-information/" + taGracefulRestartAdjacency.EntityData.SegmentPath
    taGracefulRestartAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    taGracefulRestartAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    taGracefulRestartAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    taGracefulRestartAdjacency.EntityData.Children = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs = types.NewOrderedMap()
    taGracefulRestartAdjacency.EntityData.Leafs.Append("is-graceful-restartable", types.YLeaf{"IsGracefulRestartable", taGracefulRestartAdjacency.IsGracefulRestartable})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("reconnect-timeout", types.YLeaf{"ReconnectTimeout", taGracefulRestartAdjacency.ReconnectTimeout})
    taGracefulRestartAdjacency.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", taGracefulRestartAdjacency.RecoveryTime})

    taGracefulRestartAdjacency.EntityData.YListKeys = []string {}

    return &(taGracefulRestartAdjacency.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation
// TCP Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Foreign port number. The type is interface{} with range: 0..65535.
    ForeignPort interface{}

    // Local port number. The type is interface{} with range: 0..65535.
    LocalPort interface{}

    // Is MD5 Digest on. The type is bool.
    IsMd5On interface{}

    // Foreign host address.
    ForeignHost MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost

    // Local host address.
    LocalHost MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
}

func (tcpInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation) GetEntityData() *types.CommonEntityData {
    tcpInformation.EntityData.YFilter = tcpInformation.YFilter
    tcpInformation.EntityData.YangName = "tcp-information"
    tcpInformation.EntityData.BundleName = "cisco_ios_xr"
    tcpInformation.EntityData.ParentYangName = "neighbor"
    tcpInformation.EntityData.SegmentPath = "tcp-information"
    tcpInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + tcpInformation.EntityData.SegmentPath
    tcpInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpInformation.EntityData.Children = types.NewOrderedMap()
    tcpInformation.EntityData.Children.Append("foreign-host", types.YChild{"ForeignHost", &tcpInformation.ForeignHost})
    tcpInformation.EntityData.Children.Append("local-host", types.YChild{"LocalHost", &tcpInformation.LocalHost})
    tcpInformation.EntityData.Leafs = types.NewOrderedMap()
    tcpInformation.EntityData.Leafs.Append("foreign-port", types.YLeaf{"ForeignPort", tcpInformation.ForeignPort})
    tcpInformation.EntityData.Leafs.Append("local-port", types.YLeaf{"LocalPort", tcpInformation.LocalPort})
    tcpInformation.EntityData.Leafs.Append("is-md5-on", types.YLeaf{"IsMd5On", tcpInformation.IsMd5On})

    tcpInformation.EntityData.YListKeys = []string {}

    return &(tcpInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost
// Foreign host address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (foreignHost *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_ForeignHost) GetEntityData() *types.CommonEntityData {
    foreignHost.EntityData.YFilter = foreignHost.YFilter
    foreignHost.EntityData.YangName = "foreign-host"
    foreignHost.EntityData.BundleName = "cisco_ios_xr"
    foreignHost.EntityData.ParentYangName = "tcp-information"
    foreignHost.EntityData.SegmentPath = "foreign-host"
    foreignHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/tcp-information/" + foreignHost.EntityData.SegmentPath
    foreignHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreignHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreignHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreignHost.EntityData.Children = types.NewOrderedMap()
    foreignHost.EntityData.Leafs = types.NewOrderedMap()
    foreignHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", foreignHost.Afi})
    foreignHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", foreignHost.Dummy})
    foreignHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", foreignHost.Ipv4})
    foreignHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", foreignHost.Ipv6})

    foreignHost.EntityData.YListKeys = []string {}

    return &(foreignHost.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost
// Local host address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localHost *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_TcpInformation_LocalHost) GetEntityData() *types.CommonEntityData {
    localHost.EntityData.YFilter = localHost.YFilter
    localHost.EntityData.YangName = "local-host"
    localHost.EntityData.BundleName = "cisco_ios_xr"
    localHost.EntityData.ParentYangName = "tcp-information"
    localHost.EntityData.SegmentPath = "local-host"
    localHost.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/tcp-information/" + localHost.EntityData.SegmentPath
    localHost.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localHost.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localHost.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localHost.EntityData.Children = types.NewOrderedMap()
    localHost.EntityData.Leafs = types.NewOrderedMap()
    localHost.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localHost.Afi})
    localHost.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localHost.Dummy})
    localHost.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localHost.Ipv4})
    localHost.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localHost.Ipv6})

    localHost.EntityData.YListKeys = []string {}

    return &(localHost.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation
// Detailed information with regards to holdtime,
// KA, inbound filtering, and Session protection
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Session holdtime value in seconds from the peer. The type is interface{}
    // with range: 0..4294967295. Units are second.
    PeerHoldtime interface{}

    // Session keepalive interval in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    KeepAliveInterval interface{}

    // Peer state. The type is string with length: 0..80.
    PeerState interface{}

    // IPv4 Inbound label filtering present. The type is bool.
    HasIpv4Inbound interface{}

    // IPv4 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv4acl interface{}

    // IPv6 Inbound label filtering present. The type is bool.
    HasIpv6Inbound interface{}

    // IPv6 Inbound accept ACL. The type is string with length: 0..80.
    InboundIpv6acl interface{}

    // IPv4 Outbound label filtering present. The type is bool.
    HasIpv4Outbound interface{}

    // IPv4 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv4acl interface{}

    // IPv6 Outbound label filtering present. The type is bool.
    HasIpv6Outbound interface{}

    // IPv6 Outbound advertise ACL. The type is string with length: 0..80.
    OutboundIpv6acl interface{}

    // Session Protection enabled. The type is bool.
    HasSp interface{}

    // Session Protection state. The type is string with length: 0..80.
    SpState interface{}

    // Session protection ACL is present. The type is bool.
    SpHasAcl interface{}

    // Session Protection ACL. The type is string with length: 0..80.
    Spacl interface{}

    // Session Protection has non-default duration. The type is bool.
    SpHasDuration interface{}

    // Session protection holdup time duration in seconds. The type is interface{}
    // with range: 0..4294967295. Units are second.
    SpDuration interface{}

    // Session Protection holdup timer is running. The type is bool.
    SphtRunning interface{}

    // Session Protection holdup time remaining value in seconds. The type is
    // interface{} with range: 0..4294967295. Units are second.
    SphtRemaining interface{}

    // NSR Sync State. The type is MgmtLdpNsrPeerSyncState.
    NsrSyncState interface{}

    // Last NSR sync error. The type is MgmtLdpNsrPeerSyncErr.
    NsrLastSyncError interface{}

    // Last NSR sync NACK reaston. The type is MgmtLdpNsrPeerLdpSyncNackRsn.
    NsrLastSyncNackReason interface{}

    // BGP labelled prefixes advertisement state. The type is
    // MgmtLdpNbrBgpAdvtState.
    BgpAdvertisementState interface{}

    // Is BGP labelled prefixes advertised to the neighbor. The type is bool.
    AdvertiseBgpPrefixes interface{}

    // Capabilities sent to and received from neighbor.
    Capabilities MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities

    // Targeted Session clients. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client.
    Client []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client

    // Duplicate IPv4 address bound to this peer. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress.
    Ipv4DuplicateAddress []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress

    // Duplicate IPv6 address bound to this peer. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress.
    Ipv6DuplicateAddress []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
}

func (detailedInformation *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation) GetEntityData() *types.CommonEntityData {
    detailedInformation.EntityData.YFilter = detailedInformation.YFilter
    detailedInformation.EntityData.YangName = "detailed-information"
    detailedInformation.EntityData.BundleName = "cisco_ios_xr"
    detailedInformation.EntityData.ParentYangName = "neighbor"
    detailedInformation.EntityData.SegmentPath = "detailed-information"
    detailedInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + detailedInformation.EntityData.SegmentPath
    detailedInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    detailedInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    detailedInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    detailedInformation.EntityData.Children = types.NewOrderedMap()
    detailedInformation.EntityData.Children.Append("capabilities", types.YChild{"Capabilities", &detailedInformation.Capabilities})
    detailedInformation.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range detailedInformation.Client {
        types.SetYListKey(detailedInformation.Client[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Client[i]), types.YChild{"Client", detailedInformation.Client[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv4-duplicate-address", types.YChild{"Ipv4DuplicateAddress", nil})
    for i := range detailedInformation.Ipv4DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv4DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv4DuplicateAddress[i]), types.YChild{"Ipv4DuplicateAddress", detailedInformation.Ipv4DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Children.Append("ipv6-duplicate-address", types.YChild{"Ipv6DuplicateAddress", nil})
    for i := range detailedInformation.Ipv6DuplicateAddress {
        types.SetYListKey(detailedInformation.Ipv6DuplicateAddress[i], i)
        detailedInformation.EntityData.Children.Append(types.GetSegmentPath(detailedInformation.Ipv6DuplicateAddress[i]), types.YChild{"Ipv6DuplicateAddress", detailedInformation.Ipv6DuplicateAddress[i]})
    }
    detailedInformation.EntityData.Leafs = types.NewOrderedMap()
    detailedInformation.EntityData.Leafs.Append("peer-holdtime", types.YLeaf{"PeerHoldtime", detailedInformation.PeerHoldtime})
    detailedInformation.EntityData.Leafs.Append("keep-alive-interval", types.YLeaf{"KeepAliveInterval", detailedInformation.KeepAliveInterval})
    detailedInformation.EntityData.Leafs.Append("peer-state", types.YLeaf{"PeerState", detailedInformation.PeerState})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-inbound", types.YLeaf{"HasIpv4Inbound", detailedInformation.HasIpv4Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv4acl", types.YLeaf{"InboundIpv4acl", detailedInformation.InboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-inbound", types.YLeaf{"HasIpv6Inbound", detailedInformation.HasIpv6Inbound})
    detailedInformation.EntityData.Leafs.Append("inbound-ipv6acl", types.YLeaf{"InboundIpv6acl", detailedInformation.InboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv4-outbound", types.YLeaf{"HasIpv4Outbound", detailedInformation.HasIpv4Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv4acl", types.YLeaf{"OutboundIpv4acl", detailedInformation.OutboundIpv4acl})
    detailedInformation.EntityData.Leafs.Append("has-ipv6-outbound", types.YLeaf{"HasIpv6Outbound", detailedInformation.HasIpv6Outbound})
    detailedInformation.EntityData.Leafs.Append("outbound-ipv6acl", types.YLeaf{"OutboundIpv6acl", detailedInformation.OutboundIpv6acl})
    detailedInformation.EntityData.Leafs.Append("has-sp", types.YLeaf{"HasSp", detailedInformation.HasSp})
    detailedInformation.EntityData.Leafs.Append("sp-state", types.YLeaf{"SpState", detailedInformation.SpState})
    detailedInformation.EntityData.Leafs.Append("sp-has-acl", types.YLeaf{"SpHasAcl", detailedInformation.SpHasAcl})
    detailedInformation.EntityData.Leafs.Append("spacl", types.YLeaf{"Spacl", detailedInformation.Spacl})
    detailedInformation.EntityData.Leafs.Append("sp-has-duration", types.YLeaf{"SpHasDuration", detailedInformation.SpHasDuration})
    detailedInformation.EntityData.Leafs.Append("sp-duration", types.YLeaf{"SpDuration", detailedInformation.SpDuration})
    detailedInformation.EntityData.Leafs.Append("spht-running", types.YLeaf{"SphtRunning", detailedInformation.SphtRunning})
    detailedInformation.EntityData.Leafs.Append("spht-remaining", types.YLeaf{"SphtRemaining", detailedInformation.SphtRemaining})
    detailedInformation.EntityData.Leafs.Append("nsr-sync-state", types.YLeaf{"NsrSyncState", detailedInformation.NsrSyncState})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-error", types.YLeaf{"NsrLastSyncError", detailedInformation.NsrLastSyncError})
    detailedInformation.EntityData.Leafs.Append("nsr-last-sync-nack-reason", types.YLeaf{"NsrLastSyncNackReason", detailedInformation.NsrLastSyncNackReason})
    detailedInformation.EntityData.Leafs.Append("bgp-advertisement-state", types.YLeaf{"BgpAdvertisementState", detailedInformation.BgpAdvertisementState})
    detailedInformation.EntityData.Leafs.Append("advertise-bgp-prefixes", types.YLeaf{"AdvertiseBgpPrefixes", detailedInformation.AdvertiseBgpPrefixes})

    detailedInformation.EntityData.YListKeys = []string {}

    return &(detailedInformation.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities
// Capabilities sent to and received from neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // List of sent capabilities. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent.
    Sent []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent

    // List of received capabilities. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received.
    Received []*MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
}

func (capabilities *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities) GetEntityData() *types.CommonEntityData {
    capabilities.EntityData.YFilter = capabilities.YFilter
    capabilities.EntityData.YangName = "capabilities"
    capabilities.EntityData.BundleName = "cisco_ios_xr"
    capabilities.EntityData.ParentYangName = "detailed-information"
    capabilities.EntityData.SegmentPath = "capabilities"
    capabilities.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/" + capabilities.EntityData.SegmentPath
    capabilities.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    capabilities.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    capabilities.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    capabilities.EntityData.Children = types.NewOrderedMap()
    capabilities.EntityData.Children.Append("sent", types.YChild{"Sent", nil})
    for i := range capabilities.Sent {
        types.SetYListKey(capabilities.Sent[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Sent[i]), types.YChild{"Sent", capabilities.Sent[i]})
    }
    capabilities.EntityData.Children.Append("received", types.YChild{"Received", nil})
    for i := range capabilities.Received {
        types.SetYListKey(capabilities.Received[i], i)
        capabilities.EntityData.Children.Append(types.GetSegmentPath(capabilities.Received[i]), types.YChild{"Received", capabilities.Received[i]})
    }
    capabilities.EntityData.Leafs = types.NewOrderedMap()

    capabilities.EntityData.YListKeys = []string {}

    return &(capabilities.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent
// List of sent capabilities
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (sent *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Sent) GetEntityData() *types.CommonEntityData {
    sent.EntityData.YFilter = sent.YFilter
    sent.EntityData.YangName = "sent"
    sent.EntityData.BundleName = "cisco_ios_xr"
    sent.EntityData.ParentYangName = "capabilities"
    sent.EntityData.SegmentPath = "sent" + types.AddNoKeyToken(sent)
    sent.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + sent.EntityData.SegmentPath
    sent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sent.EntityData.Children = types.NewOrderedMap()
    sent.EntityData.Leafs = types.NewOrderedMap()
    sent.EntityData.Leafs.Append("type", types.YLeaf{"Type", sent.Type})
    sent.EntityData.Leafs.Append("description", types.YLeaf{"Description", sent.Description})
    sent.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", sent.CapabilityDataLength})
    sent.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", sent.CapabilityData})

    sent.EntityData.YListKeys = []string {}

    return &(sent.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received
// List of received capabilities
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Capability type (IANA assigned). The type is interface{} with range:
    // 0..65535.
    Type interface{}

    // Capability description. The type is string with length: 0..80.
    Description interface{}

    // Capability data length. The type is interface{} with range: 0..65535.
    CapabilityDataLength interface{}

    // Capability data. The type is string.
    CapabilityData interface{}
}

func (received *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Capabilities_Received) GetEntityData() *types.CommonEntityData {
    received.EntityData.YFilter = received.YFilter
    received.EntityData.YangName = "received"
    received.EntityData.BundleName = "cisco_ios_xr"
    received.EntityData.ParentYangName = "capabilities"
    received.EntityData.SegmentPath = "received" + types.AddNoKeyToken(received)
    received.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/capabilities/" + received.EntityData.SegmentPath
    received.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    received.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    received.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    received.EntityData.Children = types.NewOrderedMap()
    received.EntityData.Leafs = types.NewOrderedMap()
    received.EntityData.Leafs.Append("type", types.YLeaf{"Type", received.Type})
    received.EntityData.Leafs.Append("description", types.YLeaf{"Description", received.Description})
    received.EntityData.Leafs.Append("capability-data-length", types.YLeaf{"CapabilityDataLength", received.CapabilityDataLength})
    received.EntityData.Leafs.Append("capability-data", types.YLeaf{"CapabilityData", received.CapabilityData})

    received.EntityData.YListKeys = []string {}

    return &(received.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client
// Targeted Session clients
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Client's name. The type is string.
    Name interface{}
}

func (client *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "detailed-information"
    client.EntityData.SegmentPath = "client" + types.AddNoKeyToken(client)
    client.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/" + client.EntityData.SegmentPath
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("name", types.YLeaf{"Name", client.Name})

    client.EntityData.YListKeys = []string {}

    return &(client.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress
// Duplicate IPv4 address bound to this peer
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
}

func (ipv4DuplicateAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv4DuplicateAddress.EntityData.YFilter = ipv4DuplicateAddress.YFilter
    ipv4DuplicateAddress.EntityData.YangName = "ipv4-duplicate-address"
    ipv4DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv4DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv4DuplicateAddress.EntityData.SegmentPath = "ipv4-duplicate-address" + types.AddNoKeyToken(ipv4DuplicateAddress)
    ipv4DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv4DuplicateAddress.EntityData.SegmentPath
    ipv4DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv4DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv4DuplicateAddress.Address})
    ipv4DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv4DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv4DuplicateAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv4DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv4-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/ipv4-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress
// Duplicate IPv6 address bound to this peer
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
}

func (ipv6DuplicateAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress) GetEntityData() *types.CommonEntityData {
    ipv6DuplicateAddress.EntityData.YFilter = ipv6DuplicateAddress.YFilter
    ipv6DuplicateAddress.EntityData.YangName = "ipv6-duplicate-address"
    ipv6DuplicateAddress.EntityData.BundleName = "cisco_ios_xr"
    ipv6DuplicateAddress.EntityData.ParentYangName = "detailed-information"
    ipv6DuplicateAddress.EntityData.SegmentPath = "ipv6-duplicate-address" + types.AddNoKeyToken(ipv6DuplicateAddress)
    ipv6DuplicateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/" + ipv6DuplicateAddress.EntityData.SegmentPath
    ipv6DuplicateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6DuplicateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6DuplicateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6DuplicateAddress.EntityData.Children = types.NewOrderedMap()
    ipv6DuplicateAddress.EntityData.Children.Append("address", types.YChild{"Address", &ipv6DuplicateAddress.Address})
    ipv6DuplicateAddress.EntityData.Leafs = types.NewOrderedMap()

    ipv6DuplicateAddress.EntityData.YListKeys = []string {}

    return &(ipv6DuplicateAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address
// Neighbor Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_DetailedInformation_Ipv6DuplicateAddress_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ipv6-duplicate-address"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/detailed-information/ipv6-duplicate-address/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo
// Neighbor IPv4 Address Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
}

func (ldpNbrBoundIpv4AddressInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv4AddressInfo.EntityData.YFilter = ldpNbrBoundIpv4AddressInfo.YFilter
    ldpNbrBoundIpv4AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv4-address-info"
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv4AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv4-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv4AddressInfo)
    ldpNbrBoundIpv4AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv4AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv4AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv4AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv4AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv4AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv4AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv4AddressInfo.Address})
    ldpNbrBoundIpv4AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv4AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv4AddressInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address
// Neighbor Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv4AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv4-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv4-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo
// Neighbor IPv6 Address Info
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Address.
    Address MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
}

func (ldpNbrBoundIpv6AddressInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrBoundIpv6AddressInfo.EntityData.YFilter = ldpNbrBoundIpv6AddressInfo.YFilter
    ldpNbrBoundIpv6AddressInfo.EntityData.YangName = "ldp-nbr-bound-ipv6-address-info"
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrBoundIpv6AddressInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath = "ldp-nbr-bound-ipv6-address-info" + types.AddNoKeyToken(ldpNbrBoundIpv6AddressInfo)
    ldpNbrBoundIpv6AddressInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + ldpNbrBoundIpv6AddressInfo.EntityData.SegmentPath
    ldpNbrBoundIpv6AddressInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrBoundIpv6AddressInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrBoundIpv6AddressInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrBoundIpv6AddressInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrBoundIpv6AddressInfo.EntityData.Children.Append("address", types.YChild{"Address", &ldpNbrBoundIpv6AddressInfo.Address})
    ldpNbrBoundIpv6AddressInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrBoundIpv6AddressInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrBoundIpv6AddressInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address
// Neighbor Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (address *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrBoundIpv6AddressInfo_Address) GetEntityData() *types.CommonEntityData {
    address.EntityData.YFilter = address.YFilter
    address.EntityData.YangName = "address"
    address.EntityData.BundleName = "cisco_ios_xr"
    address.EntityData.ParentYangName = "ldp-nbr-bound-ipv6-address-info"
    address.EntityData.SegmentPath = "address"
    address.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-bound-ipv6-address-info/" + address.EntityData.SegmentPath
    address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    address.EntityData.Children = types.NewOrderedMap()
    address.EntityData.Leafs = types.NewOrderedMap()
    address.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", address.Afi})
    address.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", address.Dummy})
    address.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", address.Ipv4})
    address.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", address.Ipv6})

    address.EntityData.YListKeys = []string {}

    return &(address.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo
// Neighbor's IPv4 Adjacency Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv4AdjInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv4AdjInfo.EntityData.YFilter = ldpNbrIpv4AdjInfo.YFilter
    ldpNbrIpv4AdjInfo.EntityData.YangName = "ldp-nbr-ipv4-adj-info"
    ldpNbrIpv4AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv4AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv4AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv4-adj-info" + types.AddNoKeyToken(ldpNbrIpv4AdjInfo)
    ldpNbrIpv4AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv4AdjInfo.EntityData.SegmentPath
    ldpNbrIpv4AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv4AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv4AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv4AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv4AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv4AdjInfo.AdjacencyGroup})
    ldpNbrIpv4AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv4AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv4AdjInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv4-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv4AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv4-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo
// Neighbor's IPv6 Adjacency Information
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Adjacency group.
    AdjacencyGroup MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
}

func (ldpNbrIpv6AdjInfo *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo) GetEntityData() *types.CommonEntityData {
    ldpNbrIpv6AdjInfo.EntityData.YFilter = ldpNbrIpv6AdjInfo.YFilter
    ldpNbrIpv6AdjInfo.EntityData.YangName = "ldp-nbr-ipv6-adj-info"
    ldpNbrIpv6AdjInfo.EntityData.BundleName = "cisco_ios_xr"
    ldpNbrIpv6AdjInfo.EntityData.ParentYangName = "neighbor"
    ldpNbrIpv6AdjInfo.EntityData.SegmentPath = "ldp-nbr-ipv6-adj-info" + types.AddNoKeyToken(ldpNbrIpv6AdjInfo)
    ldpNbrIpv6AdjInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/" + ldpNbrIpv6AdjInfo.EntityData.SegmentPath
    ldpNbrIpv6AdjInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpNbrIpv6AdjInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpNbrIpv6AdjInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpNbrIpv6AdjInfo.EntityData.Children = types.NewOrderedMap()
    ldpNbrIpv6AdjInfo.EntityData.Children.Append("adjacency-group", types.YChild{"AdjacencyGroup", &ldpNbrIpv6AdjInfo.AdjacencyGroup})
    ldpNbrIpv6AdjInfo.EntityData.Leafs = types.NewOrderedMap()

    ldpNbrIpv6AdjInfo.EntityData.YListKeys = []string {}

    return &(ldpNbrIpv6AdjInfo.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup
// Adjacency group
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // HelloType. The type is LdpAdjUnionDiscrim.
    HelloType interface{}

    // Link hello.
    LinkHelloData MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData

    // Target Hello.
    TargetHelloData MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
}

func (adjacencyGroup *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup) GetEntityData() *types.CommonEntityData {
    adjacencyGroup.EntityData.YFilter = adjacencyGroup.YFilter
    adjacencyGroup.EntityData.YangName = "adjacency-group"
    adjacencyGroup.EntityData.BundleName = "cisco_ios_xr"
    adjacencyGroup.EntityData.ParentYangName = "ldp-nbr-ipv6-adj-info"
    adjacencyGroup.EntityData.SegmentPath = "adjacency-group"
    adjacencyGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/" + adjacencyGroup.EntityData.SegmentPath
    adjacencyGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    adjacencyGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    adjacencyGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    adjacencyGroup.EntityData.Children = types.NewOrderedMap()
    adjacencyGroup.EntityData.Children.Append("link-hello-data", types.YChild{"LinkHelloData", &adjacencyGroup.LinkHelloData})
    adjacencyGroup.EntityData.Children.Append("target-hello-data", types.YChild{"TargetHelloData", &adjacencyGroup.TargetHelloData})
    adjacencyGroup.EntityData.Leafs = types.NewOrderedMap()
    adjacencyGroup.EntityData.Leafs.Append("hello-type", types.YLeaf{"HelloType", adjacencyGroup.HelloType})

    adjacencyGroup.EntityData.YListKeys = []string {}

    return &(adjacencyGroup.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData
// Link hello
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9._/-]+.
    Interface interface{}

    // Interface name. The type is string.
    InterfaceName interface{}
}

func (linkHelloData *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_LinkHelloData) GetEntityData() *types.CommonEntityData {
    linkHelloData.EntityData.YFilter = linkHelloData.YFilter
    linkHelloData.EntityData.YangName = "link-hello-data"
    linkHelloData.EntityData.BundleName = "cisco_ios_xr"
    linkHelloData.EntityData.ParentYangName = "adjacency-group"
    linkHelloData.EntityData.SegmentPath = "link-hello-data"
    linkHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + linkHelloData.EntityData.SegmentPath
    linkHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkHelloData.EntityData.Children = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs = types.NewOrderedMap()
    linkHelloData.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", linkHelloData.Interface})
    linkHelloData.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", linkHelloData.InterfaceName})

    linkHelloData.EntityData.YListKeys = []string {}

    return &(linkHelloData.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData
// Target Hello
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // State. The type is DhcbState.
    State interface{}

    // Local Address.
    LocalAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress

    // Target Address.
    TargetAddress MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
}

func (targetHelloData *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData) GetEntityData() *types.CommonEntityData {
    targetHelloData.EntityData.YFilter = targetHelloData.YFilter
    targetHelloData.EntityData.YangName = "target-hello-data"
    targetHelloData.EntityData.BundleName = "cisco_ios_xr"
    targetHelloData.EntityData.ParentYangName = "adjacency-group"
    targetHelloData.EntityData.SegmentPath = "target-hello-data"
    targetHelloData.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/" + targetHelloData.EntityData.SegmentPath
    targetHelloData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetHelloData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetHelloData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetHelloData.EntityData.Children = types.NewOrderedMap()
    targetHelloData.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &targetHelloData.LocalAddress})
    targetHelloData.EntityData.Children.Append("target-address", types.YChild{"TargetAddress", &targetHelloData.TargetAddress})
    targetHelloData.EntityData.Leafs = types.NewOrderedMap()
    targetHelloData.EntityData.Leafs.Append("state", types.YLeaf{"State", targetHelloData.State})

    targetHelloData.EntityData.YListKeys = []string {}

    return &(targetHelloData.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress
// Local Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (localAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "target-hello-data"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", localAddress.Afi})
    localAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", localAddress.Dummy})
    localAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", localAddress.Ipv4})
    localAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", localAddress.Ipv6})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress
// Target Address
type MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AFI. The type is LdpAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (targetAddress *MplsLdp_Nodes_Node_Vrfs_Vrf_Neighbors_Neighbor_LdpNbrIpv6AdjInfo_AdjacencyGroup_TargetHelloData_TargetAddress) GetEntityData() *types.CommonEntityData {
    targetAddress.EntityData.YFilter = targetAddress.YFilter
    targetAddress.EntityData.YangName = "target-address"
    targetAddress.EntityData.BundleName = "cisco_ios_xr"
    targetAddress.EntityData.ParentYangName = "target-hello-data"
    targetAddress.EntityData.SegmentPath = "target-address"
    targetAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/neighbors/neighbor/ldp-nbr-ipv6-adj-info/adjacency-group/target-hello-data/" + targetAddress.EntityData.SegmentPath
    targetAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    targetAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    targetAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    targetAddress.EntityData.Children = types.NewOrderedMap()
    targetAddress.EntityData.Leafs = types.NewOrderedMap()
    targetAddress.EntityData.Leafs.Append("afi", types.YLeaf{"Afi", targetAddress.Afi})
    targetAddress.EntityData.Leafs.Append("dummy", types.YLeaf{"Dummy", targetAddress.Dummy})
    targetAddress.EntityData.Leafs.Append("ipv4", types.YLeaf{"Ipv4", targetAddress.Ipv4})
    targetAddress.EntityData.Leafs.Append("ipv6", types.YLeaf{"Ipv6", targetAddress.Ipv6})

    targetAddress.EntityData.YListKeys = []string {}

    return &(targetAddress.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_LdpId
// Local LDP Id
type MplsLdp_Nodes_Node_Vrfs_Vrf_LdpId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSR identifier. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space identifier. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // LDP identifier. The type is string.
    LdpId interface{}
}

func (ldpId *MplsLdp_Nodes_Node_Vrfs_Vrf_LdpId) GetEntityData() *types.CommonEntityData {
    ldpId.EntityData.YFilter = ldpId.YFilter
    ldpId.EntityData.YangName = "ldp-id"
    ldpId.EntityData.BundleName = "cisco_ios_xr"
    ldpId.EntityData.ParentYangName = "vrf"
    ldpId.EntityData.SegmentPath = "ldp-id"
    ldpId.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + ldpId.EntityData.SegmentPath
    ldpId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ldpId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ldpId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ldpId.EntityData.Children = types.NewOrderedMap()
    ldpId.EntityData.Leafs = types.NewOrderedMap()
    ldpId.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", ldpId.LsrId})
    ldpId.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", ldpId.LabelSpaceId})
    ldpId.EntityData.Leafs.Append("ldp-id", types.YLeaf{"LdpId", ldpId.LdpId})

    ldpId.EntityData.YListKeys = []string {}

    return &(ldpId.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics
// The LDP Statistics
type MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Statistical Information on a particular LDP neighbor. The type is slice of
    // MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic.
    Statistic []*MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic
}

func (statistics *MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics) GetEntityData() *types.CommonEntityData {
    statistics.EntityData.YFilter = statistics.YFilter
    statistics.EntityData.YangName = "statistics"
    statistics.EntityData.BundleName = "cisco_ios_xr"
    statistics.EntityData.ParentYangName = "vrf"
    statistics.EntityData.SegmentPath = "statistics"
    statistics.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/" + statistics.EntityData.SegmentPath
    statistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistics.EntityData.Children = types.NewOrderedMap()
    statistics.EntityData.Children.Append("statistic", types.YChild{"Statistic", nil})
    for i := range statistics.Statistic {
        types.SetYListKey(statistics.Statistic[i], i)
        statistics.EntityData.Children.Append(types.GetSegmentPath(statistics.Statistic[i]), types.YChild{"Statistic", statistics.Statistic[i]})
    }
    statistics.EntityData.Leafs = types.NewOrderedMap()

    statistics.EntityData.YListKeys = []string {}

    return &(statistics.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic
// Statistical Information on a particular LDP
// neighbor
type MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // LSR ID of neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Label space ID of neighbor. The type is interface{} with range: 0..65535.
    LabelSpaceId interface{}

    // Is session ICCP enabled?. The type is bool.
    IccpEnabled interface{}

    // Message out count.
    MessageOut MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageOut

    // Message in count.
    MessageIn MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageIn
}

func (statistic *MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic) GetEntityData() *types.CommonEntityData {
    statistic.EntityData.YFilter = statistic.YFilter
    statistic.EntityData.YangName = "statistic"
    statistic.EntityData.BundleName = "cisco_ios_xr"
    statistic.EntityData.ParentYangName = "statistics"
    statistic.EntityData.SegmentPath = "statistic" + types.AddNoKeyToken(statistic)
    statistic.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/statistics/" + statistic.EntityData.SegmentPath
    statistic.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    statistic.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    statistic.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    statistic.EntityData.Children = types.NewOrderedMap()
    statistic.EntityData.Children.Append("message-out", types.YChild{"MessageOut", &statistic.MessageOut})
    statistic.EntityData.Children.Append("message-in", types.YChild{"MessageIn", &statistic.MessageIn})
    statistic.EntityData.Leafs = types.NewOrderedMap()
    statistic.EntityData.Leafs.Append("lsr-id", types.YLeaf{"LsrId", statistic.LsrId})
    statistic.EntityData.Leafs.Append("label-space-id", types.YLeaf{"LabelSpaceId", statistic.LabelSpaceId})
    statistic.EntityData.Leafs.Append("iccp-enabled", types.YLeaf{"IccpEnabled", statistic.IccpEnabled})

    statistic.EntityData.YListKeys = []string {}

    return &(statistic.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageOut
// Message out count
type MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageOut *MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageOut) GetEntityData() *types.CommonEntityData {
    messageOut.EntityData.YFilter = messageOut.YFilter
    messageOut.EntityData.YangName = "message-out"
    messageOut.EntityData.BundleName = "cisco_ios_xr"
    messageOut.EntityData.ParentYangName = "statistic"
    messageOut.EntityData.SegmentPath = "message-out"
    messageOut.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/statistics/statistic/" + messageOut.EntityData.SegmentPath
    messageOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageOut.EntityData.Children = types.NewOrderedMap()
    messageOut.EntityData.Leafs = types.NewOrderedMap()
    messageOut.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageOut.TotalCount})
    messageOut.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageOut.InitCount})
    messageOut.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageOut.AddressCount})
    messageOut.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageOut.AddressWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageOut.LabelMapCount})
    messageOut.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageOut.LabelWithdrawCount})
    messageOut.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageOut.LabelReleaseCount})
    messageOut.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageOut.LabelRequestCount})
    messageOut.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageOut.LabelAbortRequestCount})
    messageOut.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageOut.NotificationCount})
    messageOut.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageOut.KeepAliveCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageOut.IccpRgConnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageOut.IccpRgDisconnCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageOut.IccpRgNotifCount})
    messageOut.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageOut.IccpRgAppDataCount})

    messageOut.EntityData.YListKeys = []string {}

    return &(messageOut.EntityData)
}

// MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageIn
// Message in count
type MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total message count. The type is interface{} with range: 0..4294967295.
    TotalCount interface{}

    // Init message count. The type is interface{} with range: 0..4294967295.
    InitCount interface{}

    // Address message count. The type is interface{} with range: 0..4294967295.
    AddressCount interface{}

    // Address withdraw count. The type is interface{} with range: 0..4294967295.
    AddressWithdrawCount interface{}

    // Label map count. The type is interface{} with range: 0..4294967295.
    LabelMapCount interface{}

    // Label withdraw count. The type is interface{} with range: 0..4294967295.
    LabelWithdrawCount interface{}

    // Label release count. The type is interface{} with range: 0..4294967295.
    LabelReleaseCount interface{}

    // Label request count. The type is interface{} with range: 0..4294967295.
    LabelRequestCount interface{}

    // Label abort request count. The type is interface{} with range:
    // 0..4294967295.
    LabelAbortRequestCount interface{}

    // Notification count. The type is interface{} with range: 0..4294967295.
    NotificationCount interface{}

    // Keepalive count. The type is interface{} with range: 0..4294967295.
    KeepAliveCount interface{}

    // ICCP RG Connect count. The type is interface{} with range: 0..4294967295.
    IccpRgConnCount interface{}

    // ICCP RG Disconnect count. The type is interface{} with range:
    // 0..4294967295.
    IccpRgDisconnCount interface{}

    // ICCP RG Notif count. The type is interface{} with range: 0..4294967295.
    IccpRgNotifCount interface{}

    // ICCP RG App Data count. The type is interface{} with range: 0..4294967295.
    IccpRgAppDataCount interface{}
}

func (messageIn *MplsLdp_Nodes_Node_Vrfs_Vrf_Statistics_Statistic_MessageIn) GetEntityData() *types.CommonEntityData {
    messageIn.EntityData.YFilter = messageIn.YFilter
    messageIn.EntityData.YangName = "message-in"
    messageIn.EntityData.BundleName = "cisco_ios_xr"
    messageIn.EntityData.ParentYangName = "statistic"
    messageIn.EntityData.SegmentPath = "message-in"
    messageIn.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/vrfs/vrf/statistics/statistic/" + messageIn.EntityData.SegmentPath
    messageIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageIn.EntityData.Children = types.NewOrderedMap()
    messageIn.EntityData.Leafs = types.NewOrderedMap()
    messageIn.EntityData.Leafs.Append("total-count", types.YLeaf{"TotalCount", messageIn.TotalCount})
    messageIn.EntityData.Leafs.Append("init-count", types.YLeaf{"InitCount", messageIn.InitCount})
    messageIn.EntityData.Leafs.Append("address-count", types.YLeaf{"AddressCount", messageIn.AddressCount})
    messageIn.EntityData.Leafs.Append("address-withdraw-count", types.YLeaf{"AddressWithdrawCount", messageIn.AddressWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-map-count", types.YLeaf{"LabelMapCount", messageIn.LabelMapCount})
    messageIn.EntityData.Leafs.Append("label-withdraw-count", types.YLeaf{"LabelWithdrawCount", messageIn.LabelWithdrawCount})
    messageIn.EntityData.Leafs.Append("label-release-count", types.YLeaf{"LabelReleaseCount", messageIn.LabelReleaseCount})
    messageIn.EntityData.Leafs.Append("label-request-count", types.YLeaf{"LabelRequestCount", messageIn.LabelRequestCount})
    messageIn.EntityData.Leafs.Append("label-abort-request-count", types.YLeaf{"LabelAbortRequestCount", messageIn.LabelAbortRequestCount})
    messageIn.EntityData.Leafs.Append("notification-count", types.YLeaf{"NotificationCount", messageIn.NotificationCount})
    messageIn.EntityData.Leafs.Append("keep-alive-count", types.YLeaf{"KeepAliveCount", messageIn.KeepAliveCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-conn-count", types.YLeaf{"IccpRgConnCount", messageIn.IccpRgConnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-disconn-count", types.YLeaf{"IccpRgDisconnCount", messageIn.IccpRgDisconnCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-notif-count", types.YLeaf{"IccpRgNotifCount", messageIn.IccpRgNotifCount})
    messageIn.EntityData.Leafs.Append("iccp-rg-app-data-count", types.YLeaf{"IccpRgAppDataCount", messageIn.IccpRgAppDataCount})

    messageIn.EntityData.YListKeys = []string {}

    return &(messageIn.EntityData)
}

// MplsLdp_Nodes_Node_DiscoverySummaryAll
// Summary information regarding LDP discovery
type MplsLdp_Nodes_Node_DiscoverySummaryAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local LDP identifier. The type is string.
    LocalLdpId interface{}

    // Total Number of LDP configured interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfLdpInterfaces interface{}

    // Number of active LDP enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    NumOfActiveLdpInterfaces interface{}

    // Number of link hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscXmit interface{}

    // Number of targeted hello discoveries in xmit state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscXmit interface{}

    // Number of link hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfLnkDiscRecv interface{}

    // Number of targeted hello discoveries in recv state. The type is interface{}
    // with range: 0..4294967295.
    NumOfTgtDiscRecv interface{}

    // Number of hello discoveries received with bad source address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadAddrRecv interface{}

    // Number of hello discoveries received with bad hello PDU. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadHelloPdu interface{}

    // Number of hello discoveries received with bad export address. The type is
    // interface{} with range: 0..4294967295.
    NumOfDiscWithBadXportAddr interface{}

    // Number of hello discoveries received with the same router id as this
    // router. The type is interface{} with range: 0..4294967295.
    NumOfDiscWithSameRouterId interface{}

    // Number of hello discoveries received with the router id that is not
    // destined for this router. The type is interface{} with range:
    // 0..4294967295.
    NumOfDiscWithWrongRouterId interface{}

    // VRF information.
    Vrf MplsLdp_Nodes_Node_DiscoverySummaryAll_Vrf
}

func (discoverySummaryAll *MplsLdp_Nodes_Node_DiscoverySummaryAll) GetEntityData() *types.CommonEntityData {
    discoverySummaryAll.EntityData.YFilter = discoverySummaryAll.YFilter
    discoverySummaryAll.EntityData.YangName = "discovery-summary-all"
    discoverySummaryAll.EntityData.BundleName = "cisco_ios_xr"
    discoverySummaryAll.EntityData.ParentYangName = "node"
    discoverySummaryAll.EntityData.SegmentPath = "discovery-summary-all"
    discoverySummaryAll.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/" + discoverySummaryAll.EntityData.SegmentPath
    discoverySummaryAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    discoverySummaryAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    discoverySummaryAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    discoverySummaryAll.EntityData.Children = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Children.Append("vrf", types.YChild{"Vrf", &discoverySummaryAll.Vrf})
    discoverySummaryAll.EntityData.Leafs = types.NewOrderedMap()
    discoverySummaryAll.EntityData.Leafs.Append("local-ldp-id", types.YLeaf{"LocalLdpId", discoverySummaryAll.LocalLdpId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-ldp-interfaces", types.YLeaf{"NumOfLdpInterfaces", discoverySummaryAll.NumOfLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-active-ldp-interfaces", types.YLeaf{"NumOfActiveLdpInterfaces", discoverySummaryAll.NumOfActiveLdpInterfaces})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-xmit", types.YLeaf{"NumOfLnkDiscXmit", discoverySummaryAll.NumOfLnkDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-xmit", types.YLeaf{"NumOfTgtDiscXmit", discoverySummaryAll.NumOfTgtDiscXmit})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-lnk-disc-recv", types.YLeaf{"NumOfLnkDiscRecv", discoverySummaryAll.NumOfLnkDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-tgt-disc-recv", types.YLeaf{"NumOfTgtDiscRecv", discoverySummaryAll.NumOfTgtDiscRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-addr-recv", types.YLeaf{"NumOfDiscWithBadAddrRecv", discoverySummaryAll.NumOfDiscWithBadAddrRecv})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-hello-pdu", types.YLeaf{"NumOfDiscWithBadHelloPdu", discoverySummaryAll.NumOfDiscWithBadHelloPdu})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-bad-xport-addr", types.YLeaf{"NumOfDiscWithBadXportAddr", discoverySummaryAll.NumOfDiscWithBadXportAddr})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-same-router-id", types.YLeaf{"NumOfDiscWithSameRouterId", discoverySummaryAll.NumOfDiscWithSameRouterId})
    discoverySummaryAll.EntityData.Leafs.Append("num-of-disc-with-wrong-router-id", types.YLeaf{"NumOfDiscWithWrongRouterId", discoverySummaryAll.NumOfDiscWithWrongRouterId})

    discoverySummaryAll.EntityData.YListKeys = []string {}

    return &(discoverySummaryAll.EntityData)
}

// MplsLdp_Nodes_Node_DiscoverySummaryAll_Vrf
// VRF information
type MplsLdp_Nodes_Node_DiscoverySummaryAll_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    Name interface{}

    // VRF Id. The type is interface{} with range: 0..4294967295.
    Id interface{}
}

func (vrf *MplsLdp_Nodes_Node_DiscoverySummaryAll_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "discovery-summary-all"
    vrf.EntityData.SegmentPath = "vrf"
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-mpls-ldp-oper:mpls-ldp/nodes/node/discovery-summary-all/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("name", types.YLeaf{"Name", vrf.Name})
    vrf.EntityData.Leafs.Append("id", types.YLeaf{"Id", vrf.Id})

    vrf.EntityData.YListKeys = []string {}

    return &(vrf.EntityData)
}

