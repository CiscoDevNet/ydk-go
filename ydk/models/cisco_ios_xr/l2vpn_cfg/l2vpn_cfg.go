// This module contains a collection of YANG definitions
// for Cisco IOS-XR l2vpn package configuration.
// 
// This module contains definitions
// for the following management objects:
//   l2vpn: L2VPN configuration
//   generic-interface-lists: generic interface lists
//   evpn: evpn
// 
// This YANG module augments the
//   Cisco-IOS-XR-ifmgr-cfg,
//   Cisco-IOS-XR-snmp-agent-cfg
// modules with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package l2vpn_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package l2vpn_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg l2vpn}", reflect.TypeOf(L2Vpn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-l2vpn-cfg:l2vpn", reflect.TypeOf(L2Vpn{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg generic-interface-lists}", reflect.TypeOf(GenericInterfaceLists{}))
    ydk.RegisterEntity("Cisco-IOS-XR-l2vpn-cfg:generic-interface-lists", reflect.TypeOf(GenericInterfaceLists{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg evpn}", reflect.TypeOf(Evpn{}))
    ydk.RegisterEntity("Cisco-IOS-XR-l2vpn-cfg:evpn", reflect.TypeOf(Evpn{}))
}

// FlowLabelTlvCode represents Flow label tlv code
type FlowLabelTlvCode string

const (
    // Set Flow Label Legacy TLV code (DEPRECATED)
    FlowLabelTlvCode_Y_17 FlowLabelTlvCode = "17"

    // Disable Sending Flow Label Legacy TLV
    FlowLabelTlvCode_disable FlowLabelTlvCode = "disable"
)

// MacAging represents Mac aging
type MacAging string

const (
    // Absolute aging type
    MacAging_absolute MacAging = "absolute"

    // Inactivity aging type
    MacAging_inactivity MacAging = "inactivity"
)

// BdmacLearn represents Bdmac learn
type BdmacLearn string

const (
    // Disable Learning
    BdmacLearn_disable_learning BdmacLearn = "disable-learning"
)

// Interworking represents Interworking
type Interworking string

const (
    // Ethernet interworking
    Interworking_ethernet Interworking = "ethernet"

    // IPv4 interworking
    Interworking_ipv4 Interworking = "ipv4"
)

// PwSwitchingPointTlv represents Pw switching point tlv
type PwSwitchingPointTlv string

const (
    // Hide TLV
    PwSwitchingPointTlv_hide PwSwitchingPointTlv = "hide"
)

// L2tpv3Sequencing represents L2tpv3 sequencing
type L2tpv3Sequencing string

const (
    // Sequencing is off
    L2tpv3Sequencing_off L2tpv3Sequencing = "off"

    // Sequencing on both transmit and receive side
    L2tpv3Sequencing_both L2tpv3Sequencing = "both"
)

// InterfaceProfile represents Interface profile
type InterfaceProfile string

const (
    // Set the snooping
    InterfaceProfile_snoop InterfaceProfile = "snoop"

    // disable DHCP protocol
    InterfaceProfile_dhcp_protocol InterfaceProfile = "dhcp-protocol"
)

// BgpRouteTargetRole represents Bgp route target role
type BgpRouteTargetRole string

const (
    // Both Import and export roles
    BgpRouteTargetRole_both BgpRouteTargetRole = "both"

    // Import role
    BgpRouteTargetRole_import_ BgpRouteTargetRole = "import"

    // Export role
    BgpRouteTargetRole_export BgpRouteTargetRole = "export"
)

// ErpPort represents Erp port
type ErpPort string

const (
    // ERP port type none
    ErpPort_none ErpPort = "none"

    // ERP port type virtual
    ErpPort_virtual ErpPort = "virtual"

    // ERP port type interface
    ErpPort_interface_ ErpPort = "interface"
)

// BgpRouteTarget represents Bgp route target
type BgpRouteTarget string

const (
    // RT is default type
    BgpRouteTarget_no_stitching BgpRouteTarget = "no-stitching"

    // RT is for stitching (Golf-L2)
    BgpRouteTarget_stitching BgpRouteTarget = "stitching"
)

// MacLimitAction represents Mac limit action
type MacLimitAction string

const (
    // No action
    MacLimitAction_none MacLimitAction = "none"

    // Flood Mac Limit Action
    MacLimitAction_flood MacLimitAction = "flood"

    // NoFlood Mac Limit Action
    MacLimitAction_no_flood MacLimitAction = "no-flood"

    // Shutdown Mac Limit Action
    MacLimitAction_shutdown MacLimitAction = "shutdown"
)

// FlowLabelLoadBalance represents Flow label load balance
type FlowLabelLoadBalance string

const (
    // Flow Label load balance is off
    FlowLabelLoadBalance_off FlowLabelLoadBalance = "off"

    // Delete Flow Label on receive side
    FlowLabelLoadBalance_receive FlowLabelLoadBalance = "receive"

    // Insert Flow Label on transmit side
    FlowLabelLoadBalance_transmit FlowLabelLoadBalance = "transmit"

    // Insert/Delete  Flow Label on transmit/receive
    // side
    FlowLabelLoadBalance_both FlowLabelLoadBalance = "both"
)

// L2vpnVerification represents L2vpn verification
type L2vpnVerification string

const (
    // enable verification
    L2vpnVerification_enable L2vpnVerification = "enable"

    // disable verification
    L2vpnVerification_disable L2vpnVerification = "disable"
)

// MacLearn represents Mac learn
type MacLearn string

const (
    // Mac Learning
    MacLearn_default_learning MacLearn = "default-learning"

    // Enable Learning
    MacLearn_enable_learning MacLearn = "enable-learning"

    // Disable Learning
    MacLearn_disable_learning MacLearn = "disable-learning"
)

// LdpVplsId represents Ldp vpls id
type LdpVplsId string

const (
    // VPLS-ID in 2 byte AS:nn format
    LdpVplsId_two_byte_as LdpVplsId = "two-byte-as"

    // VPLS-ID in IPv4 IP:nn format
    LdpVplsId_ipv4_address LdpVplsId = "ipv4-address"
)

// Erpaps represents Erpaps
type Erpaps string

const (
    // ERP APS type interface
    Erpaps_interface_ Erpaps = "interface"

    // ERP APS type bridge domain
    Erpaps_bridge_domain Erpaps = "bridge-domain"

    // ERP APS type xconnect
    Erpaps_xconnect Erpaps = "xconnect"

    // ERP APS type none
    Erpaps_none Erpaps = "none"
)

// VccvVerification represents Vccv verification
type VccvVerification string

const (
    // No connectivity verification over VCCV
    VccvVerification_none VccvVerification = "none"

    // LSP Ping over VCCV
    VccvVerification_lsp_ping VccvVerification = "lsp-ping"
)

// TransportMode represents Transport mode
type TransportMode string

const (
    // Ethernet port mode
    TransportMode_ethernet TransportMode = "ethernet"

    // Vlan tagged mode
    TransportMode_vlan TransportMode = "vlan"

    // Vlan tagged passthrough mode
    TransportMode_vlan_passthrough TransportMode = "vlan-passthrough"
)

// BackupDisable represents Backup disable
type BackupDisable string

const (
    // Never
    BackupDisable_never BackupDisable = "never"

    // Delay seconds
    BackupDisable_delay BackupDisable = "delay"
)

// LoadBalance represents Load balance
type LoadBalance string

const (
    // Source and Destination MAC hashing
    LoadBalance_source_dest_mac LoadBalance = "source-dest-mac"

    // Source and Destination IP hashing
    LoadBalance_source_dest_ip LoadBalance = "source-dest-ip"

    // PW Label hashing
    LoadBalance_pseudowire_label LoadBalance = "pseudowire-label"
)

// ErpPort1 represents Erp port1
type ErpPort1 string

const (
    // ERP main port 0
    ErpPort1_port0 ErpPort1 = "port0"

    // ERP main port 1
    ErpPort1_port1 ErpPort1 = "port1"
)

// InterfaceTrafficFlood represents Interface traffic flood
type InterfaceTrafficFlood string

const (
    // Traffic flooding
    InterfaceTrafficFlood_traffic_flooding InterfaceTrafficFlood = "traffic-flooding"

    // Enable Flooding
    InterfaceTrafficFlood_enable_flooding InterfaceTrafficFlood = "enable-flooding"

    // Disable flooding
    InterfaceTrafficFlood_disable_flooding InterfaceTrafficFlood = "disable-flooding"
)

// L2tpCookieSize represents L2tp cookie size
type L2tpCookieSize string

const (
    // Cookie size is zero bytes
    L2tpCookieSize_zero L2tpCookieSize = "zero"

    // Cookie size is four bytes
    L2tpCookieSize_four L2tpCookieSize = "four"

    // Cookie size is eight bytes
    L2tpCookieSize_eight L2tpCookieSize = "eight"
)

// StormControl represents Storm control
type StormControl string

const (
    // Unknown-unicast Storm Control
    StormControl_unicast StormControl = "unicast"

    // Multicast Storm Control
    StormControl_multicast StormControl = "multicast"

    // Broadcast Storm Control
    StormControl_broadcast StormControl = "broadcast"
)

// BgpRouteDistinguisher represents Bgp route distinguisher
type BgpRouteDistinguisher string

const (
    // RD automatically assigned
    BgpRouteDistinguisher_auto BgpRouteDistinguisher = "auto"

    // RD in 2 byte AS:nn format
    BgpRouteDistinguisher_two_byte_as BgpRouteDistinguisher = "two-byte-as"

    // RD in 4 byte AS:nn format
    BgpRouteDistinguisher_four_byte_as BgpRouteDistinguisher = "four-byte-as"

    // RD in IpV4address
    BgpRouteDistinguisher_ipv4_address BgpRouteDistinguisher = "ipv4-address"
)

// MacNotification represents Mac notification
type MacNotification string

const (
    // No_Notification Trap
    MacNotification_no_notif MacNotification = "no-notif"

    // syslog message
    MacNotification_syslog MacNotification = "syslog"

    // Snmp Trap
    MacNotification_trap MacNotification = "trap"

    // Syslog_snmp Trap
    MacNotification_syslog_snmp MacNotification = "syslog-snmp"
)

// BgpRouteTargetFormat represents Bgp route target format
type BgpRouteTargetFormat string

const (
    // No route target
    BgpRouteTargetFormat_none BgpRouteTargetFormat = "none"

    // 2 Byte AS:nn format
    BgpRouteTargetFormat_two_byte_as BgpRouteTargetFormat = "two-byte-as"

    // 4 byte AS:nn format
    BgpRouteTargetFormat_four_byte_as BgpRouteTargetFormat = "four-byte-as"

    // IP:nn format
    BgpRouteTargetFormat_ipv4_address BgpRouteTargetFormat = "ipv4-address"

    // a.a.i format
    BgpRouteTargetFormat_es_import BgpRouteTargetFormat = "es-import"
)

// MplsSignalingProtocol represents Mpls signaling protocol
type MplsSignalingProtocol string

const (
    // No signaling
    MplsSignalingProtocol_none MplsSignalingProtocol = "none"

    // LDP
    MplsSignalingProtocol_ldp MplsSignalingProtocol = "ldp"
)

// EvpnSide represents Evpn side
type EvpnSide string

const (
    // EVPN Instance side defined as stitching
    EvpnSide_evpn_side_stitching EvpnSide = "evpn-side-stitching"
)

// PreferredPath represents Preferred path
type PreferredPath string

const (
    // TE Tunnel
    PreferredPath_te_tunnel PreferredPath = "te-tunnel"

    // IP Tunnel
    PreferredPath_ip_tunnel PreferredPath = "ip-tunnel"

    // TP Tunnel
    PreferredPath_tp_tunnel PreferredPath = "tp-tunnel"

    // SR TE Policy
    PreferredPath_sr_te_policy PreferredPath = "sr-te-policy"
)

// EvpnEncapsulation represents Evpn encapsulation
type EvpnEncapsulation string

const (
    // VXLAN Encapsulation
    EvpnEncapsulation_evpn_encapsulationvxlan EvpnEncapsulation = "evpn-encapsulationvxlan"

    // MPLS Encapsulation
    EvpnEncapsulation_evpn_encapsulation_mpls EvpnEncapsulation = "evpn-encapsulation-mpls"
)

// MplsSequencing represents Mpls sequencing
type MplsSequencing string

const (
    // Sequencing is off
    MplsSequencing_off MplsSequencing = "off"

    // Sequencing on transmit side
    MplsSequencing_transmit MplsSequencing = "transmit"

    // Sequencing on receive side
    MplsSequencing_receive MplsSequencing = "receive"

    // Sequencing on both transmit and receive side
    MplsSequencing_both MplsSequencing = "both"
)

// L2tpSignalingProtocol represents L2tp signaling protocol
type L2tpSignalingProtocol string

const (
    // No signaling
    L2tpSignalingProtocol_none L2tpSignalingProtocol = "none"

    // L2TPv3
    L2tpSignalingProtocol_l2tpv3 L2tpSignalingProtocol = "l2tpv3"
)

// ControlWord represents Control word
type ControlWord string

const (
    // Enable control word
    ControlWord_enable ControlWord = "enable"

    // Disable control word
    ControlWord_disable ControlWord = "disable"
)

// EthernetSegmentIdentifier represents Ethernet segment identifier
type EthernetSegmentIdentifier string

const (
    // ESI type 0
    EthernetSegmentIdentifier_type0 EthernetSegmentIdentifier = "type0"

    // Legacy ESI type
    EthernetSegmentIdentifier_legacy EthernetSegmentIdentifier = "legacy"

    // Override ESI type
    EthernetSegmentIdentifier_override EthernetSegmentIdentifier = "override"
)

// BridgeDomainTransportMode represents Bridge domain transport mode
type BridgeDomainTransportMode string

const (
    // Vlan tagged passthrough mode
    BridgeDomainTransportMode_vlan_passthrough BridgeDomainTransportMode = "vlan-passthrough"
)

// L2Encapsulation represents L2 encapsulation
type L2Encapsulation string

const (
    // Vlan tagged mode
    L2Encapsulation_vlan L2Encapsulation = "vlan"

    // Ethernet port mode
    L2Encapsulation_ethernet L2Encapsulation = "ethernet"
)

// L2vpnLogging represents L2vpn logging
type L2vpnLogging string

const (
    // enable logging
    L2vpnLogging_enable L2vpnLogging = "enable"

    // disable logging
    L2vpnLogging_disable L2vpnLogging = "disable"
)

// MacWithdrawBehavior represents Mac withdraw behavior
type MacWithdrawBehavior string

const (
    // MAC Withdrawal sent on state-down (legacy)
    MacWithdrawBehavior_legacy MacWithdrawBehavior = "legacy"

    // Optimized MAC Withdrawal
    MacWithdrawBehavior_optimized MacWithdrawBehavior = "optimized"
)

// RplRole represents Rpl role
type RplRole string

const (
    // ERP RPL owner
    RplRole_owner RplRole = "owner"

    // ERP RPL neighbor
    RplRole_neighbor RplRole = "neighbor"

    // ERP RPL next neighbor
    RplRole_next_neighbor RplRole = "next-neighbor"
)

// TypeOfServiceMode represents Type of service mode
type TypeOfServiceMode string

const (
    // Do not reflect the type of service
    TypeOfServiceMode_none TypeOfServiceMode = "none"

    // Reflect the type of service
    TypeOfServiceMode_reflect TypeOfServiceMode = "reflect"
)

// PortDownFlush represents Port down flush
type PortDownFlush string

const (
    // MAC Port Down Flush
    PortDownFlush_port_down_flush PortDownFlush = "port-down-flush"

    // Enable Port Down Flush
    PortDownFlush_enable_port_down_flush PortDownFlush = "enable-port-down-flush"

    // Disable Port Down Flush
    PortDownFlush_disable_port_down_flush PortDownFlush = "disable-port-down-flush"
)

// L2vpnCapabilityMode represents L2vpn capability mode
type L2vpnCapabilityMode string

const (
    // Compute global capability as the highest node
    // capability
    L2vpnCapabilityMode_high_mode L2vpnCapabilityMode = "high-mode"

    // Disable global capability re-computation
    L2vpnCapabilityMode_single_mode L2vpnCapabilityMode = "single-mode"
)

// MacSecureAction represents Mac secure action
type MacSecureAction string

const (
    // MAC Secure Action Restrict
    MacSecureAction_restrict MacSecureAction = "restrict"

    // No Action
    MacSecureAction_none MacSecureAction = "none"

    // MAC Secure Action Shutdown
    MacSecureAction_shutdown MacSecureAction = "shutdown"
)

// L2Vpn
// L2VPN configuration
type L2Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Non-Stop Routing. The type is interface{}.
    Nsr interface{}

    // Ignore MTU Mismatch for XCs. The type is interface{}.
    MtuMismatchIgnore interface{}

    // Topology change notification propagation. The type is interface{}.
    TcnPropagation interface{}

    // Configure PW OAM refresh interval. The type is interface{} with range:
    // 1..4095. Units are second.
    PwoamRefresh interface{}

    // Enable flow load balancing on l2vpn bridges. The type is LoadBalance.
    LoadBalance interface{}

    // MS-PW global description. The type is string with length: 1..64.
    MspwDescription interface{}

    // Configure MAC limit threshold percent. The type is interface{} with range:
    // 1..100. Units are percentage.
    MacLimitThreshold interface{}

    // Disable PW status. The type is interface{}.
    PwStatusDisable interface{}

    // Enable L2VPN feature. The type is interface{}.
    Enable interface{}

    // Enable PW grouping. The type is interface{}.
    PwGrouping interface{}

    // L2VPN Capability Mode. The type is L2vpnCapabilityMode.
    Capability interface{}

    // Global L2VPN Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    L2VpnRouterId interface{}

    // Pseudowire-routing attributes.
    PwRouting L2Vpn_PwRouting

    // L2VPN neighbor submode.
    Neighbor L2Vpn_Neighbor

    // L2VPN databases.
    Database L2Vpn_Database

    // L2VPN PBB Global.
    Pbb L2Vpn_Pbb

    // Global auto-discovery attributes.
    AutoDiscovery L2Vpn_AutoDiscovery

    // L2VPN utilities.
    Utility L2Vpn_Utility

    // SNMP related configuration.
    Snmp L2Vpn_Snmp
}

func (l2Vpn *L2Vpn) GetFilter() yfilter.YFilter { return l2Vpn.YFilter }

func (l2Vpn *L2Vpn) SetFilter(yf yfilter.YFilter) { l2Vpn.YFilter = yf }

func (l2Vpn *L2Vpn) GetGoName(yname string) string {
    if yname == "nsr" { return "Nsr" }
    if yname == "mtu-mismatch-ignore" { return "MtuMismatchIgnore" }
    if yname == "tcn-propagation" { return "TcnPropagation" }
    if yname == "pwoam-refresh" { return "PwoamRefresh" }
    if yname == "load-balance" { return "LoadBalance" }
    if yname == "mspw-description" { return "MspwDescription" }
    if yname == "mac-limit-threshold" { return "MacLimitThreshold" }
    if yname == "pw-status-disable" { return "PwStatusDisable" }
    if yname == "enable" { return "Enable" }
    if yname == "pw-grouping" { return "PwGrouping" }
    if yname == "capability" { return "Capability" }
    if yname == "l2vpn-router-id" { return "L2VpnRouterId" }
    if yname == "pw-routing" { return "PwRouting" }
    if yname == "neighbor" { return "Neighbor" }
    if yname == "database" { return "Database" }
    if yname == "pbb" { return "Pbb" }
    if yname == "auto-discovery" { return "AutoDiscovery" }
    if yname == "utility" { return "Utility" }
    if yname == "snmp" { return "Snmp" }
    return ""
}

func (l2Vpn *L2Vpn) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:l2vpn"
}

func (l2Vpn *L2Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pw-routing" {
        return &l2Vpn.PwRouting
    }
    if childYangName == "neighbor" {
        return &l2Vpn.Neighbor
    }
    if childYangName == "database" {
        return &l2Vpn.Database
    }
    if childYangName == "pbb" {
        return &l2Vpn.Pbb
    }
    if childYangName == "auto-discovery" {
        return &l2Vpn.AutoDiscovery
    }
    if childYangName == "utility" {
        return &l2Vpn.Utility
    }
    if childYangName == "snmp" {
        return &l2Vpn.Snmp
    }
    return nil
}

func (l2Vpn *L2Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pw-routing"] = &l2Vpn.PwRouting
    children["neighbor"] = &l2Vpn.Neighbor
    children["database"] = &l2Vpn.Database
    children["pbb"] = &l2Vpn.Pbb
    children["auto-discovery"] = &l2Vpn.AutoDiscovery
    children["utility"] = &l2Vpn.Utility
    children["snmp"] = &l2Vpn.Snmp
    return children
}

func (l2Vpn *L2Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr"] = l2Vpn.Nsr
    leafs["mtu-mismatch-ignore"] = l2Vpn.MtuMismatchIgnore
    leafs["tcn-propagation"] = l2Vpn.TcnPropagation
    leafs["pwoam-refresh"] = l2Vpn.PwoamRefresh
    leafs["load-balance"] = l2Vpn.LoadBalance
    leafs["mspw-description"] = l2Vpn.MspwDescription
    leafs["mac-limit-threshold"] = l2Vpn.MacLimitThreshold
    leafs["pw-status-disable"] = l2Vpn.PwStatusDisable
    leafs["enable"] = l2Vpn.Enable
    leafs["pw-grouping"] = l2Vpn.PwGrouping
    leafs["capability"] = l2Vpn.Capability
    leafs["l2vpn-router-id"] = l2Vpn.L2VpnRouterId
    return leafs
}

func (l2Vpn *L2Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (l2Vpn *L2Vpn) GetYangName() string { return "l2vpn" }

func (l2Vpn *L2Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Vpn *L2Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Vpn *L2Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Vpn *L2Vpn) SetParent(parent types.Entity) { l2Vpn.parent = parent }

func (l2Vpn *L2Vpn) GetParent() types.Entity { return l2Vpn.parent }

func (l2Vpn *L2Vpn) GetParentYangName() string { return "Cisco-IOS-XR-l2vpn-cfg" }

// L2Vpn_PwRouting
// Pseudowire-routing attributes
type L2Vpn_PwRouting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire-routing Global ID. The type is interface{} with range:
    // 1..4294967295.
    PwRoutingGlobalId interface{}

    // Enable Autodiscovery BGP Pseudowire-routing BGP.
    PwRoutingBgp L2Vpn_PwRouting_PwRoutingBgp
}

func (pwRouting *L2Vpn_PwRouting) GetFilter() yfilter.YFilter { return pwRouting.YFilter }

func (pwRouting *L2Vpn_PwRouting) SetFilter(yf yfilter.YFilter) { pwRouting.YFilter = yf }

func (pwRouting *L2Vpn_PwRouting) GetGoName(yname string) string {
    if yname == "pw-routing-global-id" { return "PwRoutingGlobalId" }
    if yname == "pw-routing-bgp" { return "PwRoutingBgp" }
    return ""
}

func (pwRouting *L2Vpn_PwRouting) GetSegmentPath() string {
    return "pw-routing"
}

func (pwRouting *L2Vpn_PwRouting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pw-routing-bgp" {
        return &pwRouting.PwRoutingBgp
    }
    return nil
}

func (pwRouting *L2Vpn_PwRouting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pw-routing-bgp"] = &pwRouting.PwRoutingBgp
    return children
}

func (pwRouting *L2Vpn_PwRouting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pw-routing-global-id"] = pwRouting.PwRoutingGlobalId
    return leafs
}

func (pwRouting *L2Vpn_PwRouting) GetBundleName() string { return "cisco_ios_xr" }

func (pwRouting *L2Vpn_PwRouting) GetYangName() string { return "pw-routing" }

func (pwRouting *L2Vpn_PwRouting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwRouting *L2Vpn_PwRouting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwRouting *L2Vpn_PwRouting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwRouting *L2Vpn_PwRouting) SetParent(parent types.Entity) { pwRouting.parent = parent }

func (pwRouting *L2Vpn_PwRouting) GetParent() types.Entity { return pwRouting.parent }

func (pwRouting *L2Vpn_PwRouting) GetParentYangName() string { return "l2vpn" }

// L2Vpn_PwRouting_PwRoutingBgp
// Enable Autodiscovery BGP Pseudowire-routing BGP
type L2Vpn_PwRouting_PwRoutingBgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Autodiscovery BGP. The type is interface{}.
    Enable interface{}

    // Route Distinguisher.
    EvpnRouteDistinguisher L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetFilter() yfilter.YFilter { return pwRoutingBgp.YFilter }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) SetFilter(yf yfilter.YFilter) { pwRoutingBgp.YFilter = yf }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evpn-route-distinguisher" { return "EvpnRouteDistinguisher" }
    return ""
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetSegmentPath() string {
    return "pw-routing-bgp"
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-distinguisher" {
        return &pwRoutingBgp.EvpnRouteDistinguisher
    }
    return nil
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-route-distinguisher"] = &pwRoutingBgp.EvpnRouteDistinguisher
    return children
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pwRoutingBgp.Enable
    return leafs
}

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetBundleName() string { return "cisco_ios_xr" }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetYangName() string { return "pw-routing-bgp" }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) SetParent(parent types.Entity) { pwRoutingBgp.parent = parent }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetParent() types.Entity { return pwRoutingBgp.parent }

func (pwRoutingBgp *L2Vpn_PwRouting_PwRoutingBgp) GetParentYangName() string { return "pw-routing" }

// L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher
// Route Distinguisher
type L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router Distinguisher Type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetFilter() yfilter.YFilter { return evpnRouteDistinguisher.YFilter }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) SetFilter(yf yfilter.YFilter) { evpnRouteDistinguisher.YFilter = yf }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetSegmentPath() string {
    return "evpn-route-distinguisher"
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = evpnRouteDistinguisher.Type
    leafs["as"] = evpnRouteDistinguisher.As
    leafs["as-index"] = evpnRouteDistinguisher.AsIndex
    leafs["address"] = evpnRouteDistinguisher.Address
    leafs["addr-index"] = evpnRouteDistinguisher.AddrIndex
    return leafs
}

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetYangName() string { return "evpn-route-distinguisher" }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) SetParent(parent types.Entity) { evpnRouteDistinguisher.parent = parent }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetParent() types.Entity { return evpnRouteDistinguisher.parent }

func (evpnRouteDistinguisher *L2Vpn_PwRouting_PwRoutingBgp_EvpnRouteDistinguisher) GetParentYangName() string { return "pw-routing-bgp" }

// L2Vpn_Neighbor
// L2VPN neighbor submode
type L2Vpn_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable targetted LDP session flap action. The type is interface{}.
    LdpFlap interface{}
}

func (neighbor *L2Vpn_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *L2Vpn_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *L2Vpn_Neighbor) GetGoName(yname string) string {
    if yname == "ldp-flap" { return "LdpFlap" }
    return ""
}

func (neighbor *L2Vpn_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *L2Vpn_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *L2Vpn_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *L2Vpn_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldp-flap"] = neighbor.LdpFlap
    return leafs
}

func (neighbor *L2Vpn_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *L2Vpn_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *L2Vpn_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *L2Vpn_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *L2Vpn_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *L2Vpn_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *L2Vpn_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *L2Vpn_Neighbor) GetParentYangName() string { return "l2vpn" }

// L2Vpn_Database
// L2VPN databases
type L2Vpn_Database struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of G8032 Ring.
    G8032Rings L2Vpn_Database_G8032Rings

    // List of xconnect groups.
    XconnectGroups L2Vpn_Database_XconnectGroups

    // List of bridge  groups.
    BridgeDomainGroups L2Vpn_Database_BridgeDomainGroups

    // List of pseudowire classes.
    PseudowireClasses L2Vpn_Database_PseudowireClasses

    // List of Flexible XConnect Services.
    FlexibleXconnectServiceTable L2Vpn_Database_FlexibleXconnectServiceTable

    // Redundancy groups.
    Redundancy L2Vpn_Database_Redundancy
}

func (database *L2Vpn_Database) GetFilter() yfilter.YFilter { return database.YFilter }

func (database *L2Vpn_Database) SetFilter(yf yfilter.YFilter) { database.YFilter = yf }

func (database *L2Vpn_Database) GetGoName(yname string) string {
    if yname == "g8032-rings" { return "G8032Rings" }
    if yname == "xconnect-groups" { return "XconnectGroups" }
    if yname == "bridge-domain-groups" { return "BridgeDomainGroups" }
    if yname == "pseudowire-classes" { return "PseudowireClasses" }
    if yname == "flexible-xconnect-service-table" { return "FlexibleXconnectServiceTable" }
    if yname == "redundancy" { return "Redundancy" }
    return ""
}

func (database *L2Vpn_Database) GetSegmentPath() string {
    return "database"
}

func (database *L2Vpn_Database) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g8032-rings" {
        return &database.G8032Rings
    }
    if childYangName == "xconnect-groups" {
        return &database.XconnectGroups
    }
    if childYangName == "bridge-domain-groups" {
        return &database.BridgeDomainGroups
    }
    if childYangName == "pseudowire-classes" {
        return &database.PseudowireClasses
    }
    if childYangName == "flexible-xconnect-service-table" {
        return &database.FlexibleXconnectServiceTable
    }
    if childYangName == "redundancy" {
        return &database.Redundancy
    }
    return nil
}

func (database *L2Vpn_Database) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g8032-rings"] = &database.G8032Rings
    children["xconnect-groups"] = &database.XconnectGroups
    children["bridge-domain-groups"] = &database.BridgeDomainGroups
    children["pseudowire-classes"] = &database.PseudowireClasses
    children["flexible-xconnect-service-table"] = &database.FlexibleXconnectServiceTable
    children["redundancy"] = &database.Redundancy
    return children
}

func (database *L2Vpn_Database) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (database *L2Vpn_Database) GetBundleName() string { return "cisco_ios_xr" }

func (database *L2Vpn_Database) GetYangName() string { return "database" }

func (database *L2Vpn_Database) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (database *L2Vpn_Database) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (database *L2Vpn_Database) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (database *L2Vpn_Database) SetParent(parent types.Entity) { database.parent = parent }

func (database *L2Vpn_Database) GetParent() types.Entity { return database.parent }

func (database *L2Vpn_Database) GetParentYangName() string { return "l2vpn" }

// L2Vpn_Database_G8032Rings
// List of G8032 Ring
type L2Vpn_Database_G8032Rings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G8032 Ring. The type is slice of L2Vpn_Database_G8032Rings_G8032Ring.
    G8032Ring []L2Vpn_Database_G8032Rings_G8032Ring
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetFilter() yfilter.YFilter { return g8032Rings.YFilter }

func (g8032Rings *L2Vpn_Database_G8032Rings) SetFilter(yf yfilter.YFilter) { g8032Rings.YFilter = yf }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetGoName(yname string) string {
    if yname == "g8032-ring" { return "G8032Ring" }
    return ""
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetSegmentPath() string {
    return "g8032-rings"
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g8032-ring" {
        for _, c := range g8032Rings.G8032Ring {
            if g8032Rings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_G8032Rings_G8032Ring{}
        g8032Rings.G8032Ring = append(g8032Rings.G8032Ring, child)
        return &g8032Rings.G8032Ring[len(g8032Rings.G8032Ring)-1]
    }
    return nil
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range g8032Rings.G8032Ring {
        children[g8032Rings.G8032Ring[i].GetSegmentPath()] = &g8032Rings.G8032Ring[i]
    }
    return children
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (g8032Rings *L2Vpn_Database_G8032Rings) GetBundleName() string { return "cisco_ios_xr" }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetYangName() string { return "g8032-rings" }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g8032Rings *L2Vpn_Database_G8032Rings) SetParent(parent types.Entity) { g8032Rings.parent = parent }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetParent() types.Entity { return g8032Rings.parent }

func (g8032Rings *L2Vpn_Database_G8032Rings) GetParentYangName() string { return "database" }

// L2Vpn_Database_G8032Rings_G8032Ring
// G8032 Ring
type L2Vpn_Database_G8032Rings_G8032Ring struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the G8032 ring. The type is string with
    // length: 1..32.
    G8032RingName interface{}

    // Specify the G.8032 instance as open ring. The type is interface{}.
    OpenRing interface{}

    // Vlan IDs in the format of a-b,c,d,e-f,g ,untagged. The type is string.
    ExclusionList interface{}

    // Ethernet ring protection provider bridge. The type is interface{}.
    ErpProviderBridge interface{}

    // Ethernet ring protection port0.
    ErpPort0S L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S

    // List of ethernet ring protection instance.
    ErpInstances L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances

    // Ethernet ring protection port0.
    ErpPort1S L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetFilter() yfilter.YFilter { return g8032Ring.YFilter }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) SetFilter(yf yfilter.YFilter) { g8032Ring.YFilter = yf }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetGoName(yname string) string {
    if yname == "g8032-ring-name" { return "G8032RingName" }
    if yname == "open-ring" { return "OpenRing" }
    if yname == "exclusion-list" { return "ExclusionList" }
    if yname == "erp-provider-bridge" { return "ErpProviderBridge" }
    if yname == "erp-port0s" { return "ErpPort0S" }
    if yname == "erp-instances" { return "ErpInstances" }
    if yname == "erp-port1s" { return "ErpPort1S" }
    return ""
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetSegmentPath() string {
    return "g8032-ring" + "[g8032-ring-name='" + fmt.Sprintf("%v", g8032Ring.G8032RingName) + "']"
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "erp-port0s" {
        return &g8032Ring.ErpPort0S
    }
    if childYangName == "erp-instances" {
        return &g8032Ring.ErpInstances
    }
    if childYangName == "erp-port1s" {
        return &g8032Ring.ErpPort1S
    }
    return nil
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["erp-port0s"] = &g8032Ring.ErpPort0S
    children["erp-instances"] = &g8032Ring.ErpInstances
    children["erp-port1s"] = &g8032Ring.ErpPort1S
    return children
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["g8032-ring-name"] = g8032Ring.G8032RingName
    leafs["open-ring"] = g8032Ring.OpenRing
    leafs["exclusion-list"] = g8032Ring.ExclusionList
    leafs["erp-provider-bridge"] = g8032Ring.ErpProviderBridge
    return leafs
}

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetBundleName() string { return "cisco_ios_xr" }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetYangName() string { return "g8032-ring" }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) SetParent(parent types.Entity) { g8032Ring.parent = parent }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetParent() types.Entity { return g8032Ring.parent }

func (g8032Ring *L2Vpn_Database_G8032Rings_G8032Ring) GetParentYangName() string { return "g8032-rings" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S
// Ethernet ring protection port0
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure ERP main port0. The type is slice of
    // L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0.
    ErpPort0 []L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetFilter() yfilter.YFilter { return erpPort0S.YFilter }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) SetFilter(yf yfilter.YFilter) { erpPort0S.YFilter = yf }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetGoName(yname string) string {
    if yname == "erp-port0" { return "ErpPort0" }
    return ""
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetSegmentPath() string {
    return "erp-port0s"
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "erp-port0" {
        for _, c := range erpPort0S.ErpPort0 {
            if erpPort0S.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0{}
        erpPort0S.ErpPort0 = append(erpPort0S.ErpPort0, child)
        return &erpPort0S.ErpPort0[len(erpPort0S.ErpPort0)-1]
    }
    return nil
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range erpPort0S.ErpPort0 {
        children[erpPort0S.ErpPort0[i].GetSegmentPath()] = &erpPort0S.ErpPort0[i]
    }
    return children
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetBundleName() string { return "cisco_ios_xr" }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetYangName() string { return "erp-port0s" }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) SetParent(parent types.Entity) { erpPort0S.parent = parent }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetParent() types.Entity { return erpPort0S.parent }

func (erpPort0S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S) GetParentYangName() string { return "g8032-ring" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0
// Configure ERP main port0
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Port0 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Ethernet ring protection port0 monitor. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    Monitor interface{}
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetFilter() yfilter.YFilter { return erpPort0.YFilter }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) SetFilter(yf yfilter.YFilter) { erpPort0.YFilter = yf }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "monitor" { return "Monitor" }
    return ""
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetSegmentPath() string {
    return "erp-port0" + "[interface-name='" + fmt.Sprintf("%v", erpPort0.InterfaceName) + "']"
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = erpPort0.InterfaceName
    leafs["monitor"] = erpPort0.Monitor
    return leafs
}

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetBundleName() string { return "cisco_ios_xr" }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetYangName() string { return "erp-port0" }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) SetParent(parent types.Entity) { erpPort0.parent = parent }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetParent() types.Entity { return erpPort0.parent }

func (erpPort0 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort0S_ErpPort0) GetParentYangName() string { return "erp-port0s" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances
// List of ethernet ring protection instance
type L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ethernet ring protection instance. The type is slice of
    // L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance.
    ErpInstance []L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetFilter() yfilter.YFilter { return erpInstances.YFilter }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) SetFilter(yf yfilter.YFilter) { erpInstances.YFilter = yf }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetGoName(yname string) string {
    if yname == "erp-instance" { return "ErpInstance" }
    return ""
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetSegmentPath() string {
    return "erp-instances"
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "erp-instance" {
        for _, c := range erpInstances.ErpInstance {
            if erpInstances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance{}
        erpInstances.ErpInstance = append(erpInstances.ErpInstance, child)
        return &erpInstances.ErpInstance[len(erpInstances.ErpInstance)-1]
    }
    return nil
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range erpInstances.ErpInstance {
        children[erpInstances.ErpInstance[i].GetSegmentPath()] = &erpInstances.ErpInstance[i]
    }
    return children
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetBundleName() string { return "cisco_ios_xr" }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetYangName() string { return "erp-instances" }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) SetParent(parent types.Entity) { erpInstances.parent = parent }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetParent() types.Entity { return erpInstances.parent }

func (erpInstances *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances) GetParentYangName() string { return "g8032-ring" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance
// Ethernet ring protection instance
type L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ERP instance number. The type is interface{} with
    // range: 1..2.
    ErpInstanceId interface{}

    // Ethernet ring protection instance description. The type is string with
    // length: 1..32.
    Description interface{}

    // Associates a set of VLAN IDs with the G .8032 instance. The type is string.
    InclusionList interface{}

    // Ethernet ring protection instance profile. The type is string with length:
    // 1..32.
    Profile interface{}

    // Ring protection link.
    Rpl L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl

    // Automatic protection switching.
    Aps L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetFilter() yfilter.YFilter { return erpInstance.YFilter }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) SetFilter(yf yfilter.YFilter) { erpInstance.YFilter = yf }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetGoName(yname string) string {
    if yname == "erp-instance-id" { return "ErpInstanceId" }
    if yname == "description" { return "Description" }
    if yname == "inclusion-list" { return "InclusionList" }
    if yname == "profile" { return "Profile" }
    if yname == "rpl" { return "Rpl" }
    if yname == "aps" { return "Aps" }
    return ""
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetSegmentPath() string {
    return "erp-instance" + "[erp-instance-id='" + fmt.Sprintf("%v", erpInstance.ErpInstanceId) + "']"
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rpl" {
        return &erpInstance.Rpl
    }
    if childYangName == "aps" {
        return &erpInstance.Aps
    }
    return nil
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rpl"] = &erpInstance.Rpl
    children["aps"] = &erpInstance.Aps
    return children
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["erp-instance-id"] = erpInstance.ErpInstanceId
    leafs["description"] = erpInstance.Description
    leafs["inclusion-list"] = erpInstance.InclusionList
    leafs["profile"] = erpInstance.Profile
    return leafs
}

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetBundleName() string { return "cisco_ios_xr" }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetYangName() string { return "erp-instance" }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) SetParent(parent types.Entity) { erpInstance.parent = parent }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetParent() types.Entity { return erpInstance.parent }

func (erpInstance *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance) GetParentYangName() string { return "erp-instances" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl
// Ring protection link
type L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERP main port number. The type is ErpPort1.
    Port interface{}

    // RPL role. The type is RplRole.
    Role interface{}
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetFilter() yfilter.YFilter { return rpl.YFilter }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) SetFilter(yf yfilter.YFilter) { rpl.YFilter = yf }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetGoName(yname string) string {
    if yname == "port" { return "Port" }
    if yname == "role" { return "Role" }
    return ""
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetSegmentPath() string {
    return "rpl"
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port"] = rpl.Port
    leafs["role"] = rpl.Role
    return leafs
}

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetBundleName() string { return "cisco_ios_xr" }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetYangName() string { return "rpl" }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) SetParent(parent types.Entity) { rpl.parent = parent }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetParent() types.Entity { return rpl.parent }

func (rpl *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Rpl) GetParentYangName() string { return "erp-instance" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps
// Automatic protection switching
type L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port0 APS channel in the format of InterfaceName. The type is string.
    Port0 interface{}

    // Enable automatic protection switching. The type is interface{}.
    Enable interface{}

    // Automatic protection switching level. The type is interface{} with range:
    // 0..7.
    Level interface{}

    // APS channel for ERP port1.
    Port1 L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetFilter() yfilter.YFilter { return aps.YFilter }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) SetFilter(yf yfilter.YFilter) { aps.YFilter = yf }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetGoName(yname string) string {
    if yname == "port0" { return "Port0" }
    if yname == "enable" { return "Enable" }
    if yname == "level" { return "Level" }
    if yname == "port1" { return "Port1" }
    return ""
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetSegmentPath() string {
    return "aps"
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port1" {
        return &aps.Port1
    }
    return nil
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port1"] = &aps.Port1
    return children
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port0"] = aps.Port0
    leafs["enable"] = aps.Enable
    leafs["level"] = aps.Level
    return leafs
}

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetBundleName() string { return "cisco_ios_xr" }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetYangName() string { return "aps" }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) SetParent(parent types.Entity) { aps.parent = parent }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetParent() types.Entity { return aps.parent }

func (aps *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps) GetParentYangName() string { return "erp-instance" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1
// APS channel for ERP port1
type L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port1 APS type. The type is Erpaps.
    ApsType interface{}

    // Port1 APS channel in the format of InterfaceName, BDName or XconnectName.
    // The type is string.
    ApsChannel interface{}
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetFilter() yfilter.YFilter { return port1.YFilter }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) SetFilter(yf yfilter.YFilter) { port1.YFilter = yf }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetGoName(yname string) string {
    if yname == "aps-type" { return "ApsType" }
    if yname == "aps-channel" { return "ApsChannel" }
    return ""
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetSegmentPath() string {
    return "port1"
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["aps-type"] = port1.ApsType
    leafs["aps-channel"] = port1.ApsChannel
    return leafs
}

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetBundleName() string { return "cisco_ios_xr" }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetYangName() string { return "port1" }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) SetParent(parent types.Entity) { port1.parent = parent }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetParent() types.Entity { return port1.parent }

func (port1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpInstances_ErpInstance_Aps_Port1) GetParentYangName() string { return "aps" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S
// Ethernet ring protection port0
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ethernet ring protection port1. The type is slice of
    // L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1.
    ErpPort1 []L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetFilter() yfilter.YFilter { return erpPort1S.YFilter }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) SetFilter(yf yfilter.YFilter) { erpPort1S.YFilter = yf }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetGoName(yname string) string {
    if yname == "erp-port1" { return "ErpPort1" }
    return ""
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetSegmentPath() string {
    return "erp-port1s"
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "erp-port1" {
        for _, c := range erpPort1S.ErpPort1 {
            if erpPort1S.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1{}
        erpPort1S.ErpPort1 = append(erpPort1S.ErpPort1, child)
        return &erpPort1S.ErpPort1[len(erpPort1S.ErpPort1)-1]
    }
    return nil
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range erpPort1S.ErpPort1 {
        children[erpPort1S.ErpPort1[i].GetSegmentPath()] = &erpPort1S.ErpPort1[i]
    }
    return children
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetBundleName() string { return "cisco_ios_xr" }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetYangName() string { return "erp-port1s" }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) SetParent(parent types.Entity) { erpPort1S.parent = parent }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetParent() types.Entity { return erpPort1S.parent }

func (erpPort1S *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S) GetParentYangName() string { return "g8032-ring" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1
// Ethernet ring protection port1
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Port1 type. The type is ErpPort.
    ErpPortType interface{}

    // none or virtual.
    NoneOrVirtual L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual

    // interface. The type is slice of
    // L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface.
    Interface []L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetFilter() yfilter.YFilter { return erpPort1.YFilter }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) SetFilter(yf yfilter.YFilter) { erpPort1.YFilter = yf }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetGoName(yname string) string {
    if yname == "erp-port-type" { return "ErpPortType" }
    if yname == "none-or-virtual" { return "NoneOrVirtual" }
    if yname == "interface" { return "Interface" }
    return ""
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetSegmentPath() string {
    return "erp-port1" + "[erp-port-type='" + fmt.Sprintf("%v", erpPort1.ErpPortType) + "']"
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "none-or-virtual" {
        return &erpPort1.NoneOrVirtual
    }
    if childYangName == "interface" {
        for _, c := range erpPort1.Interface {
            if erpPort1.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface{}
        erpPort1.Interface = append(erpPort1.Interface, child)
        return &erpPort1.Interface[len(erpPort1.Interface)-1]
    }
    return nil
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["none-or-virtual"] = &erpPort1.NoneOrVirtual
    for i := range erpPort1.Interface {
        children[erpPort1.Interface[i].GetSegmentPath()] = &erpPort1.Interface[i]
    }
    return children
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["erp-port-type"] = erpPort1.ErpPortType
    return leafs
}

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetBundleName() string { return "cisco_ios_xr" }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetYangName() string { return "erp-port1" }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) SetParent(parent types.Entity) { erpPort1.parent = parent }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetParent() types.Entity { return erpPort1.parent }

func (erpPort1 *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1) GetParentYangName() string { return "erp-port1s" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual
// none or virtual
// This type is a presence type.
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ethernet ring protection port1 monitor. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    Monitor interface{}
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetFilter() yfilter.YFilter { return noneOrVirtual.YFilter }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) SetFilter(yf yfilter.YFilter) { noneOrVirtual.YFilter = yf }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetGoName(yname string) string {
    if yname == "monitor" { return "Monitor" }
    return ""
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetSegmentPath() string {
    return "none-or-virtual"
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["monitor"] = noneOrVirtual.Monitor
    return leafs
}

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetBundleName() string { return "cisco_ios_xr" }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetYangName() string { return "none-or-virtual" }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) SetParent(parent types.Entity) { noneOrVirtual.parent = parent }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetParent() types.Entity { return noneOrVirtual.parent }

func (noneOrVirtual *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_NoneOrVirtual) GetParentYangName() string { return "erp-port1" }

// L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface
// interface
type L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Port1 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Ethernet ring protection port1 monitor. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    Monitor interface{}
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "monitor" { return "Monitor" }
    return ""
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["monitor"] = self.Monitor
    return leafs
}

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetYangName() string { return "interface" }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetParent() types.Entity { return self.parent }

func (self *L2Vpn_Database_G8032Rings_G8032Ring_ErpPort1S_ErpPort1_Interface) GetParentYangName() string { return "erp-port1" }

// L2Vpn_Database_XconnectGroups
// List of xconnect groups
type L2Vpn_Database_XconnectGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Xconnect group. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup.
    XconnectGroup []L2Vpn_Database_XconnectGroups_XconnectGroup
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetFilter() yfilter.YFilter { return xconnectGroups.YFilter }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) SetFilter(yf yfilter.YFilter) { xconnectGroups.YFilter = yf }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetGoName(yname string) string {
    if yname == "xconnect-group" { return "XconnectGroup" }
    return ""
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetSegmentPath() string {
    return "xconnect-groups"
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "xconnect-group" {
        for _, c := range xconnectGroups.XconnectGroup {
            if xconnectGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup{}
        xconnectGroups.XconnectGroup = append(xconnectGroups.XconnectGroup, child)
        return &xconnectGroups.XconnectGroup[len(xconnectGroups.XconnectGroup)-1]
    }
    return nil
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range xconnectGroups.XconnectGroup {
        children[xconnectGroups.XconnectGroup[i].GetSegmentPath()] = &xconnectGroups.XconnectGroup[i]
    }
    return children
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetBundleName() string { return "cisco_ios_xr" }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetYangName() string { return "xconnect-groups" }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) SetParent(parent types.Entity) { xconnectGroups.parent = parent }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetParent() types.Entity { return xconnectGroups.parent }

func (xconnectGroups *L2Vpn_Database_XconnectGroups) GetParentYangName() string { return "database" }

// L2Vpn_Database_XconnectGroups_XconnectGroup
// Xconnect group
type L2Vpn_Database_XconnectGroups_XconnectGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the xconnect group. The type is string
    // with length: 1..32.
    Name interface{}

    // List of point to point xconnects.
    P2PXconnects L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects

    // List of multi point to multi point xconnects.
    Mp2MpXconnects L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetFilter() yfilter.YFilter { return xconnectGroup.YFilter }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) SetFilter(yf yfilter.YFilter) { xconnectGroup.YFilter = yf }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "p2p-xconnects" { return "P2PXconnects" }
    if yname == "mp2mp-xconnects" { return "Mp2MpXconnects" }
    return ""
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetSegmentPath() string {
    return "xconnect-group" + "[name='" + fmt.Sprintf("%v", xconnectGroup.Name) + "']"
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2p-xconnects" {
        return &xconnectGroup.P2PXconnects
    }
    if childYangName == "mp2mp-xconnects" {
        return &xconnectGroup.Mp2MpXconnects
    }
    return nil
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["p2p-xconnects"] = &xconnectGroup.P2PXconnects
    children["mp2mp-xconnects"] = &xconnectGroup.Mp2MpXconnects
    return children
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = xconnectGroup.Name
    return leafs
}

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetBundleName() string { return "cisco_ios_xr" }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetYangName() string { return "xconnect-group" }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) SetParent(parent types.Entity) { xconnectGroup.parent = parent }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetParent() types.Entity { return xconnectGroup.parent }

func (xconnectGroup *L2Vpn_Database_XconnectGroups_XconnectGroup) GetParentYangName() string { return "xconnect-groups" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects
// List of point to point xconnects
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point to point xconnect. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect.
    P2PXconnect []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetFilter() yfilter.YFilter { return p2PXconnects.YFilter }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) SetFilter(yf yfilter.YFilter) { p2PXconnects.YFilter = yf }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetGoName(yname string) string {
    if yname == "p2p-xconnect" { return "P2PXconnect" }
    return ""
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetSegmentPath() string {
    return "p2p-xconnects"
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2p-xconnect" {
        for _, c := range p2PXconnects.P2PXconnect {
            if p2PXconnects.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect{}
        p2PXconnects.P2PXconnect = append(p2PXconnects.P2PXconnect, child)
        return &p2PXconnects.P2PXconnect[len(p2PXconnects.P2PXconnect)-1]
    }
    return nil
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range p2PXconnects.P2PXconnect {
        children[p2PXconnects.P2PXconnect[i].GetSegmentPath()] = &p2PXconnects.P2PXconnect[i]
    }
    return children
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetBundleName() string { return "cisco_ios_xr" }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetYangName() string { return "p2p-xconnects" }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) SetParent(parent types.Entity) { p2PXconnects.parent = parent }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetParent() types.Entity { return p2PXconnects.parent }

func (p2PXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects) GetParentYangName() string { return "xconnect-group" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect
// Point to point xconnect
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the point to point xconnect. The type is
    // string with length: 1..38.
    Name interface{}

    // cross connect description Name. The type is string with length: 1..64.
    P2PDescription interface{}

    // Interworking. The type is Interworking.
    Interworking interface{}

    // List of backup attachment circuits.
    BackupAttachmentCircuits L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits

    // List of EVPN Services.
    PseudowireEvpns L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns

    // List of pseudowires.
    Pseudowires L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires

    // List of Monitor session segments.
    MonitorSessions L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions

    // List of pseudowire-routed.
    PseudowireRouteds L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds

    // List of attachment circuits.
    AttachmentCircuits L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetFilter() yfilter.YFilter { return p2PXconnect.YFilter }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) SetFilter(yf yfilter.YFilter) { p2PXconnect.YFilter = yf }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "p2p-description" { return "P2PDescription" }
    if yname == "interworking" { return "Interworking" }
    if yname == "backup-attachment-circuits" { return "BackupAttachmentCircuits" }
    if yname == "pseudowire-evpns" { return "PseudowireEvpns" }
    if yname == "pseudowires" { return "Pseudowires" }
    if yname == "monitor-sessions" { return "MonitorSessions" }
    if yname == "pseudowire-routeds" { return "PseudowireRouteds" }
    if yname == "attachment-circuits" { return "AttachmentCircuits" }
    return ""
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetSegmentPath() string {
    return "p2p-xconnect" + "[name='" + fmt.Sprintf("%v", p2PXconnect.Name) + "']"
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-attachment-circuits" {
        return &p2PXconnect.BackupAttachmentCircuits
    }
    if childYangName == "pseudowire-evpns" {
        return &p2PXconnect.PseudowireEvpns
    }
    if childYangName == "pseudowires" {
        return &p2PXconnect.Pseudowires
    }
    if childYangName == "monitor-sessions" {
        return &p2PXconnect.MonitorSessions
    }
    if childYangName == "pseudowire-routeds" {
        return &p2PXconnect.PseudowireRouteds
    }
    if childYangName == "attachment-circuits" {
        return &p2PXconnect.AttachmentCircuits
    }
    return nil
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup-attachment-circuits"] = &p2PXconnect.BackupAttachmentCircuits
    children["pseudowire-evpns"] = &p2PXconnect.PseudowireEvpns
    children["pseudowires"] = &p2PXconnect.Pseudowires
    children["monitor-sessions"] = &p2PXconnect.MonitorSessions
    children["pseudowire-routeds"] = &p2PXconnect.PseudowireRouteds
    children["attachment-circuits"] = &p2PXconnect.AttachmentCircuits
    return children
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = p2PXconnect.Name
    leafs["p2p-description"] = p2PXconnect.P2PDescription
    leafs["interworking"] = p2PXconnect.Interworking
    return leafs
}

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetBundleName() string { return "cisco_ios_xr" }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetYangName() string { return "p2p-xconnect" }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) SetParent(parent types.Entity) { p2PXconnect.parent = parent }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetParent() types.Entity { return p2PXconnect.parent }

func (p2PXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect) GetParentYangName() string { return "p2p-xconnects" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits
// List of backup attachment circuits
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Backup attachment circuit. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit.
    BackupAttachmentCircuit []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetFilter() yfilter.YFilter { return backupAttachmentCircuits.YFilter }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) SetFilter(yf yfilter.YFilter) { backupAttachmentCircuits.YFilter = yf }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetGoName(yname string) string {
    if yname == "backup-attachment-circuit" { return "BackupAttachmentCircuit" }
    return ""
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetSegmentPath() string {
    return "backup-attachment-circuits"
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-attachment-circuit" {
        for _, c := range backupAttachmentCircuits.BackupAttachmentCircuit {
            if backupAttachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit{}
        backupAttachmentCircuits.BackupAttachmentCircuit = append(backupAttachmentCircuits.BackupAttachmentCircuit, child)
        return &backupAttachmentCircuits.BackupAttachmentCircuit[len(backupAttachmentCircuits.BackupAttachmentCircuit)-1]
    }
    return nil
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupAttachmentCircuits.BackupAttachmentCircuit {
        children[backupAttachmentCircuits.BackupAttachmentCircuit[i].GetSegmentPath()] = &backupAttachmentCircuits.BackupAttachmentCircuit[i]
    }
    return children
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetYangName() string { return "backup-attachment-circuits" }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) SetParent(parent types.Entity) { backupAttachmentCircuits.parent = parent }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetParent() types.Entity { return backupAttachmentCircuits.parent }

func (backupAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit
// Backup attachment circuit
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the attachment circuit interface. The type
    // is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetFilter() yfilter.YFilter { return backupAttachmentCircuit.YFilter }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) SetFilter(yf yfilter.YFilter) { backupAttachmentCircuit.YFilter = yf }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetSegmentPath() string {
    return "backup-attachment-circuit" + "[interface-name='" + fmt.Sprintf("%v", backupAttachmentCircuit.InterfaceName) + "']"
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = backupAttachmentCircuit.InterfaceName
    return leafs
}

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetYangName() string { return "backup-attachment-circuit" }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) SetParent(parent types.Entity) { backupAttachmentCircuit.parent = parent }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetParent() types.Entity { return backupAttachmentCircuit.parent }

func (backupAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_BackupAttachmentCircuits_BackupAttachmentCircuit) GetParentYangName() string { return "backup-attachment-circuits" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns
// List of EVPN Services
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN P2P Service Configuration. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn.
    PseudowireEvpn []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetFilter() yfilter.YFilter { return pseudowireEvpns.YFilter }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) SetFilter(yf yfilter.YFilter) { pseudowireEvpns.YFilter = yf }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetGoName(yname string) string {
    if yname == "pseudowire-evpn" { return "PseudowireEvpn" }
    return ""
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetSegmentPath() string {
    return "pseudowire-evpns"
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-evpn" {
        for _, c := range pseudowireEvpns.PseudowireEvpn {
            if pseudowireEvpns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn{}
        pseudowireEvpns.PseudowireEvpn = append(pseudowireEvpns.PseudowireEvpn, child)
        return &pseudowireEvpns.PseudowireEvpn[len(pseudowireEvpns.PseudowireEvpn)-1]
    }
    return nil
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowireEvpns.PseudowireEvpn {
        children[pseudowireEvpns.PseudowireEvpn[i].GetSegmentPath()] = &pseudowireEvpns.PseudowireEvpn[i]
    }
    return children
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetYangName() string { return "pseudowire-evpns" }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) SetParent(parent types.Entity) { pseudowireEvpns.parent = parent }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetParent() types.Entity { return pseudowireEvpns.parent }

func (pseudowireEvpns *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn
// EVPN P2P Service Configuration
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..65534.
    Eviid interface{}

    // This attribute is a key. Remote AC ID. The type is interface{} with range:
    // 1..16777215.
    RemoteAcid interface{}

    // This attribute is a key. Source AC ID. The type is interface{} with range:
    // 1..16777215.
    SourceAcid interface{}
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetFilter() yfilter.YFilter { return pseudowireEvpn.YFilter }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) SetFilter(yf yfilter.YFilter) { pseudowireEvpn.YFilter = yf }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "remote-acid" { return "RemoteAcid" }
    if yname == "source-acid" { return "SourceAcid" }
    return ""
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetSegmentPath() string {
    return "pseudowire-evpn" + "[eviid='" + fmt.Sprintf("%v", pseudowireEvpn.Eviid) + "']" + "[remote-acid='" + fmt.Sprintf("%v", pseudowireEvpn.RemoteAcid) + "']" + "[source-acid='" + fmt.Sprintf("%v", pseudowireEvpn.SourceAcid) + "']"
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = pseudowireEvpn.Eviid
    leafs["remote-acid"] = pseudowireEvpn.RemoteAcid
    leafs["source-acid"] = pseudowireEvpn.SourceAcid
    return leafs
}

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetYangName() string { return "pseudowire-evpn" }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) SetParent(parent types.Entity) { pseudowireEvpn.parent = parent }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetParent() types.Entity { return pseudowireEvpn.parent }

func (pseudowireEvpn *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireEvpns_PseudowireEvpn) GetParentYangName() string { return "pseudowire-evpns" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires
// List of pseudowires
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire configuration. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire.
    Pseudowire []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetFilter() yfilter.YFilter { return pseudowires.YFilter }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) SetFilter(yf yfilter.YFilter) { pseudowires.YFilter = yf }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetGoName(yname string) string {
    if yname == "pseudowire" { return "Pseudowire" }
    return ""
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetSegmentPath() string {
    return "pseudowires"
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire" {
        for _, c := range pseudowires.Pseudowire {
            if pseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire{}
        pseudowires.Pseudowire = append(pseudowires.Pseudowire, child)
        return &pseudowires.Pseudowire[len(pseudowires.Pseudowire)-1]
    }
    return nil
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowires.Pseudowire {
        children[pseudowires.Pseudowire[i].GetSegmentPath()] = &pseudowires.Pseudowire[i]
    }
    return children
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetYangName() string { return "pseudowires" }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) SetParent(parent types.Entity) { pseudowires.parent = parent }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetParent() types.Entity { return pseudowires.parent }

func (pseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire
// Pseudowire configuration
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // keys: neighbor. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor.
    Neighbor []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor

    // keys: pseudowire-address. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress.
    PseudowireAddress []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetFilter() yfilter.YFilter { return pseudowire.YFilter }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) SetFilter(yf yfilter.YFilter) { pseudowire.YFilter = yf }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetGoName(yname string) string {
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-address" { return "PseudowireAddress" }
    return ""
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetSegmentPath() string {
    return "pseudowire" + "[pseudowire-id='" + fmt.Sprintf("%v", pseudowire.PseudowireId) + "']"
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range pseudowire.Neighbor {
            if pseudowire.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor{}
        pseudowire.Neighbor = append(pseudowire.Neighbor, child)
        return &pseudowire.Neighbor[len(pseudowire.Neighbor)-1]
    }
    if childYangName == "pseudowire-address" {
        for _, c := range pseudowire.PseudowireAddress {
            if pseudowire.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress{}
        pseudowire.PseudowireAddress = append(pseudowire.PseudowireAddress, child)
        return &pseudowire.PseudowireAddress[len(pseudowire.PseudowireAddress)-1]
    }
    return nil
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowire.Neighbor {
        children[pseudowire.Neighbor[i].GetSegmentPath()] = &pseudowire.Neighbor[i]
    }
    for i := range pseudowire.PseudowireAddress {
        children[pseudowire.PseudowireAddress[i].GetSegmentPath()] = &pseudowire.PseudowireAddress[i]
    }
    return children
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pseudowire-id"] = pseudowire.PseudowireId
    return leafs
}

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetYangName() string { return "pseudowire" }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) SetParent(parent types.Entity) { pseudowire.parent = parent }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetParent() types.Entity { return pseudowire.parent }

func (pseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire) GetParentYangName() string { return "pseudowires" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor
// keys: neighbor
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Pseudowire IPv4 address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // Tag Impose vlan tagged mode. The type is interface{} with range: 1..4094.
    TagImpose interface{}

    // Name of the pseudowire class. The type is string with length: 1..32.
    Class interface{}

    // Value of the Pseudowire source address. Must be IPv6 only. The type is one
    // of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Pseudowire Bandwidth. The type is interface{} with range: 0..4294967295.
    Bandwidth interface{}

    // MPLS static labels.
    MplsStaticLabels L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels

    // List of pseudowires.
    BackupPseudowires L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires

    // L2TP Static Attributes.
    L2TpStaticAttributes L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes

    // Pseudowire L2TPv3 static configuration.
    L2TpStatic L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "tag-impose" { return "TagImpose" }
    if yname == "class" { return "Class" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "mpls-static-labels" { return "MplsStaticLabels" }
    if yname == "backup-pseudowires" { return "BackupPseudowires" }
    if yname == "l2tp-static-attributes" { return "L2TpStaticAttributes" }
    if yname == "l2tp-static" { return "L2TpStatic" }
    return ""
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor='" + fmt.Sprintf("%v", neighbor.Neighbor) + "']"
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-static-labels" {
        return &neighbor.MplsStaticLabels
    }
    if childYangName == "backup-pseudowires" {
        return &neighbor.BackupPseudowires
    }
    if childYangName == "l2tp-static-attributes" {
        return &neighbor.L2TpStaticAttributes
    }
    if childYangName == "l2tp-static" {
        return &neighbor.L2TpStatic
    }
    return nil
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mpls-static-labels"] = &neighbor.MplsStaticLabels
    children["backup-pseudowires"] = &neighbor.BackupPseudowires
    children["l2tp-static-attributes"] = &neighbor.L2TpStaticAttributes
    children["l2tp-static"] = &neighbor.L2TpStatic
    return children
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = neighbor.Neighbor
    leafs["tag-impose"] = neighbor.TagImpose
    leafs["class"] = neighbor.Class
    leafs["source-address"] = neighbor.SourceAddress
    leafs["bandwidth"] = neighbor.Bandwidth
    return leafs
}

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor) GetParentYangName() string { return "pseudowire" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels
// MPLS static labels
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetFilter() yfilter.YFilter { return mplsStaticLabels.YFilter }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) SetFilter(yf yfilter.YFilter) { mplsStaticLabels.YFilter = yf }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetSegmentPath() string {
    return "mpls-static-labels"
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = mplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = mplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetYangName() string { return "mpls-static-labels" }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) SetParent(parent types.Entity) { mplsStaticLabels.parent = parent }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetParent() types.Entity { return mplsStaticLabels.parent }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_MplsStaticLabels) GetParentYangName() string { return "neighbor" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires
// List of pseudowires
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Backup pseudowire for the cross connect. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire.
    BackupPseudowire []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetFilter() yfilter.YFilter { return backupPseudowires.YFilter }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) SetFilter(yf yfilter.YFilter) { backupPseudowires.YFilter = yf }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetGoName(yname string) string {
    if yname == "backup-pseudowire" { return "BackupPseudowire" }
    return ""
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetSegmentPath() string {
    return "backup-pseudowires"
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-pseudowire" {
        for _, c := range backupPseudowires.BackupPseudowire {
            if backupPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire{}
        backupPseudowires.BackupPseudowire = append(backupPseudowires.BackupPseudowire, child)
        return &backupPseudowires.BackupPseudowire[len(backupPseudowires.BackupPseudowire)-1]
    }
    return nil
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupPseudowires.BackupPseudowire {
        children[backupPseudowires.BackupPseudowire[i].GetSegmentPath()] = &backupPseudowires.BackupPseudowire[i]
    }
    return children
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetYangName() string { return "backup-pseudowires" }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) SetParent(parent types.Entity) { backupPseudowires.parent = parent }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetParent() types.Entity { return backupPseudowires.parent }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires) GetParentYangName() string { return "neighbor" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire
// Backup pseudowire for the cross connect
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // PW class template name to use for the backup PW. The type is string with
    // length: 1..32.
    BackupPwClass interface{}

    // MPLS static labels.
    BackupMplsStaticLabels L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetFilter() yfilter.YFilter { return backupPseudowire.YFilter }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) SetFilter(yf yfilter.YFilter) { backupPseudowire.YFilter = yf }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "backup-pw-class" { return "BackupPwClass" }
    if yname == "backup-mpls-static-labels" { return "BackupMplsStaticLabels" }
    return ""
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetSegmentPath() string {
    return "backup-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", backupPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", backupPseudowire.PseudowireId) + "']"
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-mpls-static-labels" {
        return &backupPseudowire.BackupMplsStaticLabels
    }
    return nil
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup-mpls-static-labels"] = &backupPseudowire.BackupMplsStaticLabels
    return children
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = backupPseudowire.Neighbor
    leafs["pseudowire-id"] = backupPseudowire.PseudowireId
    leafs["backup-pw-class"] = backupPseudowire.BackupPwClass
    return leafs
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetYangName() string { return "backup-pseudowire" }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) SetParent(parent types.Entity) { backupPseudowire.parent = parent }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetParent() types.Entity { return backupPseudowire.parent }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire) GetParentYangName() string { return "backup-pseudowires" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels
// MPLS static labels
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetFilter() yfilter.YFilter { return backupMplsStaticLabels.YFilter }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) SetFilter(yf yfilter.YFilter) { backupMplsStaticLabels.YFilter = yf }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetSegmentPath() string {
    return "backup-mpls-static-labels"
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = backupMplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = backupMplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetYangName() string { return "backup-mpls-static-labels" }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) SetParent(parent types.Entity) { backupMplsStaticLabels.parent = parent }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetParent() types.Entity { return backupMplsStaticLabels.parent }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetParentYangName() string { return "backup-pseudowire" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes
// L2TP Static Attributes
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2TP remote session ID. The type is interface{} with range: 1..65535.
    L2TpRemoteSessionId interface{}

    // L2TP local session ID. The type is interface{} with range: 1..65535.
    L2TpLocalSessionId interface{}

    // L2TP remote cookie.
    L2TpRemoteCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie

    // L2TP secondary local cookie.
    L2TpSecondaryLocalCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie

    // L2TP local cookie.
    L2TpLocalCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetFilter() yfilter.YFilter { return l2TpStaticAttributes.YFilter }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) SetFilter(yf yfilter.YFilter) { l2TpStaticAttributes.YFilter = yf }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetGoName(yname string) string {
    if yname == "l2tp-remote-session-id" { return "L2TpRemoteSessionId" }
    if yname == "l2tp-local-session-id" { return "L2TpLocalSessionId" }
    if yname == "l2tp-remote-cookie" { return "L2TpRemoteCookie" }
    if yname == "l2tp-secondary-local-cookie" { return "L2TpSecondaryLocalCookie" }
    if yname == "l2tp-local-cookie" { return "L2TpLocalCookie" }
    return ""
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetSegmentPath() string {
    return "l2tp-static-attributes"
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2tp-remote-cookie" {
        return &l2TpStaticAttributes.L2TpRemoteCookie
    }
    if childYangName == "l2tp-secondary-local-cookie" {
        return &l2TpStaticAttributes.L2TpSecondaryLocalCookie
    }
    if childYangName == "l2tp-local-cookie" {
        return &l2TpStaticAttributes.L2TpLocalCookie
    }
    return nil
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["l2tp-remote-cookie"] = &l2TpStaticAttributes.L2TpRemoteCookie
    children["l2tp-secondary-local-cookie"] = &l2TpStaticAttributes.L2TpSecondaryLocalCookie
    children["l2tp-local-cookie"] = &l2TpStaticAttributes.L2TpLocalCookie
    return children
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l2tp-remote-session-id"] = l2TpStaticAttributes.L2TpRemoteSessionId
    leafs["l2tp-local-session-id"] = l2TpStaticAttributes.L2TpLocalSessionId
    return leafs
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetYangName() string { return "l2tp-static-attributes" }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) SetParent(parent types.Entity) { l2TpStaticAttributes.parent = parent }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetParent() types.Entity { return l2TpStaticAttributes.parent }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes) GetParentYangName() string { return "neighbor" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie
// L2TP remote cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower remote cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher remote cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetFilter() yfilter.YFilter { return l2TpRemoteCookie.YFilter }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) SetFilter(yf yfilter.YFilter) { l2TpRemoteCookie.YFilter = yf }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetSegmentPath() string {
    return "l2tp-remote-cookie"
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpRemoteCookie.Size
    leafs["lower-value"] = l2TpRemoteCookie.LowerValue
    leafs["higher-value"] = l2TpRemoteCookie.HigherValue
    return leafs
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetYangName() string { return "l2tp-remote-cookie" }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) SetParent(parent types.Entity) { l2TpRemoteCookie.parent = parent }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetParent() types.Entity { return l2TpRemoteCookie.parent }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpRemoteCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie
// L2TP secondary local cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower local cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher local cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetFilter() yfilter.YFilter { return l2TpSecondaryLocalCookie.YFilter }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) SetFilter(yf yfilter.YFilter) { l2TpSecondaryLocalCookie.YFilter = yf }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetSegmentPath() string {
    return "l2tp-secondary-local-cookie"
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpSecondaryLocalCookie.Size
    leafs["lower-value"] = l2TpSecondaryLocalCookie.LowerValue
    leafs["higher-value"] = l2TpSecondaryLocalCookie.HigherValue
    return leafs
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetYangName() string { return "l2tp-secondary-local-cookie" }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) SetParent(parent types.Entity) { l2TpSecondaryLocalCookie.parent = parent }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetParent() types.Entity { return l2TpSecondaryLocalCookie.parent }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie
// L2TP local cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower local cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher local cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetFilter() yfilter.YFilter { return l2TpLocalCookie.YFilter }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) SetFilter(yf yfilter.YFilter) { l2TpLocalCookie.YFilter = yf }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetSegmentPath() string {
    return "l2tp-local-cookie"
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpLocalCookie.Size
    leafs["lower-value"] = l2TpLocalCookie.LowerValue
    leafs["higher-value"] = l2TpLocalCookie.HigherValue
    return leafs
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetYangName() string { return "l2tp-local-cookie" }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) SetParent(parent types.Entity) { l2TpLocalCookie.parent = parent }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetParent() types.Entity { return l2TpLocalCookie.parent }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStaticAttributes_L2TpLocalCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic
// Pseudowire L2TPv3 static configuration
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable pseudowire L2TPv3 static configuration. The type is interface{}.
    Enable interface{}
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetFilter() yfilter.YFilter { return l2TpStatic.YFilter }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) SetFilter(yf yfilter.YFilter) { l2TpStatic.YFilter = yf }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetSegmentPath() string {
    return "l2tp-static"
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = l2TpStatic.Enable
    return leafs
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetYangName() string { return "l2tp-static" }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) SetParent(parent types.Entity) { l2TpStatic.parent = parent }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetParent() types.Entity { return l2TpStatic.parent }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_Neighbor_L2TpStatic) GetParentYangName() string { return "neighbor" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress
// keys: pseudowire-address
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Pseudowire IPv6 address. A pseudowire can have
    // only one address: IPv4 or IPv6. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PseudowireAddress interface{}

    // Tag Impose vlan tagged mode. The type is interface{} with range: 1..4094.
    TagImpose interface{}

    // Name of the pseudowire class. The type is string with length: 1..32.
    Class interface{}

    // Value of the Pseudowire source address. Must be IPv6 only. The type is one
    // of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Pseudowire Bandwidth. The type is interface{} with range: 0..4294967295.
    Bandwidth interface{}

    // MPLS static labels.
    MplsStaticLabels L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels

    // List of pseudowires.
    BackupPseudowires L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires

    // L2TP Static Attributes.
    L2TpStaticAttributes L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes

    // Pseudowire L2TPv3 static configuration.
    L2TpStatic L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetFilter() yfilter.YFilter { return pseudowireAddress.YFilter }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) SetFilter(yf yfilter.YFilter) { pseudowireAddress.YFilter = yf }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetGoName(yname string) string {
    if yname == "pseudowire-address" { return "PseudowireAddress" }
    if yname == "tag-impose" { return "TagImpose" }
    if yname == "class" { return "Class" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "mpls-static-labels" { return "MplsStaticLabels" }
    if yname == "backup-pseudowires" { return "BackupPseudowires" }
    if yname == "l2tp-static-attributes" { return "L2TpStaticAttributes" }
    if yname == "l2tp-static" { return "L2TpStatic" }
    return ""
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetSegmentPath() string {
    return "pseudowire-address" + "[pseudowire-address='" + fmt.Sprintf("%v", pseudowireAddress.PseudowireAddress) + "']"
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-static-labels" {
        return &pseudowireAddress.MplsStaticLabels
    }
    if childYangName == "backup-pseudowires" {
        return &pseudowireAddress.BackupPseudowires
    }
    if childYangName == "l2tp-static-attributes" {
        return &pseudowireAddress.L2TpStaticAttributes
    }
    if childYangName == "l2tp-static" {
        return &pseudowireAddress.L2TpStatic
    }
    return nil
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mpls-static-labels"] = &pseudowireAddress.MplsStaticLabels
    children["backup-pseudowires"] = &pseudowireAddress.BackupPseudowires
    children["l2tp-static-attributes"] = &pseudowireAddress.L2TpStaticAttributes
    children["l2tp-static"] = &pseudowireAddress.L2TpStatic
    return children
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pseudowire-address"] = pseudowireAddress.PseudowireAddress
    leafs["tag-impose"] = pseudowireAddress.TagImpose
    leafs["class"] = pseudowireAddress.Class
    leafs["source-address"] = pseudowireAddress.SourceAddress
    leafs["bandwidth"] = pseudowireAddress.Bandwidth
    return leafs
}

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetYangName() string { return "pseudowire-address" }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) SetParent(parent types.Entity) { pseudowireAddress.parent = parent }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetParent() types.Entity { return pseudowireAddress.parent }

func (pseudowireAddress *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress) GetParentYangName() string { return "pseudowire" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels
// MPLS static labels
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetFilter() yfilter.YFilter { return mplsStaticLabels.YFilter }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) SetFilter(yf yfilter.YFilter) { mplsStaticLabels.YFilter = yf }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetSegmentPath() string {
    return "mpls-static-labels"
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = mplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = mplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetYangName() string { return "mpls-static-labels" }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) SetParent(parent types.Entity) { mplsStaticLabels.parent = parent }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetParent() types.Entity { return mplsStaticLabels.parent }

func (mplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_MplsStaticLabels) GetParentYangName() string { return "pseudowire-address" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires
// List of pseudowires
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Backup pseudowire for the cross connect. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire.
    BackupPseudowire []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetFilter() yfilter.YFilter { return backupPseudowires.YFilter }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) SetFilter(yf yfilter.YFilter) { backupPseudowires.YFilter = yf }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetGoName(yname string) string {
    if yname == "backup-pseudowire" { return "BackupPseudowire" }
    return ""
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetSegmentPath() string {
    return "backup-pseudowires"
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-pseudowire" {
        for _, c := range backupPseudowires.BackupPseudowire {
            if backupPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire{}
        backupPseudowires.BackupPseudowire = append(backupPseudowires.BackupPseudowire, child)
        return &backupPseudowires.BackupPseudowire[len(backupPseudowires.BackupPseudowire)-1]
    }
    return nil
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupPseudowires.BackupPseudowire {
        children[backupPseudowires.BackupPseudowire[i].GetSegmentPath()] = &backupPseudowires.BackupPseudowire[i]
    }
    return children
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetYangName() string { return "backup-pseudowires" }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) SetParent(parent types.Entity) { backupPseudowires.parent = parent }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetParent() types.Entity { return backupPseudowires.parent }

func (backupPseudowires *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires) GetParentYangName() string { return "pseudowire-address" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire
// Backup pseudowire for the cross connect
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // PW class template name to use for the backup PW. The type is string with
    // length: 1..32.
    BackupPwClass interface{}

    // MPLS static labels.
    BackupMplsStaticLabels L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetFilter() yfilter.YFilter { return backupPseudowire.YFilter }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) SetFilter(yf yfilter.YFilter) { backupPseudowire.YFilter = yf }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "backup-pw-class" { return "BackupPwClass" }
    if yname == "backup-mpls-static-labels" { return "BackupMplsStaticLabels" }
    return ""
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetSegmentPath() string {
    return "backup-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", backupPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", backupPseudowire.PseudowireId) + "']"
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-mpls-static-labels" {
        return &backupPseudowire.BackupMplsStaticLabels
    }
    return nil
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup-mpls-static-labels"] = &backupPseudowire.BackupMplsStaticLabels
    return children
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = backupPseudowire.Neighbor
    leafs["pseudowire-id"] = backupPseudowire.PseudowireId
    leafs["backup-pw-class"] = backupPseudowire.BackupPwClass
    return leafs
}

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetYangName() string { return "backup-pseudowire" }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) SetParent(parent types.Entity) { backupPseudowire.parent = parent }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetParent() types.Entity { return backupPseudowire.parent }

func (backupPseudowire *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire) GetParentYangName() string { return "backup-pseudowires" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels
// MPLS static labels
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetFilter() yfilter.YFilter { return backupMplsStaticLabels.YFilter }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) SetFilter(yf yfilter.YFilter) { backupMplsStaticLabels.YFilter = yf }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetSegmentPath() string {
    return "backup-mpls-static-labels"
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = backupMplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = backupMplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetYangName() string { return "backup-mpls-static-labels" }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) SetParent(parent types.Entity) { backupMplsStaticLabels.parent = parent }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetParent() types.Entity { return backupMplsStaticLabels.parent }

func (backupMplsStaticLabels *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_BackupPseudowires_BackupPseudowire_BackupMplsStaticLabels) GetParentYangName() string { return "backup-pseudowire" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes
// L2TP Static Attributes
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2TP remote session ID. The type is interface{} with range: 1..65535.
    L2TpRemoteSessionId interface{}

    // L2TP local session ID. The type is interface{} with range: 1..65535.
    L2TpLocalSessionId interface{}

    // L2TP remote cookie.
    L2TpRemoteCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie

    // L2TP secondary local cookie.
    L2TpSecondaryLocalCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie

    // L2TP local cookie.
    L2TpLocalCookie L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetFilter() yfilter.YFilter { return l2TpStaticAttributes.YFilter }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) SetFilter(yf yfilter.YFilter) { l2TpStaticAttributes.YFilter = yf }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetGoName(yname string) string {
    if yname == "l2tp-remote-session-id" { return "L2TpRemoteSessionId" }
    if yname == "l2tp-local-session-id" { return "L2TpLocalSessionId" }
    if yname == "l2tp-remote-cookie" { return "L2TpRemoteCookie" }
    if yname == "l2tp-secondary-local-cookie" { return "L2TpSecondaryLocalCookie" }
    if yname == "l2tp-local-cookie" { return "L2TpLocalCookie" }
    return ""
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetSegmentPath() string {
    return "l2tp-static-attributes"
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2tp-remote-cookie" {
        return &l2TpStaticAttributes.L2TpRemoteCookie
    }
    if childYangName == "l2tp-secondary-local-cookie" {
        return &l2TpStaticAttributes.L2TpSecondaryLocalCookie
    }
    if childYangName == "l2tp-local-cookie" {
        return &l2TpStaticAttributes.L2TpLocalCookie
    }
    return nil
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["l2tp-remote-cookie"] = &l2TpStaticAttributes.L2TpRemoteCookie
    children["l2tp-secondary-local-cookie"] = &l2TpStaticAttributes.L2TpSecondaryLocalCookie
    children["l2tp-local-cookie"] = &l2TpStaticAttributes.L2TpLocalCookie
    return children
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["l2tp-remote-session-id"] = l2TpStaticAttributes.L2TpRemoteSessionId
    leafs["l2tp-local-session-id"] = l2TpStaticAttributes.L2TpLocalSessionId
    return leafs
}

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetYangName() string { return "l2tp-static-attributes" }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) SetParent(parent types.Entity) { l2TpStaticAttributes.parent = parent }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetParent() types.Entity { return l2TpStaticAttributes.parent }

func (l2TpStaticAttributes *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes) GetParentYangName() string { return "pseudowire-address" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie
// L2TP remote cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower remote cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher remote cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetFilter() yfilter.YFilter { return l2TpRemoteCookie.YFilter }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) SetFilter(yf yfilter.YFilter) { l2TpRemoteCookie.YFilter = yf }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetSegmentPath() string {
    return "l2tp-remote-cookie"
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpRemoteCookie.Size
    leafs["lower-value"] = l2TpRemoteCookie.LowerValue
    leafs["higher-value"] = l2TpRemoteCookie.HigherValue
    return leafs
}

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetYangName() string { return "l2tp-remote-cookie" }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) SetParent(parent types.Entity) { l2TpRemoteCookie.parent = parent }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetParent() types.Entity { return l2TpRemoteCookie.parent }

func (l2TpRemoteCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpRemoteCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie
// L2TP secondary local cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower local cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher local cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetFilter() yfilter.YFilter { return l2TpSecondaryLocalCookie.YFilter }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) SetFilter(yf yfilter.YFilter) { l2TpSecondaryLocalCookie.YFilter = yf }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetSegmentPath() string {
    return "l2tp-secondary-local-cookie"
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpSecondaryLocalCookie.Size
    leafs["lower-value"] = l2TpSecondaryLocalCookie.LowerValue
    leafs["higher-value"] = l2TpSecondaryLocalCookie.HigherValue
    return leafs
}

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetYangName() string { return "l2tp-secondary-local-cookie" }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) SetParent(parent types.Entity) { l2TpSecondaryLocalCookie.parent = parent }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetParent() types.Entity { return l2TpSecondaryLocalCookie.parent }

func (l2TpSecondaryLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpSecondaryLocalCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie
// L2TP local cookie
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local cookie size. The type is L2tpCookieSize.
    Size interface{}

    // Lower local cookie value. The type is interface{} with range:
    // 0..4294967295.
    LowerValue interface{}

    // Higher local cookie value. The type is interface{} with range:
    // 0..4294967295.
    HigherValue interface{}
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetFilter() yfilter.YFilter { return l2TpLocalCookie.YFilter }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) SetFilter(yf yfilter.YFilter) { l2TpLocalCookie.YFilter = yf }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "lower-value" { return "LowerValue" }
    if yname == "higher-value" { return "HigherValue" }
    return ""
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetSegmentPath() string {
    return "l2tp-local-cookie"
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = l2TpLocalCookie.Size
    leafs["lower-value"] = l2TpLocalCookie.LowerValue
    leafs["higher-value"] = l2TpLocalCookie.HigherValue
    return leafs
}

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetYangName() string { return "l2tp-local-cookie" }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) SetParent(parent types.Entity) { l2TpLocalCookie.parent = parent }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetParent() types.Entity { return l2TpLocalCookie.parent }

func (l2TpLocalCookie *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStaticAttributes_L2TpLocalCookie) GetParentYangName() string { return "l2tp-static-attributes" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic
// Pseudowire L2TPv3 static configuration
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable pseudowire L2TPv3 static configuration. The type is interface{}.
    Enable interface{}
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetFilter() yfilter.YFilter { return l2TpStatic.YFilter }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) SetFilter(yf yfilter.YFilter) { l2TpStatic.YFilter = yf }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetSegmentPath() string {
    return "l2tp-static"
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = l2TpStatic.Enable
    return leafs
}

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetBundleName() string { return "cisco_ios_xr" }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetYangName() string { return "l2tp-static" }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) SetParent(parent types.Entity) { l2TpStatic.parent = parent }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetParent() types.Entity { return l2TpStatic.parent }

func (l2TpStatic *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_Pseudowires_Pseudowire_PseudowireAddress_L2TpStatic) GetParentYangName() string { return "pseudowire-address" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions
// List of Monitor session segments
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Monitor session segment. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession.
    MonitorSession []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetFilter() yfilter.YFilter { return monitorSessions.YFilter }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) SetFilter(yf yfilter.YFilter) { monitorSessions.YFilter = yf }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetGoName(yname string) string {
    if yname == "monitor-session" { return "MonitorSession" }
    return ""
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetSegmentPath() string {
    return "monitor-sessions"
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "monitor-session" {
        for _, c := range monitorSessions.MonitorSession {
            if monitorSessions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession{}
        monitorSessions.MonitorSession = append(monitorSessions.MonitorSession, child)
        return &monitorSessions.MonitorSession[len(monitorSessions.MonitorSession)-1]
    }
    return nil
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range monitorSessions.MonitorSession {
        children[monitorSessions.MonitorSession[i].GetSegmentPath()] = &monitorSessions.MonitorSession[i]
    }
    return children
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetBundleName() string { return "cisco_ios_xr" }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetYangName() string { return "monitor-sessions" }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) SetParent(parent types.Entity) { monitorSessions.parent = parent }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetParent() types.Entity { return monitorSessions.parent }

func (monitorSessions *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession
// Monitor session segment
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the monitor session. The type is string
    // with length: 1..64.
    Name interface{}

    // Enable monitor session segment . The type is interface{}.
    Enable interface{}
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetFilter() yfilter.YFilter { return monitorSession.YFilter }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) SetFilter(yf yfilter.YFilter) { monitorSession.YFilter = yf }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetSegmentPath() string {
    return "monitor-session" + "[name='" + fmt.Sprintf("%v", monitorSession.Name) + "']"
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = monitorSession.Name
    leafs["enable"] = monitorSession.Enable
    return leafs
}

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetBundleName() string { return "cisco_ios_xr" }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetYangName() string { return "monitor-session" }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) SetParent(parent types.Entity) { monitorSession.parent = parent }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetParent() types.Entity { return monitorSession.parent }

func (monitorSession *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_MonitorSessions_MonitorSession) GetParentYangName() string { return "monitor-sessions" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds
// List of pseudowire-routed
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire configuration. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted.
    PseudowireRouted []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetFilter() yfilter.YFilter { return pseudowireRouteds.YFilter }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) SetFilter(yf yfilter.YFilter) { pseudowireRouteds.YFilter = yf }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetGoName(yname string) string {
    if yname == "pseudowire-routed" { return "PseudowireRouted" }
    return ""
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetSegmentPath() string {
    return "pseudowire-routeds"
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-routed" {
        for _, c := range pseudowireRouteds.PseudowireRouted {
            if pseudowireRouteds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted{}
        pseudowireRouteds.PseudowireRouted = append(pseudowireRouteds.PseudowireRouted, child)
        return &pseudowireRouteds.PseudowireRouted[len(pseudowireRouteds.PseudowireRouted)-1]
    }
    return nil
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowireRouteds.PseudowireRouted {
        children[pseudowireRouteds.PseudowireRouted[i].GetSegmentPath()] = &pseudowireRouteds.PseudowireRouted[i]
    }
    return children
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetYangName() string { return "pseudowire-routeds" }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) SetParent(parent types.Entity) { pseudowireRouteds.parent = parent }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetParent() types.Entity { return pseudowireRouteds.parent }

func (pseudowireRouteds *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted
// Pseudowire configuration
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Target Global ID. The type is interface{} with
    // range: 1..4294967295.
    GlobalId interface{}

    // This attribute is a key. Target Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. Target AC ID. The type is interface{} with range:
    // 1..4294967295.
    Acid interface{}

    // This attribute is a key. Source AC ID. The type is interface{} with range:
    // 1..4294967295.
    Sacid interface{}

    // Tag Impose vlan tagged mode. The type is interface{} with range: 1..4094.
    TagImpose interface{}

    // Name of the pseudowire class. The type is string with length: 1..32.
    Class interface{}
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetFilter() yfilter.YFilter { return pseudowireRouted.YFilter }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) SetFilter(yf yfilter.YFilter) { pseudowireRouted.YFilter = yf }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetGoName(yname string) string {
    if yname == "global-id" { return "GlobalId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "acid" { return "Acid" }
    if yname == "sacid" { return "Sacid" }
    if yname == "tag-impose" { return "TagImpose" }
    if yname == "class" { return "Class" }
    return ""
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetSegmentPath() string {
    return "pseudowire-routed" + "[global-id='" + fmt.Sprintf("%v", pseudowireRouted.GlobalId) + "']" + "[prefix='" + fmt.Sprintf("%v", pseudowireRouted.Prefix) + "']" + "[acid='" + fmt.Sprintf("%v", pseudowireRouted.Acid) + "']" + "[sacid='" + fmt.Sprintf("%v", pseudowireRouted.Sacid) + "']"
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["global-id"] = pseudowireRouted.GlobalId
    leafs["prefix"] = pseudowireRouted.Prefix
    leafs["acid"] = pseudowireRouted.Acid
    leafs["sacid"] = pseudowireRouted.Sacid
    leafs["tag-impose"] = pseudowireRouted.TagImpose
    leafs["class"] = pseudowireRouted.Class
    return leafs
}

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetYangName() string { return "pseudowire-routed" }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) SetParent(parent types.Entity) { pseudowireRouted.parent = parent }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetParent() types.Entity { return pseudowireRouted.parent }

func (pseudowireRouted *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_PseudowireRouteds_PseudowireRouted) GetParentYangName() string { return "pseudowire-routeds" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits
// List of attachment circuits
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attachment circuit interface. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit.
    AttachmentCircuit []L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetFilter() yfilter.YFilter { return attachmentCircuits.YFilter }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) SetFilter(yf yfilter.YFilter) { attachmentCircuits.YFilter = yf }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetGoName(yname string) string {
    if yname == "attachment-circuit" { return "AttachmentCircuit" }
    return ""
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetSegmentPath() string {
    return "attachment-circuits"
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attachment-circuit" {
        for _, c := range attachmentCircuits.AttachmentCircuit {
            if attachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit{}
        attachmentCircuits.AttachmentCircuit = append(attachmentCircuits.AttachmentCircuit, child)
        return &attachmentCircuits.AttachmentCircuit[len(attachmentCircuits.AttachmentCircuit)-1]
    }
    return nil
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range attachmentCircuits.AttachmentCircuit {
        children[attachmentCircuits.AttachmentCircuit[i].GetSegmentPath()] = &attachmentCircuits.AttachmentCircuit[i]
    }
    return children
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetYangName() string { return "attachment-circuits" }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) SetParent(parent types.Entity) { attachmentCircuits.parent = parent }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetParent() types.Entity { return attachmentCircuits.parent }

func (attachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits) GetParentYangName() string { return "p2p-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit
// Attachment circuit interface
type L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the attachment circuit interface. The type
    // is string with pattern: [a-zA-Z0-9./-]+.
    Name interface{}

    // Enable attachment circuit interface. The type is interface{}.
    Enable interface{}
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetFilter() yfilter.YFilter { return attachmentCircuit.YFilter }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) SetFilter(yf yfilter.YFilter) { attachmentCircuit.YFilter = yf }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetSegmentPath() string {
    return "attachment-circuit" + "[name='" + fmt.Sprintf("%v", attachmentCircuit.Name) + "']"
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = attachmentCircuit.Name
    leafs["enable"] = attachmentCircuit.Enable
    return leafs
}

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetYangName() string { return "attachment-circuit" }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) SetParent(parent types.Entity) { attachmentCircuit.parent = parent }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetParent() types.Entity { return attachmentCircuit.parent }

func (attachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_P2PXconnects_P2PXconnect_AttachmentCircuits_AttachmentCircuit) GetParentYangName() string { return "attachment-circuits" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects
// List of multi point to multi point xconnects
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multi point to multi point xconnect. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect.
    Mp2MpXconnect []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetFilter() yfilter.YFilter { return mp2MpXconnects.YFilter }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) SetFilter(yf yfilter.YFilter) { mp2MpXconnects.YFilter = yf }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetGoName(yname string) string {
    if yname == "mp2mp-xconnect" { return "Mp2MpXconnect" }
    return ""
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetSegmentPath() string {
    return "mp2mp-xconnects"
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mp2mp-xconnect" {
        for _, c := range mp2MpXconnects.Mp2MpXconnect {
            if mp2MpXconnects.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect{}
        mp2MpXconnects.Mp2MpXconnect = append(mp2MpXconnects.Mp2MpXconnect, child)
        return &mp2MpXconnects.Mp2MpXconnect[len(mp2MpXconnects.Mp2MpXconnect)-1]
    }
    return nil
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mp2MpXconnects.Mp2MpXconnect {
        children[mp2MpXconnects.Mp2MpXconnect[i].GetSegmentPath()] = &mp2MpXconnects.Mp2MpXconnect[i]
    }
    return children
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetYangName() string { return "mp2mp-xconnects" }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) SetParent(parent types.Entity) { mp2MpXconnects.parent = parent }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetParent() types.Entity { return mp2MpXconnects.parent }

func (mp2MpXconnects *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects) GetParentYangName() string { return "xconnect-group" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect
// Multi point to multi point xconnect
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the multi point to multi point xconnect.
    // The type is string with length: 1..26.
    Name interface{}

    // Maximum transmission unit for this MP2MP VPWS instance. The type is
    // interface{} with range: 64..65535. Units are byte.
    Mp2Mpmtu interface{}

    // Disable control word. The type is interface{}.
    Mp2MpControlWord interface{}

    // Configure Layer 2 Encapsulation. The type is L2Encapsulation.
    Mp2Mpl2Encapsulation interface{}

    // Interworking. The type is Interworking.
    Mp2MpInterworking interface{}

    // shutdown this MP2MP VPWS instance. The type is interface{}.
    Mp2MpShutdown interface{}

    // VPN Identifier. The type is interface{} with range: 1..4294967295.
    Mp2MpvpnId interface{}

    // auto-discovery in this MP2MP.
    Mp2MpAutoDiscovery L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetFilter() yfilter.YFilter { return mp2MpXconnect.YFilter }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) SetFilter(yf yfilter.YFilter) { mp2MpXconnect.YFilter = yf }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "mp2mpmtu" { return "Mp2Mpmtu" }
    if yname == "mp2mp-control-word" { return "Mp2MpControlWord" }
    if yname == "mp2mpl2-encapsulation" { return "Mp2Mpl2Encapsulation" }
    if yname == "mp2mp-interworking" { return "Mp2MpInterworking" }
    if yname == "mp2mp-shutdown" { return "Mp2MpShutdown" }
    if yname == "mp2mpvpn-id" { return "Mp2MpvpnId" }
    if yname == "mp2mp-auto-discovery" { return "Mp2MpAutoDiscovery" }
    return ""
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetSegmentPath() string {
    return "mp2mp-xconnect" + "[name='" + fmt.Sprintf("%v", mp2MpXconnect.Name) + "']"
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mp2mp-auto-discovery" {
        return &mp2MpXconnect.Mp2MpAutoDiscovery
    }
    return nil
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mp2mp-auto-discovery"] = &mp2MpXconnect.Mp2MpAutoDiscovery
    return children
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = mp2MpXconnect.Name
    leafs["mp2mpmtu"] = mp2MpXconnect.Mp2Mpmtu
    leafs["mp2mp-control-word"] = mp2MpXconnect.Mp2MpControlWord
    leafs["mp2mpl2-encapsulation"] = mp2MpXconnect.Mp2Mpl2Encapsulation
    leafs["mp2mp-interworking"] = mp2MpXconnect.Mp2MpInterworking
    leafs["mp2mp-shutdown"] = mp2MpXconnect.Mp2MpShutdown
    leafs["mp2mpvpn-id"] = mp2MpXconnect.Mp2MpvpnId
    return leafs
}

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetYangName() string { return "mp2mp-xconnect" }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) SetParent(parent types.Entity) { mp2MpXconnect.parent = parent }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetParent() types.Entity { return mp2MpXconnect.parent }

func (mp2MpXconnect *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect) GetParentYangName() string { return "mp2mp-xconnects" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery
// auto-discovery in this MP2MP
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable auto-discovery. The type is interface{}.
    Enable interface{}

    // Route Distinguisher.
    RouteDistinguisher L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher

    // Route policy.
    Mp2MpRoutePolicy L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy

    // Route Target.
    Mp2MpRouteTargets L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets

    // signaling protocol in this MP2MP.
    Mp2MpSignalingProtocol L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetFilter() yfilter.YFilter { return mp2MpAutoDiscovery.YFilter }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) SetFilter(yf yfilter.YFilter) { mp2MpAutoDiscovery.YFilter = yf }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    if yname == "mp2mp-route-policy" { return "Mp2MpRoutePolicy" }
    if yname == "mp2mp-route-targets" { return "Mp2MpRouteTargets" }
    if yname == "mp2mp-signaling-protocol" { return "Mp2MpSignalingProtocol" }
    return ""
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetSegmentPath() string {
    return "mp2mp-auto-discovery"
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-distinguisher" {
        return &mp2MpAutoDiscovery.RouteDistinguisher
    }
    if childYangName == "mp2mp-route-policy" {
        return &mp2MpAutoDiscovery.Mp2MpRoutePolicy
    }
    if childYangName == "mp2mp-route-targets" {
        return &mp2MpAutoDiscovery.Mp2MpRouteTargets
    }
    if childYangName == "mp2mp-signaling-protocol" {
        return &mp2MpAutoDiscovery.Mp2MpSignalingProtocol
    }
    return nil
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-distinguisher"] = &mp2MpAutoDiscovery.RouteDistinguisher
    children["mp2mp-route-policy"] = &mp2MpAutoDiscovery.Mp2MpRoutePolicy
    children["mp2mp-route-targets"] = &mp2MpAutoDiscovery.Mp2MpRouteTargets
    children["mp2mp-signaling-protocol"] = &mp2MpAutoDiscovery.Mp2MpSignalingProtocol
    return children
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = mp2MpAutoDiscovery.Enable
    return leafs
}

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetYangName() string { return "mp2mp-auto-discovery" }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) SetParent(parent types.Entity) { mp2MpAutoDiscovery.parent = parent }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetParent() types.Entity { return mp2MpAutoDiscovery.parent }

func (mp2MpAutoDiscovery *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery) GetParentYangName() string { return "mp2mp-xconnect" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher
// Route Distinguisher
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router distinguisher type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetFilter() yfilter.YFilter { return routeDistinguisher.YFilter }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) SetFilter(yf yfilter.YFilter) { routeDistinguisher.YFilter = yf }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetSegmentPath() string {
    return "route-distinguisher"
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = routeDistinguisher.Type
    leafs["as"] = routeDistinguisher.As
    leafs["as-index"] = routeDistinguisher.AsIndex
    leafs["address"] = routeDistinguisher.Address
    leafs["addr-index"] = routeDistinguisher.AddrIndex
    return leafs
}

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetYangName() string { return "route-distinguisher" }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) SetParent(parent types.Entity) { routeDistinguisher.parent = parent }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetParent() types.Entity { return routeDistinguisher.parent }

func (routeDistinguisher *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_RouteDistinguisher) GetParentYangName() string { return "mp2mp-auto-discovery" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy
// Route policy
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Export route policy. The type is string.
    Export interface{}
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetFilter() yfilter.YFilter { return mp2MpRoutePolicy.YFilter }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) SetFilter(yf yfilter.YFilter) { mp2MpRoutePolicy.YFilter = yf }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetGoName(yname string) string {
    if yname == "export" { return "Export" }
    return ""
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetSegmentPath() string {
    return "mp2mp-route-policy"
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["export"] = mp2MpRoutePolicy.Export
    return leafs
}

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetYangName() string { return "mp2mp-route-policy" }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) SetParent(parent types.Entity) { mp2MpRoutePolicy.parent = parent }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetParent() types.Entity { return mp2MpRoutePolicy.parent }

func (mp2MpRoutePolicy *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRoutePolicy) GetParentYangName() string { return "mp2mp-auto-discovery" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets
// Route Target
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Route Target. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget.
    Mp2MpRouteTarget []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetFilter() yfilter.YFilter { return mp2MpRouteTargets.YFilter }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) SetFilter(yf yfilter.YFilter) { mp2MpRouteTargets.YFilter = yf }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetGoName(yname string) string {
    if yname == "mp2mp-route-target" { return "Mp2MpRouteTarget" }
    return ""
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetSegmentPath() string {
    return "mp2mp-route-targets"
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mp2mp-route-target" {
        for _, c := range mp2MpRouteTargets.Mp2MpRouteTarget {
            if mp2MpRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget{}
        mp2MpRouteTargets.Mp2MpRouteTarget = append(mp2MpRouteTargets.Mp2MpRouteTarget, child)
        return &mp2MpRouteTargets.Mp2MpRouteTarget[len(mp2MpRouteTargets.Mp2MpRouteTarget)-1]
    }
    return nil
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mp2MpRouteTargets.Mp2MpRouteTarget {
        children[mp2MpRouteTargets.Mp2MpRouteTarget[i].GetSegmentPath()] = &mp2MpRouteTargets.Mp2MpRouteTarget[i]
    }
    return children
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetYangName() string { return "mp2mp-route-targets" }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) SetParent(parent types.Entity) { mp2MpRouteTargets.parent = parent }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetParent() types.Entity { return mp2MpRouteTargets.parent }

func (mp2MpRouteTargets *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets) GetParentYangName() string { return "mp2mp-auto-discovery" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget
// Name of the Route Target
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // two byte as or four byte as. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs.
    TwoByteAsOrFourByteAs []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs

    // ipv4 address. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address.
    Ipv4Address []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetFilter() yfilter.YFilter { return mp2MpRouteTarget.YFilter }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) SetFilter(yf yfilter.YFilter) { mp2MpRouteTarget.YFilter = yf }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "format" { return "Format" }
    if yname == "two-byte-as-or-four-byte-as" { return "TwoByteAsOrFourByteAs" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    return ""
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetSegmentPath() string {
    return "mp2mp-route-target" + "[role='" + fmt.Sprintf("%v", mp2MpRouteTarget.Role) + "']" + "[format='" + fmt.Sprintf("%v", mp2MpRouteTarget.Format) + "']"
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "two-byte-as-or-four-byte-as" {
        for _, c := range mp2MpRouteTarget.TwoByteAsOrFourByteAs {
            if mp2MpRouteTarget.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs{}
        mp2MpRouteTarget.TwoByteAsOrFourByteAs = append(mp2MpRouteTarget.TwoByteAsOrFourByteAs, child)
        return &mp2MpRouteTarget.TwoByteAsOrFourByteAs[len(mp2MpRouteTarget.TwoByteAsOrFourByteAs)-1]
    }
    if childYangName == "ipv4-address" {
        for _, c := range mp2MpRouteTarget.Ipv4Address {
            if mp2MpRouteTarget.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address{}
        mp2MpRouteTarget.Ipv4Address = append(mp2MpRouteTarget.Ipv4Address, child)
        return &mp2MpRouteTarget.Ipv4Address[len(mp2MpRouteTarget.Ipv4Address)-1]
    }
    return nil
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mp2MpRouteTarget.TwoByteAsOrFourByteAs {
        children[mp2MpRouteTarget.TwoByteAsOrFourByteAs[i].GetSegmentPath()] = &mp2MpRouteTarget.TwoByteAsOrFourByteAs[i]
    }
    for i := range mp2MpRouteTarget.Ipv4Address {
        children[mp2MpRouteTarget.Ipv4Address[i].GetSegmentPath()] = &mp2MpRouteTarget.Ipv4Address[i]
    }
    return children
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = mp2MpRouteTarget.Role
    leafs["format"] = mp2MpRouteTarget.Format
    return leafs
}

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetYangName() string { return "mp2mp-route-target" }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) SetParent(parent types.Entity) { mp2MpRouteTarget.parent = parent }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetParent() types.Entity { return mp2MpRouteTarget.parent }

func (mp2MpRouteTarget *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget) GetParentYangName() string { return "mp2mp-route-targets" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs
// two byte as or four byte as
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Two byte or 4 byte AS number. The type is
    // interface{} with range: 1..4294967295.
    As interface{}

    // This attribute is a key. AS:nn (hex or decimal format). The type is
    // interface{} with range: 0..4294967295.
    AsIndex interface{}
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetFilter() yfilter.YFilter { return twoByteAsOrFourByteAs.YFilter }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) SetFilter(yf yfilter.YFilter) { twoByteAsOrFourByteAs.YFilter = yf }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    return ""
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetSegmentPath() string {
    return "two-byte-as-or-four-byte-as" + "[as='" + fmt.Sprintf("%v", twoByteAsOrFourByteAs.As) + "']" + "[as-index='" + fmt.Sprintf("%v", twoByteAsOrFourByteAs.AsIndex) + "']"
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = twoByteAsOrFourByteAs.As
    leafs["as-index"] = twoByteAsOrFourByteAs.AsIndex
    return leafs
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetBundleName() string { return "cisco_ios_xr" }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetYangName() string { return "two-byte-as-or-four-byte-as" }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) SetParent(parent types.Entity) { twoByteAsOrFourByteAs.parent = parent }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetParent() types.Entity { return twoByteAsOrFourByteAs.parent }

func (twoByteAsOrFourByteAs *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_TwoByteAsOrFourByteAs) GetParentYangName() string { return "mp2mp-route-target" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address
// ipv4 address
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. Addr index. The type is interface{} with range:
    // 0..65535.
    AddrIndex interface{}
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetFilter() yfilter.YFilter { return ipv4Address.YFilter }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) SetFilter(yf yfilter.YFilter) { ipv4Address.YFilter = yf }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetSegmentPath() string {
    return "ipv4-address" + "[address='" + fmt.Sprintf("%v", ipv4Address.Address) + "']" + "[addr-index='" + fmt.Sprintf("%v", ipv4Address.AddrIndex) + "']"
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4Address.Address
    leafs["addr-index"] = ipv4Address.AddrIndex
    return leafs
}

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetYangName() string { return "ipv4-address" }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) SetParent(parent types.Entity) { ipv4Address.parent = parent }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetParent() types.Entity { return ipv4Address.parent }

func (ipv4Address *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpRouteTargets_Mp2MpRouteTarget_Ipv4Address) GetParentYangName() string { return "mp2mp-route-target" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol
// signaling protocol in this MP2MP
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Customer Edge Identifier. The type is interface{} with range:
    // 11..100.
    CeRange interface{}

    // Enable signaling protocol. The type is interface{}.
    Enable interface{}

    // Enable Flow Label based load balancing.
    FlowLabelLoadBalance L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance

    // Local Customer Edge Identifier Table.
    Ceids L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetFilter() yfilter.YFilter { return mp2MpSignalingProtocol.YFilter }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) SetFilter(yf yfilter.YFilter) { mp2MpSignalingProtocol.YFilter = yf }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetGoName(yname string) string {
    if yname == "ce-range" { return "CeRange" }
    if yname == "enable" { return "Enable" }
    if yname == "flow-label-load-balance" { return "FlowLabelLoadBalance" }
    if yname == "ceids" { return "Ceids" }
    return ""
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetSegmentPath() string {
    return "mp2mp-signaling-protocol"
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-label-load-balance" {
        return &mp2MpSignalingProtocol.FlowLabelLoadBalance
    }
    if childYangName == "ceids" {
        return &mp2MpSignalingProtocol.Ceids
    }
    return nil
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-label-load-balance"] = &mp2MpSignalingProtocol.FlowLabelLoadBalance
    children["ceids"] = &mp2MpSignalingProtocol.Ceids
    return children
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ce-range"] = mp2MpSignalingProtocol.CeRange
    leafs["enable"] = mp2MpSignalingProtocol.Enable
    return leafs
}

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetYangName() string { return "mp2mp-signaling-protocol" }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) SetParent(parent types.Entity) { mp2MpSignalingProtocol.parent = parent }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetParent() types.Entity { return mp2MpSignalingProtocol.parent }

func (mp2MpSignalingProtocol *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol) GetParentYangName() string { return "mp2mp-auto-discovery" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance
// Enable Flow Label based load balancing
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flow Label load balance type. The type is FlowLabelLoadBalance.
    FlowLabel interface{}

    // Static Flow Label. The type is interface{}.
    Static interface{}
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetFilter() yfilter.YFilter { return flowLabelLoadBalance.YFilter }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) SetFilter(yf yfilter.YFilter) { flowLabelLoadBalance.YFilter = yf }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetGoName(yname string) string {
    if yname == "flow-label" { return "FlowLabel" }
    if yname == "static" { return "Static" }
    return ""
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetSegmentPath() string {
    return "flow-label-load-balance"
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-label"] = flowLabelLoadBalance.FlowLabel
    leafs["static"] = flowLabelLoadBalance.Static
    return leafs
}

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetBundleName() string { return "cisco_ios_xr" }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetYangName() string { return "flow-label-load-balance" }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) SetParent(parent types.Entity) { flowLabelLoadBalance.parent = parent }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetParent() types.Entity { return flowLabelLoadBalance.parent }

func (flowLabelLoadBalance *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_FlowLabelLoadBalance) GetParentYangName() string { return "mp2mp-signaling-protocol" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids
// Local Customer Edge Identifier Table
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Customer Edge Identifier . The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid.
    Ceid []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetFilter() yfilter.YFilter { return ceids.YFilter }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) SetFilter(yf yfilter.YFilter) { ceids.YFilter = yf }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetGoName(yname string) string {
    if yname == "ceid" { return "Ceid" }
    return ""
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetSegmentPath() string {
    return "ceids"
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceid" {
        for _, c := range ceids.Ceid {
            if ceids.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid{}
        ceids.Ceid = append(ceids.Ceid, child)
        return &ceids.Ceid[len(ceids.Ceid)-1]
    }
    return nil
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ceids.Ceid {
        children[ceids.Ceid[i].GetSegmentPath()] = &ceids.Ceid[i]
    }
    return children
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetBundleName() string { return "cisco_ios_xr" }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetYangName() string { return "ceids" }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) SetParent(parent types.Entity) { ceids.parent = parent }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetParent() types.Entity { return ceids.parent }

func (ceids *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids) GetParentYangName() string { return "mp2mp-signaling-protocol" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid
// Local Customer Edge Identifier 
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local Customer Edge Identifier. The type is
    // interface{} with range: 1..16384.
    CeId interface{}

    // AC And Remote Customer Edge Identifier Table.
    RemoteCeidAttachmentCircuits L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetFilter() yfilter.YFilter { return ceid.YFilter }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) SetFilter(yf yfilter.YFilter) { ceid.YFilter = yf }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetGoName(yname string) string {
    if yname == "ce-id" { return "CeId" }
    if yname == "remote-ceid-attachment-circuits" { return "RemoteCeidAttachmentCircuits" }
    return ""
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetSegmentPath() string {
    return "ceid" + "[ce-id='" + fmt.Sprintf("%v", ceid.CeId) + "']"
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-ceid-attachment-circuits" {
        return &ceid.RemoteCeidAttachmentCircuits
    }
    return nil
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["remote-ceid-attachment-circuits"] = &ceid.RemoteCeidAttachmentCircuits
    return children
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ce-id"] = ceid.CeId
    return leafs
}

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetBundleName() string { return "cisco_ios_xr" }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetYangName() string { return "ceid" }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) SetParent(parent types.Entity) { ceid.parent = parent }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetParent() types.Entity { return ceid.parent }

func (ceid *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid) GetParentYangName() string { return "ceids" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits
// AC And Remote Customer Edge Identifier
// Table
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AC And Remote Customer Edge Identifier. The type is slice of
    // L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit.
    RemoteCeidAttachmentCircuit []L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetFilter() yfilter.YFilter { return remoteCeidAttachmentCircuits.YFilter }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) SetFilter(yf yfilter.YFilter) { remoteCeidAttachmentCircuits.YFilter = yf }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetGoName(yname string) string {
    if yname == "remote-ceid-attachment-circuit" { return "RemoteCeidAttachmentCircuit" }
    return ""
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetSegmentPath() string {
    return "remote-ceid-attachment-circuits"
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-ceid-attachment-circuit" {
        for _, c := range remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit {
            if remoteCeidAttachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit{}
        remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit = append(remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit, child)
        return &remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit[len(remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit)-1]
    }
    return nil
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit {
        children[remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit[i].GetSegmentPath()] = &remoteCeidAttachmentCircuits.RemoteCeidAttachmentCircuit[i]
    }
    return children
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetYangName() string { return "remote-ceid-attachment-circuits" }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) SetParent(parent types.Entity) { remoteCeidAttachmentCircuits.parent = parent }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetParent() types.Entity { return remoteCeidAttachmentCircuits.parent }

func (remoteCeidAttachmentCircuits *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits) GetParentYangName() string { return "ceid" }

// L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit
// AC And Remote Customer Edge Identifier
type L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The name of the Attachment Circuit. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    Name interface{}

    // This attribute is a key. Remote Customer Edge Identifier. The type is
    // interface{} with range: 1..16384.
    RemoteCeId interface{}
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetFilter() yfilter.YFilter { return remoteCeidAttachmentCircuit.YFilter }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) SetFilter(yf yfilter.YFilter) { remoteCeidAttachmentCircuit.YFilter = yf }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "remote-ce-id" { return "RemoteCeId" }
    return ""
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetSegmentPath() string {
    return "remote-ceid-attachment-circuit" + "[name='" + fmt.Sprintf("%v", remoteCeidAttachmentCircuit.Name) + "']" + "[remote-ce-id='" + fmt.Sprintf("%v", remoteCeidAttachmentCircuit.RemoteCeId) + "']"
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = remoteCeidAttachmentCircuit.Name
    leafs["remote-ce-id"] = remoteCeidAttachmentCircuit.RemoteCeId
    return leafs
}

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetYangName() string { return "remote-ceid-attachment-circuit" }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) SetParent(parent types.Entity) { remoteCeidAttachmentCircuit.parent = parent }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetParent() types.Entity { return remoteCeidAttachmentCircuit.parent }

func (remoteCeidAttachmentCircuit *L2Vpn_Database_XconnectGroups_XconnectGroup_Mp2MpXconnects_Mp2MpXconnect_Mp2MpAutoDiscovery_Mp2MpSignalingProtocol_Ceids_Ceid_RemoteCeidAttachmentCircuits_RemoteCeidAttachmentCircuit) GetParentYangName() string { return "remote-ceid-attachment-circuits" }

// L2Vpn_Database_BridgeDomainGroups
// List of bridge  groups
type L2Vpn_Database_BridgeDomainGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge group. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup.
    BridgeDomainGroup []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetFilter() yfilter.YFilter { return bridgeDomainGroups.YFilter }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) SetFilter(yf yfilter.YFilter) { bridgeDomainGroups.YFilter = yf }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetGoName(yname string) string {
    if yname == "bridge-domain-group" { return "BridgeDomainGroup" }
    return ""
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetSegmentPath() string {
    return "bridge-domain-groups"
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bridge-domain-group" {
        for _, c := range bridgeDomainGroups.BridgeDomainGroup {
            if bridgeDomainGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup{}
        bridgeDomainGroups.BridgeDomainGroup = append(bridgeDomainGroups.BridgeDomainGroup, child)
        return &bridgeDomainGroups.BridgeDomainGroup[len(bridgeDomainGroups.BridgeDomainGroup)-1]
    }
    return nil
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bridgeDomainGroups.BridgeDomainGroup {
        children[bridgeDomainGroups.BridgeDomainGroup[i].GetSegmentPath()] = &bridgeDomainGroups.BridgeDomainGroup[i]
    }
    return children
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetYangName() string { return "bridge-domain-groups" }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) SetParent(parent types.Entity) { bridgeDomainGroups.parent = parent }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetParent() types.Entity { return bridgeDomainGroups.parent }

func (bridgeDomainGroups *L2Vpn_Database_BridgeDomainGroups) GetParentYangName() string { return "database" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup
// Bridge group
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Bridge group. The type is string with
    // length: 1..32.
    Name interface{}

    // List of Bridge Domain.
    BridgeDomains L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetFilter() yfilter.YFilter { return bridgeDomainGroup.YFilter }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) SetFilter(yf yfilter.YFilter) { bridgeDomainGroup.YFilter = yf }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "bridge-domains" { return "BridgeDomains" }
    return ""
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetSegmentPath() string {
    return "bridge-domain-group" + "[name='" + fmt.Sprintf("%v", bridgeDomainGroup.Name) + "']"
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bridge-domains" {
        return &bridgeDomainGroup.BridgeDomains
    }
    return nil
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bridge-domains"] = &bridgeDomainGroup.BridgeDomains
    return children
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = bridgeDomainGroup.Name
    return leafs
}

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetYangName() string { return "bridge-domain-group" }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) SetParent(parent types.Entity) { bridgeDomainGroup.parent = parent }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetParent() types.Entity { return bridgeDomainGroup.parent }

func (bridgeDomainGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup) GetParentYangName() string { return "bridge-domain-groups" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains
// List of Bridge Domain
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // bridge domain. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain.
    BridgeDomain []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetFilter() yfilter.YFilter { return bridgeDomains.YFilter }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) SetFilter(yf yfilter.YFilter) { bridgeDomains.YFilter = yf }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetGoName(yname string) string {
    if yname == "bridge-domain" { return "BridgeDomain" }
    return ""
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetSegmentPath() string {
    return "bridge-domains"
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bridge-domain" {
        for _, c := range bridgeDomains.BridgeDomain {
            if bridgeDomains.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain{}
        bridgeDomains.BridgeDomain = append(bridgeDomains.BridgeDomain, child)
        return &bridgeDomains.BridgeDomain[len(bridgeDomains.BridgeDomain)-1]
    }
    return nil
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bridgeDomains.BridgeDomain {
        children[bridgeDomains.BridgeDomain[i].GetSegmentPath()] = &bridgeDomains.BridgeDomain[i]
    }
    return children
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetYangName() string { return "bridge-domains" }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) SetParent(parent types.Entity) { bridgeDomains.parent = parent }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetParent() types.Entity { return bridgeDomains.parent }

func (bridgeDomains *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains) GetParentYangName() string { return "bridge-domain-group" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain
// bridge domain
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the bridge domain. The type is string with
    // length: 1..27.
    Name interface{}

    // Coupled-mode configuration. The type is interface{}.
    CoupledMode interface{}

    // shutdown the Bridge Domain. The type is interface{}.
    Shutdown interface{}

    // Disable Unknown Unicast flooding. The type is interface{}.
    FloodingUnknownUnicast interface{}

    // Disable IGMP Snooping. The type is interface{}.
    IgmpSnoopingDisable interface{}

    // Bridge Domain Transport mode. The type is BridgeDomainTransportMode.
    TransportMode interface{}

    // Attach MLD Snooping Profile Name. The type is string with length: 1..32.
    MldSnooping interface{}

    // Maximum transmission unit for this Bridge Domain. The type is interface{}
    // with range: 46..65535. Units are byte.
    BridgeDomainMtu interface{}

    // DHCPv4 Snooping profile name. The type is string with length: 1..32.
    Dhcp interface{}

    // Bridge-domain description Name. The type is string with length: 1..64.
    BridgeDescription interface{}

    // Attach IGMP Snooping Profile Name. The type is string with length: 1..32.
    IgmpSnooping interface{}

    // Disable flooding. The type is interface{}.
    Flooding interface{}

    // Storm Control.
    BdStormControls L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls

    // Bridge Domain VxLAN Network Identifier Table.
    MemberVnis L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis

    // MAC configuration commands.
    BridgeDomainMac L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac

    // nV Satellite.
    NvSatellite L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite

    // Bridge Domain PBB.
    BridgeDomainPbb L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb

    // Bridge Domain EVI Table.
    BridgeDomainEvis L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis

    // Specify the access virtual forwarding interface name.
    AccessVfis L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis

    // List of pseudowires.
    BdPseudowires L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires

    // Specify the virtual forwarding interface name.
    Vfis L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis

    // Attachment Circuit table.
    BdAttachmentCircuits L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits

    // List of EVPN pseudowires.
    BdPseudowireEvpns L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns

    // IP Source Guard.
    IpSourceGuard L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard

    // Dynamic ARP Inspection.
    Dai L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai

    // Bridge Domain Routed Interface Table.
    RoutedInterfaces L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetFilter() yfilter.YFilter { return bridgeDomain.YFilter }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) SetFilter(yf yfilter.YFilter) { bridgeDomain.YFilter = yf }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "coupled-mode" { return "CoupledMode" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "flooding-unknown-unicast" { return "FloodingUnknownUnicast" }
    if yname == "igmp-snooping-disable" { return "IgmpSnoopingDisable" }
    if yname == "transport-mode" { return "TransportMode" }
    if yname == "mld-snooping" { return "MldSnooping" }
    if yname == "bridge-domain-mtu" { return "BridgeDomainMtu" }
    if yname == "dhcp" { return "Dhcp" }
    if yname == "bridge-description" { return "BridgeDescription" }
    if yname == "igmp-snooping" { return "IgmpSnooping" }
    if yname == "flooding" { return "Flooding" }
    if yname == "bd-storm-controls" { return "BdStormControls" }
    if yname == "member-vnis" { return "MemberVnis" }
    if yname == "bridge-domain-mac" { return "BridgeDomainMac" }
    if yname == "nv-satellite" { return "NvSatellite" }
    if yname == "bridge-domain-pbb" { return "BridgeDomainPbb" }
    if yname == "bridge-domain-evis" { return "BridgeDomainEvis" }
    if yname == "access-vfis" { return "AccessVfis" }
    if yname == "bd-pseudowires" { return "BdPseudowires" }
    if yname == "vfis" { return "Vfis" }
    if yname == "bd-attachment-circuits" { return "BdAttachmentCircuits" }
    if yname == "bd-pseudowire-evpns" { return "BdPseudowireEvpns" }
    if yname == "ip-source-guard" { return "IpSourceGuard" }
    if yname == "dai" { return "Dai" }
    if yname == "routed-interfaces" { return "RoutedInterfaces" }
    return ""
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetSegmentPath() string {
    return "bridge-domain" + "[name='" + fmt.Sprintf("%v", bridgeDomain.Name) + "']"
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-storm-controls" {
        return &bridgeDomain.BdStormControls
    }
    if childYangName == "member-vnis" {
        return &bridgeDomain.MemberVnis
    }
    if childYangName == "bridge-domain-mac" {
        return &bridgeDomain.BridgeDomainMac
    }
    if childYangName == "nv-satellite" {
        return &bridgeDomain.NvSatellite
    }
    if childYangName == "bridge-domain-pbb" {
        return &bridgeDomain.BridgeDomainPbb
    }
    if childYangName == "bridge-domain-evis" {
        return &bridgeDomain.BridgeDomainEvis
    }
    if childYangName == "access-vfis" {
        return &bridgeDomain.AccessVfis
    }
    if childYangName == "bd-pseudowires" {
        return &bridgeDomain.BdPseudowires
    }
    if childYangName == "vfis" {
        return &bridgeDomain.Vfis
    }
    if childYangName == "bd-attachment-circuits" {
        return &bridgeDomain.BdAttachmentCircuits
    }
    if childYangName == "bd-pseudowire-evpns" {
        return &bridgeDomain.BdPseudowireEvpns
    }
    if childYangName == "ip-source-guard" {
        return &bridgeDomain.IpSourceGuard
    }
    if childYangName == "dai" {
        return &bridgeDomain.Dai
    }
    if childYangName == "routed-interfaces" {
        return &bridgeDomain.RoutedInterfaces
    }
    return nil
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bd-storm-controls"] = &bridgeDomain.BdStormControls
    children["member-vnis"] = &bridgeDomain.MemberVnis
    children["bridge-domain-mac"] = &bridgeDomain.BridgeDomainMac
    children["nv-satellite"] = &bridgeDomain.NvSatellite
    children["bridge-domain-pbb"] = &bridgeDomain.BridgeDomainPbb
    children["bridge-domain-evis"] = &bridgeDomain.BridgeDomainEvis
    children["access-vfis"] = &bridgeDomain.AccessVfis
    children["bd-pseudowires"] = &bridgeDomain.BdPseudowires
    children["vfis"] = &bridgeDomain.Vfis
    children["bd-attachment-circuits"] = &bridgeDomain.BdAttachmentCircuits
    children["bd-pseudowire-evpns"] = &bridgeDomain.BdPseudowireEvpns
    children["ip-source-guard"] = &bridgeDomain.IpSourceGuard
    children["dai"] = &bridgeDomain.Dai
    children["routed-interfaces"] = &bridgeDomain.RoutedInterfaces
    return children
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = bridgeDomain.Name
    leafs["coupled-mode"] = bridgeDomain.CoupledMode
    leafs["shutdown"] = bridgeDomain.Shutdown
    leafs["flooding-unknown-unicast"] = bridgeDomain.FloodingUnknownUnicast
    leafs["igmp-snooping-disable"] = bridgeDomain.IgmpSnoopingDisable
    leafs["transport-mode"] = bridgeDomain.TransportMode
    leafs["mld-snooping"] = bridgeDomain.MldSnooping
    leafs["bridge-domain-mtu"] = bridgeDomain.BridgeDomainMtu
    leafs["dhcp"] = bridgeDomain.Dhcp
    leafs["bridge-description"] = bridgeDomain.BridgeDescription
    leafs["igmp-snooping"] = bridgeDomain.IgmpSnooping
    leafs["flooding"] = bridgeDomain.Flooding
    return leafs
}

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetYangName() string { return "bridge-domain" }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) SetParent(parent types.Entity) { bridgeDomain.parent = parent }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetParent() types.Entity { return bridgeDomain.parent }

func (bridgeDomain *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain) GetParentYangName() string { return "bridge-domains" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls
// Storm Control
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Storm Control Type. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl.
    BdStormControl []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetFilter() yfilter.YFilter { return bdStormControls.YFilter }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) SetFilter(yf yfilter.YFilter) { bdStormControls.YFilter = yf }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetGoName(yname string) string {
    if yname == "bd-storm-control" { return "BdStormControl" }
    return ""
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetSegmentPath() string {
    return "bd-storm-controls"
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-storm-control" {
        for _, c := range bdStormControls.BdStormControl {
            if bdStormControls.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl{}
        bdStormControls.BdStormControl = append(bdStormControls.BdStormControl, child)
        return &bdStormControls.BdStormControl[len(bdStormControls.BdStormControl)-1]
    }
    return nil
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdStormControls.BdStormControl {
        children[bdStormControls.BdStormControl[i].GetSegmentPath()] = &bdStormControls.BdStormControl[i]
    }
    return children
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetBundleName() string { return "cisco_ios_xr" }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetYangName() string { return "bd-storm-controls" }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) SetParent(parent types.Entity) { bdStormControls.parent = parent }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetParent() types.Entity { return bdStormControls.parent }

func (bdStormControls *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl
// Storm Control Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Storm Control Type. The type is StormControl.
    Sctype interface{}

    // Specify units for Storm Control Configuration.
    StormControlUnit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetFilter() yfilter.YFilter { return bdStormControl.YFilter }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) SetFilter(yf yfilter.YFilter) { bdStormControl.YFilter = yf }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetGoName(yname string) string {
    if yname == "sctype" { return "Sctype" }
    if yname == "storm-control-unit" { return "StormControlUnit" }
    return ""
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetSegmentPath() string {
    return "bd-storm-control" + "[sctype='" + fmt.Sprintf("%v", bdStormControl.Sctype) + "']"
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "storm-control-unit" {
        return &bdStormControl.StormControlUnit
    }
    return nil
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["storm-control-unit"] = &bdStormControl.StormControlUnit
    return children
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sctype"] = bdStormControl.Sctype
    return leafs
}

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetBundleName() string { return "cisco_ios_xr" }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetYangName() string { return "bd-storm-control" }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) SetParent(parent types.Entity) { bdStormControl.parent = parent }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetParent() types.Entity { return bdStormControl.parent }

func (bdStormControl *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl) GetParentYangName() string { return "bd-storm-controls" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit
// Specify units for Storm Control Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Kilobits Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 64..1280000. Units are
    // kbit/s.
    KbitsPerSec interface{}

    // Packets Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 1..160000. Units are
    // packet/s.
    PktsPerSec interface{}
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetFilter() yfilter.YFilter { return stormControlUnit.YFilter }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) SetFilter(yf yfilter.YFilter) { stormControlUnit.YFilter = yf }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetGoName(yname string) string {
    if yname == "kbits-per-sec" { return "KbitsPerSec" }
    if yname == "pkts-per-sec" { return "PktsPerSec" }
    return ""
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetSegmentPath() string {
    return "storm-control-unit"
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["kbits-per-sec"] = stormControlUnit.KbitsPerSec
    leafs["pkts-per-sec"] = stormControlUnit.PktsPerSec
    return leafs
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetBundleName() string { return "cisco_ios_xr" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetYangName() string { return "storm-control-unit" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) SetParent(parent types.Entity) { stormControlUnit.parent = parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetParent() types.Entity { return stormControlUnit.parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdStormControls_BdStormControl_StormControlUnit) GetParentYangName() string { return "bd-storm-control" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis
// Bridge Domain VxLAN Network Identifier
// Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge Domain Member VxLAN Network Identifier . The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni.
    MemberVni []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetFilter() yfilter.YFilter { return memberVnis.YFilter }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) SetFilter(yf yfilter.YFilter) { memberVnis.YFilter = yf }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetGoName(yname string) string {
    if yname == "member-vni" { return "MemberVni" }
    return ""
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetSegmentPath() string {
    return "member-vnis"
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-vni" {
        for _, c := range memberVnis.MemberVni {
            if memberVnis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni{}
        memberVnis.MemberVni = append(memberVnis.MemberVni, child)
        return &memberVnis.MemberVni[len(memberVnis.MemberVni)-1]
    }
    return nil
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberVnis.MemberVni {
        children[memberVnis.MemberVni[i].GetSegmentPath()] = &memberVnis.MemberVni[i]
    }
    return children
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetBundleName() string { return "cisco_ios_xr" }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetYangName() string { return "member-vnis" }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) SetParent(parent types.Entity) { memberVnis.parent = parent }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetParent() types.Entity { return memberVnis.parent }

func (memberVnis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni
// Bridge Domain Member VxLAN Network
// Identifier 
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VxLAN Network Identifier number. The type is
    // interface{} with range: 1..16777215.
    Vni interface{}

    // Static Mac Address Table.
    MemberVniStaticMacAddresses L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetFilter() yfilter.YFilter { return memberVni.YFilter }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) SetFilter(yf yfilter.YFilter) { memberVni.YFilter = yf }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetGoName(yname string) string {
    if yname == "vni" { return "Vni" }
    if yname == "member-vni-static-mac-addresses" { return "MemberVniStaticMacAddresses" }
    return ""
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetSegmentPath() string {
    return "member-vni" + "[vni='" + fmt.Sprintf("%v", memberVni.Vni) + "']"
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-vni-static-mac-addresses" {
        return &memberVni.MemberVniStaticMacAddresses
    }
    return nil
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-vni-static-mac-addresses"] = &memberVni.MemberVniStaticMacAddresses
    return children
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vni"] = memberVni.Vni
    return leafs
}

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetBundleName() string { return "cisco_ios_xr" }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetYangName() string { return "member-vni" }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) SetParent(parent types.Entity) { memberVni.parent = parent }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetParent() types.Entity { return memberVni.parent }

func (memberVni *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni) GetParentYangName() string { return "member-vnis" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses
// Static Mac Address Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static Mac Address Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress.
    MemberVniStaticMacAddress []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetFilter() yfilter.YFilter { return memberVniStaticMacAddresses.YFilter }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) SetFilter(yf yfilter.YFilter) { memberVniStaticMacAddresses.YFilter = yf }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetGoName(yname string) string {
    if yname == "member-vni-static-mac-address" { return "MemberVniStaticMacAddress" }
    return ""
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetSegmentPath() string {
    return "member-vni-static-mac-addresses"
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-vni-static-mac-address" {
        for _, c := range memberVniStaticMacAddresses.MemberVniStaticMacAddress {
            if memberVniStaticMacAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress{}
        memberVniStaticMacAddresses.MemberVniStaticMacAddress = append(memberVniStaticMacAddresses.MemberVniStaticMacAddress, child)
        return &memberVniStaticMacAddresses.MemberVniStaticMacAddress[len(memberVniStaticMacAddresses.MemberVniStaticMacAddress)-1]
    }
    return nil
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberVniStaticMacAddresses.MemberVniStaticMacAddress {
        children[memberVniStaticMacAddresses.MemberVniStaticMacAddress[i].GetSegmentPath()] = &memberVniStaticMacAddresses.MemberVniStaticMacAddress[i]
    }
    return children
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetYangName() string { return "member-vni-static-mac-addresses" }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) SetParent(parent types.Entity) { memberVniStaticMacAddresses.parent = parent }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetParent() types.Entity { return memberVniStaticMacAddresses.parent }

func (memberVniStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses) GetParentYangName() string { return "member-vni" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress
// Static Mac Address Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    MacAddress interface{}

    // Enable Static Mac Address Configuration. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHopIp interface{}
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetFilter() yfilter.YFilter { return memberVniStaticMacAddress.YFilter }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) SetFilter(yf yfilter.YFilter) { memberVniStaticMacAddress.YFilter = yf }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetGoName(yname string) string {
    if yname == "mac-address" { return "MacAddress" }
    if yname == "next-hop-ip" { return "NextHopIp" }
    return ""
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetSegmentPath() string {
    return "member-vni-static-mac-address" + "[mac-address='" + fmt.Sprintf("%v", memberVniStaticMacAddress.MacAddress) + "']"
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mac-address"] = memberVniStaticMacAddress.MacAddress
    leafs["next-hop-ip"] = memberVniStaticMacAddress.NextHopIp
    return leafs
}

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetYangName() string { return "member-vni-static-mac-address" }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) SetParent(parent types.Entity) { memberVniStaticMacAddress.parent = parent }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetParent() types.Entity { return memberVniStaticMacAddress.parent }

func (memberVniStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_MemberVnis_MemberVni_MemberVniStaticMacAddresses_MemberVniStaticMacAddress) GetParentYangName() string { return "member-vni-static-mac-addresses" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac
// MAC configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mac withdraw sent from access PW to access PW. The type is interface{}.
    BdMacWithdrawRelay interface{}

    // MAC withdraw on Access PW. The type is interface{}.
    BdMacWithdrawAccessPwDisable interface{}

    // Disable MAC Flush when Port goes Down. The type is interface{}.
    BdMacPortDownFlush interface{}

    // Disable Mac Withdraw. The type is interface{}.
    BdMacWithdraw interface{}

    // MAC withdraw sent on bridge port down. The type is MacWithdrawBehavior.
    BdMacWithdrawBehavior interface{}

    // Mac Learning Type. The type is BdmacLearn.
    BdMacLearn interface{}

    // MAC-Limit configuration commands.
    BdMacLimit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit

    // Filter Mac Address.
    BdMacFilters L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters

    // MAC Secure.
    MacSecure L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure

    // MAC-Aging configuration commands.
    BdMacAging L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetFilter() yfilter.YFilter { return bridgeDomainMac.YFilter }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) SetFilter(yf yfilter.YFilter) { bridgeDomainMac.YFilter = yf }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetGoName(yname string) string {
    if yname == "bd-mac-withdraw-relay" { return "BdMacWithdrawRelay" }
    if yname == "bd-mac-withdraw-access-pw-disable" { return "BdMacWithdrawAccessPwDisable" }
    if yname == "bd-mac-port-down-flush" { return "BdMacPortDownFlush" }
    if yname == "bd-mac-withdraw" { return "BdMacWithdraw" }
    if yname == "bd-mac-withdraw-behavior" { return "BdMacWithdrawBehavior" }
    if yname == "bd-mac-learn" { return "BdMacLearn" }
    if yname == "bd-mac-limit" { return "BdMacLimit" }
    if yname == "bd-mac-filters" { return "BdMacFilters" }
    if yname == "mac-secure" { return "MacSecure" }
    if yname == "bd-mac-aging" { return "BdMacAging" }
    return ""
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetSegmentPath() string {
    return "bridge-domain-mac"
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-mac-limit" {
        return &bridgeDomainMac.BdMacLimit
    }
    if childYangName == "bd-mac-filters" {
        return &bridgeDomainMac.BdMacFilters
    }
    if childYangName == "mac-secure" {
        return &bridgeDomainMac.MacSecure
    }
    if childYangName == "bd-mac-aging" {
        return &bridgeDomainMac.BdMacAging
    }
    return nil
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bd-mac-limit"] = &bridgeDomainMac.BdMacLimit
    children["bd-mac-filters"] = &bridgeDomainMac.BdMacFilters
    children["mac-secure"] = &bridgeDomainMac.MacSecure
    children["bd-mac-aging"] = &bridgeDomainMac.BdMacAging
    return children
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bd-mac-withdraw-relay"] = bridgeDomainMac.BdMacWithdrawRelay
    leafs["bd-mac-withdraw-access-pw-disable"] = bridgeDomainMac.BdMacWithdrawAccessPwDisable
    leafs["bd-mac-port-down-flush"] = bridgeDomainMac.BdMacPortDownFlush
    leafs["bd-mac-withdraw"] = bridgeDomainMac.BdMacWithdraw
    leafs["bd-mac-withdraw-behavior"] = bridgeDomainMac.BdMacWithdrawBehavior
    leafs["bd-mac-learn"] = bridgeDomainMac.BdMacLearn
    return leafs
}

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetYangName() string { return "bridge-domain-mac" }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) SetParent(parent types.Entity) { bridgeDomainMac.parent = parent }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetParent() types.Entity { return bridgeDomainMac.parent }

func (bridgeDomainMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit
// MAC-Limit configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address limit enforcement action. The type is MacLimitAction.
    BdMacLimitAction interface{}

    // Mac Address Limit Notification. The type is MacNotification.
    BdMacLimitNotif interface{}

    // Number of MAC addresses after which MAC limit action is taken. The type is
    // interface{} with range: 0..4294967295.
    BdMacLimitMax interface{}
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetFilter() yfilter.YFilter { return bdMacLimit.YFilter }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) SetFilter(yf yfilter.YFilter) { bdMacLimit.YFilter = yf }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetGoName(yname string) string {
    if yname == "bd-mac-limit-action" { return "BdMacLimitAction" }
    if yname == "bd-mac-limit-notif" { return "BdMacLimitNotif" }
    if yname == "bd-mac-limit-max" { return "BdMacLimitMax" }
    return ""
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetSegmentPath() string {
    return "bd-mac-limit"
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bd-mac-limit-action"] = bdMacLimit.BdMacLimitAction
    leafs["bd-mac-limit-notif"] = bdMacLimit.BdMacLimitNotif
    leafs["bd-mac-limit-max"] = bdMacLimit.BdMacLimitMax
    return leafs
}

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetBundleName() string { return "cisco_ios_xr" }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetYangName() string { return "bd-mac-limit" }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) SetParent(parent types.Entity) { bdMacLimit.parent = parent }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetParent() types.Entity { return bdMacLimit.parent }

func (bdMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacLimit) GetParentYangName() string { return "bridge-domain-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters
// Filter Mac Address
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static MAC address. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter.
    BdMacFilter []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetFilter() yfilter.YFilter { return bdMacFilters.YFilter }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) SetFilter(yf yfilter.YFilter) { bdMacFilters.YFilter = yf }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetGoName(yname string) string {
    if yname == "bd-mac-filter" { return "BdMacFilter" }
    return ""
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetSegmentPath() string {
    return "bd-mac-filters"
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-mac-filter" {
        for _, c := range bdMacFilters.BdMacFilter {
            if bdMacFilters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter{}
        bdMacFilters.BdMacFilter = append(bdMacFilters.BdMacFilter, child)
        return &bdMacFilters.BdMacFilter[len(bdMacFilters.BdMacFilter)-1]
    }
    return nil
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdMacFilters.BdMacFilter {
        children[bdMacFilters.BdMacFilter[i].GetSegmentPath()] = &bdMacFilters.BdMacFilter[i]
    }
    return children
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetBundleName() string { return "cisco_ios_xr" }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetYangName() string { return "bd-mac-filters" }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) SetParent(parent types.Entity) { bdMacFilters.parent = parent }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetParent() types.Entity { return bdMacFilters.parent }

func (bdMacFilters *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters) GetParentYangName() string { return "bridge-domain-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter
// Static MAC address
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}

    // MAC address for filtering. The type is interface{}.
    Drop interface{}
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetFilter() yfilter.YFilter { return bdMacFilter.YFilter }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) SetFilter(yf yfilter.YFilter) { bdMacFilter.YFilter = yf }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "drop" { return "Drop" }
    return ""
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetSegmentPath() string {
    return "bd-mac-filter" + "[address='" + fmt.Sprintf("%v", bdMacFilter.Address) + "']"
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = bdMacFilter.Address
    leafs["drop"] = bdMacFilter.Drop
    return leafs
}

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetBundleName() string { return "cisco_ios_xr" }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetYangName() string { return "bd-mac-filter" }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) SetParent(parent types.Entity) { bdMacFilter.parent = parent }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetParent() types.Entity { return bdMacFilter.parent }

func (bdMacFilter *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacFilters_BdMacFilter) GetParentYangName() string { return "bd-mac-filters" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure
// MAC Secure
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC Secure Logging. The type is interface{}.
    Logging interface{}

    // MAC secure enforcement action. The type is MacSecureAction.
    Action interface{}

    // Enable MAC Secure. The type is interface{}.
    Enable interface{}

    // MAC Secure Threshold. The type is interface{}.
    Threshold interface{}
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetFilter() yfilter.YFilter { return macSecure.YFilter }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) SetFilter(yf yfilter.YFilter) { macSecure.YFilter = yf }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "action" { return "Action" }
    if yname == "enable" { return "Enable" }
    if yname == "threshold" { return "Threshold" }
    return ""
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetSegmentPath() string {
    return "mac-secure"
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = macSecure.Logging
    leafs["action"] = macSecure.Action
    leafs["enable"] = macSecure.Enable
    leafs["threshold"] = macSecure.Threshold
    return leafs
}

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetBundleName() string { return "cisco_ios_xr" }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetYangName() string { return "mac-secure" }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) SetParent(parent types.Entity) { macSecure.parent = parent }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetParent() types.Entity { return macSecure.parent }

func (macSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_MacSecure) GetParentYangName() string { return "bridge-domain-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging
// MAC-Aging configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address aging type. The type is MacAging.
    BdMacAgingType interface{}

    // Mac Aging Time. The type is interface{} with range: 300..30000.
    BdMacAgingTime interface{}
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetFilter() yfilter.YFilter { return bdMacAging.YFilter }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) SetFilter(yf yfilter.YFilter) { bdMacAging.YFilter = yf }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetGoName(yname string) string {
    if yname == "bd-mac-aging-type" { return "BdMacAgingType" }
    if yname == "bd-mac-aging-time" { return "BdMacAgingTime" }
    return ""
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetSegmentPath() string {
    return "bd-mac-aging"
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bd-mac-aging-type"] = bdMacAging.BdMacAgingType
    leafs["bd-mac-aging-time"] = bdMacAging.BdMacAgingTime
    return leafs
}

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetBundleName() string { return "cisco_ios_xr" }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetYangName() string { return "bd-mac-aging" }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) SetParent(parent types.Entity) { bdMacAging.parent = parent }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetParent() types.Entity { return bdMacAging.parent }

func (bdMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainMac_BdMacAging) GetParentYangName() string { return "bridge-domain-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite
// nV Satellite
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable IPv4 Multicast Offload to Satellite Nodes. The type is interface{}.
    OffloadIpv4MulticastEnable interface{}

    // Enable nV Satellite Settings. The type is interface{}.
    Enable interface{}
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetFilter() yfilter.YFilter { return nvSatellite.YFilter }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) SetFilter(yf yfilter.YFilter) { nvSatellite.YFilter = yf }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetGoName(yname string) string {
    if yname == "offload-ipv4-multicast-enable" { return "OffloadIpv4MulticastEnable" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetSegmentPath() string {
    return "nv-satellite"
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["offload-ipv4-multicast-enable"] = nvSatellite.OffloadIpv4MulticastEnable
    leafs["enable"] = nvSatellite.Enable
    return leafs
}

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetBundleName() string { return "cisco_ios_xr" }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetYangName() string { return "nv-satellite" }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) SetParent(parent types.Entity) { nvSatellite.parent = parent }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetParent() types.Entity { return nvSatellite.parent }

func (nvSatellite *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_NvSatellite) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb
// Bridge Domain PBB
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PBB Edge.
    PbbEdges L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges

    // PBB Core.
    PbbCore L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetFilter() yfilter.YFilter { return bridgeDomainPbb.YFilter }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) SetFilter(yf yfilter.YFilter) { bridgeDomainPbb.YFilter = yf }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetGoName(yname string) string {
    if yname == "pbb-edges" { return "PbbEdges" }
    if yname == "pbb-core" { return "PbbCore" }
    return ""
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetSegmentPath() string {
    return "bridge-domain-pbb"
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-edges" {
        return &bridgeDomainPbb.PbbEdges
    }
    if childYangName == "pbb-core" {
        return &bridgeDomainPbb.PbbCore
    }
    return nil
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pbb-edges"] = &bridgeDomainPbb.PbbEdges
    children["pbb-core"] = &bridgeDomainPbb.PbbCore
    return children
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetYangName() string { return "bridge-domain-pbb" }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) SetParent(parent types.Entity) { bridgeDomainPbb.parent = parent }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetParent() types.Entity { return bridgeDomainPbb.parent }

func (bridgeDomainPbb *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges
// PBB Edge
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure BD as PBB Edge with ISID and associated PBB Core BD. The type is
    // slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge.
    PbbEdge []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetFilter() yfilter.YFilter { return pbbEdges.YFilter }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) SetFilter(yf yfilter.YFilter) { pbbEdges.YFilter = yf }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetGoName(yname string) string {
    if yname == "pbb-edge" { return "PbbEdge" }
    return ""
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetSegmentPath() string {
    return "pbb-edges"
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-edge" {
        for _, c := range pbbEdges.PbbEdge {
            if pbbEdges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge{}
        pbbEdges.PbbEdge = append(pbbEdges.PbbEdge, child)
        return &pbbEdges.PbbEdge[len(pbbEdges.PbbEdge)-1]
    }
    return nil
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pbbEdges.PbbEdge {
        children[pbbEdges.PbbEdge[i].GetSegmentPath()] = &pbbEdges.PbbEdge[i]
    }
    return children
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetYangName() string { return "pbb-edges" }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) SetParent(parent types.Entity) { pbbEdges.parent = parent }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetParent() types.Entity { return pbbEdges.parent }

func (pbbEdges *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges) GetParentYangName() string { return "bridge-domain-pbb" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge
// Configure BD as PBB Edge with ISID and
// associated PBB Core BD
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ISID. The type is interface{} with range:
    // 256..16777214.
    Isid interface{}

    // This attribute is a key. Core BD Name. The type is string with length:
    // 1..27.
    CoreBdName interface{}

    // Attach a IGMP Snooping profile. The type is string with length: 1..32.
    PbbEdgeIgmpProfile interface{}

    // Configure Unknown Unicast BMAC address for PBB Edge Port. The type is
    // string with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    UnknownUnicastBmac interface{}

    // Split Horizon Group.
    PbbEdgeSplitHorizonGroup L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup

    // PBB Static Mac Address Mapping Table.
    PbbStaticMacMappings L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings

    // Attach a DHCP profile.
    PbbEdgeDhcpProfile L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile

    // MAC configuration commands.
    PbbEdgeMac L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetFilter() yfilter.YFilter { return pbbEdge.YFilter }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) SetFilter(yf yfilter.YFilter) { pbbEdge.YFilter = yf }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetGoName(yname string) string {
    if yname == "isid" { return "Isid" }
    if yname == "core-bd-name" { return "CoreBdName" }
    if yname == "pbb-edge-igmp-profile" { return "PbbEdgeIgmpProfile" }
    if yname == "unknown-unicast-bmac" { return "UnknownUnicastBmac" }
    if yname == "pbb-edge-split-horizon-group" { return "PbbEdgeSplitHorizonGroup" }
    if yname == "pbb-static-mac-mappings" { return "PbbStaticMacMappings" }
    if yname == "pbb-edge-dhcp-profile" { return "PbbEdgeDhcpProfile" }
    if yname == "pbb-edge-mac" { return "PbbEdgeMac" }
    return ""
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetSegmentPath() string {
    return "pbb-edge" + "[isid='" + fmt.Sprintf("%v", pbbEdge.Isid) + "']" + "[core-bd-name='" + fmt.Sprintf("%v", pbbEdge.CoreBdName) + "']"
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-edge-split-horizon-group" {
        return &pbbEdge.PbbEdgeSplitHorizonGroup
    }
    if childYangName == "pbb-static-mac-mappings" {
        return &pbbEdge.PbbStaticMacMappings
    }
    if childYangName == "pbb-edge-dhcp-profile" {
        return &pbbEdge.PbbEdgeDhcpProfile
    }
    if childYangName == "pbb-edge-mac" {
        return &pbbEdge.PbbEdgeMac
    }
    return nil
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pbb-edge-split-horizon-group"] = &pbbEdge.PbbEdgeSplitHorizonGroup
    children["pbb-static-mac-mappings"] = &pbbEdge.PbbStaticMacMappings
    children["pbb-edge-dhcp-profile"] = &pbbEdge.PbbEdgeDhcpProfile
    children["pbb-edge-mac"] = &pbbEdge.PbbEdgeMac
    return children
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["isid"] = pbbEdge.Isid
    leafs["core-bd-name"] = pbbEdge.CoreBdName
    leafs["pbb-edge-igmp-profile"] = pbbEdge.PbbEdgeIgmpProfile
    leafs["unknown-unicast-bmac"] = pbbEdge.UnknownUnicastBmac
    return leafs
}

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetYangName() string { return "pbb-edge" }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) SetParent(parent types.Entity) { pbbEdge.parent = parent }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetParent() types.Entity { return pbbEdge.parent }

func (pbbEdge *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge) GetParentYangName() string { return "pbb-edges" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup
// Split Horizon Group
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable split horizon group. The type is interface{}.
    Disable interface{}
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetFilter() yfilter.YFilter { return pbbEdgeSplitHorizonGroup.YFilter }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) SetFilter(yf yfilter.YFilter) { pbbEdgeSplitHorizonGroup.YFilter = yf }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetSegmentPath() string {
    return "pbb-edge-split-horizon-group"
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = pbbEdgeSplitHorizonGroup.Disable
    return leafs
}

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetYangName() string { return "pbb-edge-split-horizon-group" }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) SetParent(parent types.Entity) { pbbEdgeSplitHorizonGroup.parent = parent }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetParent() types.Entity { return pbbEdgeSplitHorizonGroup.parent }

func (pbbEdgeSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeSplitHorizonGroup) GetParentYangName() string { return "pbb-edge" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings
// PBB Static Mac Address Mapping Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PBB Static Mac Address Mapping Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping.
    PbbStaticMacMapping []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetFilter() yfilter.YFilter { return pbbStaticMacMappings.YFilter }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) SetFilter(yf yfilter.YFilter) { pbbStaticMacMappings.YFilter = yf }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetGoName(yname string) string {
    if yname == "pbb-static-mac-mapping" { return "PbbStaticMacMapping" }
    return ""
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetSegmentPath() string {
    return "pbb-static-mac-mappings"
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-static-mac-mapping" {
        for _, c := range pbbStaticMacMappings.PbbStaticMacMapping {
            if pbbStaticMacMappings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping{}
        pbbStaticMacMappings.PbbStaticMacMapping = append(pbbStaticMacMappings.PbbStaticMacMapping, child)
        return &pbbStaticMacMappings.PbbStaticMacMapping[len(pbbStaticMacMappings.PbbStaticMacMapping)-1]
    }
    return nil
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pbbStaticMacMappings.PbbStaticMacMapping {
        children[pbbStaticMacMappings.PbbStaticMacMapping[i].GetSegmentPath()] = &pbbStaticMacMappings.PbbStaticMacMapping[i]
    }
    return children
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetBundleName() string { return "cisco_ios_xr" }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetYangName() string { return "pbb-static-mac-mappings" }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) SetParent(parent types.Entity) { pbbStaticMacMappings.parent = parent }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetParent() types.Entity { return pbbStaticMacMappings.parent }

func (pbbStaticMacMappings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings) GetParentYangName() string { return "pbb-edge" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping
// PBB Static Mac Address Mapping
// Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}

    // Static backbone MAC address to map with. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PbbStaticMacMappingBmac interface{}
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetFilter() yfilter.YFilter { return pbbStaticMacMapping.YFilter }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) SetFilter(yf yfilter.YFilter) { pbbStaticMacMapping.YFilter = yf }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "pbb-static-mac-mapping-bmac" { return "PbbStaticMacMappingBmac" }
    return ""
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetSegmentPath() string {
    return "pbb-static-mac-mapping" + "[address='" + fmt.Sprintf("%v", pbbStaticMacMapping.Address) + "']"
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = pbbStaticMacMapping.Address
    leafs["pbb-static-mac-mapping-bmac"] = pbbStaticMacMapping.PbbStaticMacMappingBmac
    return leafs
}

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetBundleName() string { return "cisco_ios_xr" }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetYangName() string { return "pbb-static-mac-mapping" }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) SetParent(parent types.Entity) { pbbStaticMacMapping.parent = parent }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetParent() types.Entity { return pbbStaticMacMapping.parent }

func (pbbStaticMacMapping *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbStaticMacMappings_PbbStaticMacMapping) GetParentYangName() string { return "pbb-static-mac-mappings" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile
// Attach a DHCP profile
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the snooping profile. The type is InterfaceProfile.
    ProfileId interface{}

    // Disable DHCP snooping. The type is string.
    DhcpSnoopingId interface{}
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetFilter() yfilter.YFilter { return pbbEdgeDhcpProfile.YFilter }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) SetFilter(yf yfilter.YFilter) { pbbEdgeDhcpProfile.YFilter = yf }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "dhcp-snooping-id" { return "DhcpSnoopingId" }
    return ""
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetSegmentPath() string {
    return "pbb-edge-dhcp-profile"
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = pbbEdgeDhcpProfile.ProfileId
    leafs["dhcp-snooping-id"] = pbbEdgeDhcpProfile.DhcpSnoopingId
    return leafs
}

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetYangName() string { return "pbb-edge-dhcp-profile" }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) SetParent(parent types.Entity) { pbbEdgeDhcpProfile.parent = parent }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetParent() types.Entity { return pbbEdgeDhcpProfile.parent }

func (pbbEdgeDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeDhcpProfile) GetParentYangName() string { return "pbb-edge" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac
// MAC configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Mac Learning. The type is MacLearn.
    PbbEdgeMacLearning interface{}

    // MAC-Limit configuration commands.
    PbbEdgeMacLimit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit

    // MAC-Aging configuration commands.
    PbbEdgeMacAging L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging

    // MAC Secure.
    PbbEdgeMacSecure L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetFilter() yfilter.YFilter { return pbbEdgeMac.YFilter }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) SetFilter(yf yfilter.YFilter) { pbbEdgeMac.YFilter = yf }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetGoName(yname string) string {
    if yname == "pbb-edge-mac-learning" { return "PbbEdgeMacLearning" }
    if yname == "pbb-edge-mac-limit" { return "PbbEdgeMacLimit" }
    if yname == "pbb-edge-mac-aging" { return "PbbEdgeMacAging" }
    if yname == "pbb-edge-mac-secure" { return "PbbEdgeMacSecure" }
    return ""
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetSegmentPath() string {
    return "pbb-edge-mac"
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-edge-mac-limit" {
        return &pbbEdgeMac.PbbEdgeMacLimit
    }
    if childYangName == "pbb-edge-mac-aging" {
        return &pbbEdgeMac.PbbEdgeMacAging
    }
    if childYangName == "pbb-edge-mac-secure" {
        return &pbbEdgeMac.PbbEdgeMacSecure
    }
    return nil
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pbb-edge-mac-limit"] = &pbbEdgeMac.PbbEdgeMacLimit
    children["pbb-edge-mac-aging"] = &pbbEdgeMac.PbbEdgeMacAging
    children["pbb-edge-mac-secure"] = &pbbEdgeMac.PbbEdgeMacSecure
    return children
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-edge-mac-learning"] = pbbEdgeMac.PbbEdgeMacLearning
    return leafs
}

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetYangName() string { return "pbb-edge-mac" }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) SetParent(parent types.Entity) { pbbEdgeMac.parent = parent }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetParent() types.Entity { return pbbEdgeMac.parent }

func (pbbEdgeMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac) GetParentYangName() string { return "pbb-edge" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit
// MAC-Limit configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address limit enforcement action. The type is MacLimitAction.
    PbbEdgeMacLimitAction interface{}

    // Number of MAC addresses after which MAC limit action is taken. The type is
    // interface{} with range: 0..4294967295.
    PbbEdgeMacLimitMax interface{}

    // MAC address limit notification action. The type is MacNotification.
    PbbEdgeMacLimitNotif interface{}
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetFilter() yfilter.YFilter { return pbbEdgeMacLimit.YFilter }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) SetFilter(yf yfilter.YFilter) { pbbEdgeMacLimit.YFilter = yf }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetGoName(yname string) string {
    if yname == "pbb-edge-mac-limit-action" { return "PbbEdgeMacLimitAction" }
    if yname == "pbb-edge-mac-limit-max" { return "PbbEdgeMacLimitMax" }
    if yname == "pbb-edge-mac-limit-notif" { return "PbbEdgeMacLimitNotif" }
    return ""
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetSegmentPath() string {
    return "pbb-edge-mac-limit"
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-edge-mac-limit-action"] = pbbEdgeMacLimit.PbbEdgeMacLimitAction
    leafs["pbb-edge-mac-limit-max"] = pbbEdgeMacLimit.PbbEdgeMacLimitMax
    leafs["pbb-edge-mac-limit-notif"] = pbbEdgeMacLimit.PbbEdgeMacLimitNotif
    return leafs
}

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetYangName() string { return "pbb-edge-mac-limit" }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) SetParent(parent types.Entity) { pbbEdgeMacLimit.parent = parent }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetParent() types.Entity { return pbbEdgeMacLimit.parent }

func (pbbEdgeMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacLimit) GetParentYangName() string { return "pbb-edge-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging
// MAC-Aging configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address aging type. The type is MacAging.
    PbbEdgeMacAgingType interface{}

    // Mac Aging Time. The type is interface{} with range: 300..30000.
    PbbEdgeMacAgingTime interface{}
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetFilter() yfilter.YFilter { return pbbEdgeMacAging.YFilter }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) SetFilter(yf yfilter.YFilter) { pbbEdgeMacAging.YFilter = yf }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetGoName(yname string) string {
    if yname == "pbb-edge-mac-aging-type" { return "PbbEdgeMacAgingType" }
    if yname == "pbb-edge-mac-aging-time" { return "PbbEdgeMacAgingTime" }
    return ""
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetSegmentPath() string {
    return "pbb-edge-mac-aging"
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-edge-mac-aging-type"] = pbbEdgeMacAging.PbbEdgeMacAgingType
    leafs["pbb-edge-mac-aging-time"] = pbbEdgeMacAging.PbbEdgeMacAgingTime
    return leafs
}

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetYangName() string { return "pbb-edge-mac-aging" }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) SetParent(parent types.Entity) { pbbEdgeMacAging.parent = parent }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetParent() types.Entity { return pbbEdgeMacAging.parent }

func (pbbEdgeMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacAging) GetParentYangName() string { return "pbb-edge-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure
// MAC Secure
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC Secure Logging. The type is L2vpnLogging.
    Logging interface{}

    // Disable Virtual instance port MAC Secure. The type is interface{}.
    Disable interface{}

    // MAC secure enforcement action. The type is MacSecureAction.
    Action interface{}

    // Enable MAC Secure. The type is interface{}.
    Enable interface{}

    // Accept Virtual instance port to be shutdown on mac violation. The type is
    // interface{}.
    AcceptShutdown interface{}
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetFilter() yfilter.YFilter { return pbbEdgeMacSecure.YFilter }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) SetFilter(yf yfilter.YFilter) { pbbEdgeMacSecure.YFilter = yf }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "action" { return "Action" }
    if yname == "enable" { return "Enable" }
    if yname == "accept-shutdown" { return "AcceptShutdown" }
    return ""
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetSegmentPath() string {
    return "pbb-edge-mac-secure"
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = pbbEdgeMacSecure.Logging
    leafs["disable"] = pbbEdgeMacSecure.Disable
    leafs["action"] = pbbEdgeMacSecure.Action
    leafs["enable"] = pbbEdgeMacSecure.Enable
    leafs["accept-shutdown"] = pbbEdgeMacSecure.AcceptShutdown
    return leafs
}

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetBundleName() string { return "cisco_ios_xr" }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetYangName() string { return "pbb-edge-mac-secure" }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) SetParent(parent types.Entity) { pbbEdgeMacSecure.parent = parent }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetParent() types.Entity { return pbbEdgeMacSecure.parent }

func (pbbEdgeMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbEdges_PbbEdge_PbbEdgeMac_PbbEdgeMacSecure) GetParentYangName() string { return "pbb-edge-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore
// PBB Core
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enabling MMRP PBB-VPLS Flood Optimization. The type is interface{}.
    PbbCoreMmrpFloodOptimization interface{}

    // VLAN ID to push. The type is interface{} with range: 1..4094.
    VlanId interface{}

    // Attach a IGMP Snooping profile. The type is string with length: 1..32.
    PbbCoreIgmpProfile interface{}

    // Enable Bridge Domain PBB Core Configuration. The type is interface{}.
    Enable interface{}

    // MAC configuration commands.
    PbbCoreMac L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac

    // PBB Core EVI Table.
    PbbCoreEvis L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis

    // Attach a DHCP profile.
    PbbCoreDhcpProfile L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetFilter() yfilter.YFilter { return pbbCore.YFilter }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) SetFilter(yf yfilter.YFilter) { pbbCore.YFilter = yf }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetGoName(yname string) string {
    if yname == "pbb-core-mmrp-flood-optimization" { return "PbbCoreMmrpFloodOptimization" }
    if yname == "vlan-id" { return "VlanId" }
    if yname == "pbb-core-igmp-profile" { return "PbbCoreIgmpProfile" }
    if yname == "enable" { return "Enable" }
    if yname == "pbb-core-mac" { return "PbbCoreMac" }
    if yname == "pbb-core-evis" { return "PbbCoreEvis" }
    if yname == "pbb-core-dhcp-profile" { return "PbbCoreDhcpProfile" }
    return ""
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetSegmentPath() string {
    return "pbb-core"
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-core-mac" {
        return &pbbCore.PbbCoreMac
    }
    if childYangName == "pbb-core-evis" {
        return &pbbCore.PbbCoreEvis
    }
    if childYangName == "pbb-core-dhcp-profile" {
        return &pbbCore.PbbCoreDhcpProfile
    }
    return nil
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pbb-core-mac"] = &pbbCore.PbbCoreMac
    children["pbb-core-evis"] = &pbbCore.PbbCoreEvis
    children["pbb-core-dhcp-profile"] = &pbbCore.PbbCoreDhcpProfile
    return children
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-core-mmrp-flood-optimization"] = pbbCore.PbbCoreMmrpFloodOptimization
    leafs["vlan-id"] = pbbCore.VlanId
    leafs["pbb-core-igmp-profile"] = pbbCore.PbbCoreIgmpProfile
    leafs["enable"] = pbbCore.Enable
    return leafs
}

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetYangName() string { return "pbb-core" }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) SetParent(parent types.Entity) { pbbCore.parent = parent }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetParent() types.Entity { return pbbCore.parent }

func (pbbCore *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore) GetParentYangName() string { return "bridge-domain-pbb" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac
// MAC configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Mac Learning. The type is MacLearn.
    PbbCoreMacLearning interface{}

    // MAC-Aging configuration commands.
    PbbCoreMacAging L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging

    // MAC-Limit configuration commands.
    PbbCoreMacLimit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetFilter() yfilter.YFilter { return pbbCoreMac.YFilter }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) SetFilter(yf yfilter.YFilter) { pbbCoreMac.YFilter = yf }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetGoName(yname string) string {
    if yname == "pbb-core-mac-learning" { return "PbbCoreMacLearning" }
    if yname == "pbb-core-mac-aging" { return "PbbCoreMacAging" }
    if yname == "pbb-core-mac-limit" { return "PbbCoreMacLimit" }
    return ""
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetSegmentPath() string {
    return "pbb-core-mac"
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-core-mac-aging" {
        return &pbbCoreMac.PbbCoreMacAging
    }
    if childYangName == "pbb-core-mac-limit" {
        return &pbbCoreMac.PbbCoreMacLimit
    }
    return nil
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pbb-core-mac-aging"] = &pbbCoreMac.PbbCoreMacAging
    children["pbb-core-mac-limit"] = &pbbCoreMac.PbbCoreMacLimit
    return children
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-core-mac-learning"] = pbbCoreMac.PbbCoreMacLearning
    return leafs
}

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetYangName() string { return "pbb-core-mac" }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) SetParent(parent types.Entity) { pbbCoreMac.parent = parent }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetParent() types.Entity { return pbbCoreMac.parent }

func (pbbCoreMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac) GetParentYangName() string { return "pbb-core" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging
// MAC-Aging configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address aging type. The type is MacAging.
    PbbCoreMacAgingType interface{}

    // Mac Aging Time. The type is interface{} with range: 300..30000.
    PbbCoreMacAgingTime interface{}
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetFilter() yfilter.YFilter { return pbbCoreMacAging.YFilter }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) SetFilter(yf yfilter.YFilter) { pbbCoreMacAging.YFilter = yf }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetGoName(yname string) string {
    if yname == "pbb-core-mac-aging-type" { return "PbbCoreMacAgingType" }
    if yname == "pbb-core-mac-aging-time" { return "PbbCoreMacAgingTime" }
    return ""
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetSegmentPath() string {
    return "pbb-core-mac-aging"
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-core-mac-aging-type"] = pbbCoreMacAging.PbbCoreMacAgingType
    leafs["pbb-core-mac-aging-time"] = pbbCoreMacAging.PbbCoreMacAgingTime
    return leafs
}

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetYangName() string { return "pbb-core-mac-aging" }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) SetParent(parent types.Entity) { pbbCoreMacAging.parent = parent }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetParent() types.Entity { return pbbCoreMacAging.parent }

func (pbbCoreMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacAging) GetParentYangName() string { return "pbb-core-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit
// MAC-Limit configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of MAC addresses after which MAC limit action is taken. The type is
    // interface{} with range: 0..4294967295.
    PbbCoreMacLimitMax interface{}

    // MAC address limit notification action. The type is MacNotification.
    PbbCoreMacLimitNotif interface{}

    // MAC address limit enforcement action. The type is MacLimitAction.
    PbbCoreMacLimitAction interface{}
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetFilter() yfilter.YFilter { return pbbCoreMacLimit.YFilter }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) SetFilter(yf yfilter.YFilter) { pbbCoreMacLimit.YFilter = yf }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetGoName(yname string) string {
    if yname == "pbb-core-mac-limit-max" { return "PbbCoreMacLimitMax" }
    if yname == "pbb-core-mac-limit-notif" { return "PbbCoreMacLimitNotif" }
    if yname == "pbb-core-mac-limit-action" { return "PbbCoreMacLimitAction" }
    return ""
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetSegmentPath() string {
    return "pbb-core-mac-limit"
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pbb-core-mac-limit-max"] = pbbCoreMacLimit.PbbCoreMacLimitMax
    leafs["pbb-core-mac-limit-notif"] = pbbCoreMacLimit.PbbCoreMacLimitNotif
    leafs["pbb-core-mac-limit-action"] = pbbCoreMacLimit.PbbCoreMacLimitAction
    return leafs
}

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetYangName() string { return "pbb-core-mac-limit" }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) SetParent(parent types.Entity) { pbbCoreMacLimit.parent = parent }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetParent() types.Entity { return pbbCoreMacLimit.parent }

func (pbbCoreMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreMac_PbbCoreMacLimit) GetParentYangName() string { return "pbb-core-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis
// PBB Core EVI Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PBB Core EVI. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi.
    PbbCoreEvi []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetFilter() yfilter.YFilter { return pbbCoreEvis.YFilter }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) SetFilter(yf yfilter.YFilter) { pbbCoreEvis.YFilter = yf }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetGoName(yname string) string {
    if yname == "pbb-core-evi" { return "PbbCoreEvi" }
    return ""
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetSegmentPath() string {
    return "pbb-core-evis"
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pbb-core-evi" {
        for _, c := range pbbCoreEvis.PbbCoreEvi {
            if pbbCoreEvis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi{}
        pbbCoreEvis.PbbCoreEvi = append(pbbCoreEvis.PbbCoreEvi, child)
        return &pbbCoreEvis.PbbCoreEvi[len(pbbCoreEvis.PbbCoreEvi)-1]
    }
    return nil
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pbbCoreEvis.PbbCoreEvi {
        children[pbbCoreEvis.PbbCoreEvi[i].GetSegmentPath()] = &pbbCoreEvis.PbbCoreEvi[i]
    }
    return children
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetYangName() string { return "pbb-core-evis" }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) SetParent(parent types.Entity) { pbbCoreEvis.parent = parent }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetParent() types.Entity { return pbbCoreEvis.parent }

func (pbbCoreEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis) GetParentYangName() string { return "pbb-core" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi
// PBB Core EVI
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..4294967295.
    Eviid interface{}
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetFilter() yfilter.YFilter { return pbbCoreEvi.YFilter }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) SetFilter(yf yfilter.YFilter) { pbbCoreEvi.YFilter = yf }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    return ""
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetSegmentPath() string {
    return "pbb-core-evi" + "[eviid='" + fmt.Sprintf("%v", pbbCoreEvi.Eviid) + "']"
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = pbbCoreEvi.Eviid
    return leafs
}

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetYangName() string { return "pbb-core-evi" }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) SetParent(parent types.Entity) { pbbCoreEvi.parent = parent }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetParent() types.Entity { return pbbCoreEvi.parent }

func (pbbCoreEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreEvis_PbbCoreEvi) GetParentYangName() string { return "pbb-core-evis" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile
// Attach a DHCP profile
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the snooping profile. The type is InterfaceProfile.
    ProfileId interface{}

    // Disable DHCP snooping. The type is string.
    DhcpSnoopingId interface{}
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetFilter() yfilter.YFilter { return pbbCoreDhcpProfile.YFilter }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) SetFilter(yf yfilter.YFilter) { pbbCoreDhcpProfile.YFilter = yf }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "dhcp-snooping-id" { return "DhcpSnoopingId" }
    return ""
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetSegmentPath() string {
    return "pbb-core-dhcp-profile"
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = pbbCoreDhcpProfile.ProfileId
    leafs["dhcp-snooping-id"] = pbbCoreDhcpProfile.DhcpSnoopingId
    return leafs
}

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetBundleName() string { return "cisco_ios_xr" }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetYangName() string { return "pbb-core-dhcp-profile" }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) SetParent(parent types.Entity) { pbbCoreDhcpProfile.parent = parent }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetParent() types.Entity { return pbbCoreDhcpProfile.parent }

func (pbbCoreDhcpProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainPbb_PbbCore_PbbCoreDhcpProfile) GetParentYangName() string { return "pbb-core" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis
// Bridge Domain EVI Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge Domain EVI. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi.
    BridgeDomainEvi []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetFilter() yfilter.YFilter { return bridgeDomainEvis.YFilter }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) SetFilter(yf yfilter.YFilter) { bridgeDomainEvis.YFilter = yf }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetGoName(yname string) string {
    if yname == "bridge-domain-evi" { return "BridgeDomainEvi" }
    return ""
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetSegmentPath() string {
    return "bridge-domain-evis"
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bridge-domain-evi" {
        for _, c := range bridgeDomainEvis.BridgeDomainEvi {
            if bridgeDomainEvis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi{}
        bridgeDomainEvis.BridgeDomainEvi = append(bridgeDomainEvis.BridgeDomainEvi, child)
        return &bridgeDomainEvis.BridgeDomainEvi[len(bridgeDomainEvis.BridgeDomainEvi)-1]
    }
    return nil
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bridgeDomainEvis.BridgeDomainEvi {
        children[bridgeDomainEvis.BridgeDomainEvi[i].GetSegmentPath()] = &bridgeDomainEvis.BridgeDomainEvi[i]
    }
    return children
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetYangName() string { return "bridge-domain-evis" }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) SetParent(parent types.Entity) { bridgeDomainEvis.parent = parent }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetParent() types.Entity { return bridgeDomainEvis.parent }

func (bridgeDomainEvis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi
// Bridge Domain EVI
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..4294967295.
    Eviid interface{}
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetFilter() yfilter.YFilter { return bridgeDomainEvi.YFilter }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) SetFilter(yf yfilter.YFilter) { bridgeDomainEvi.YFilter = yf }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    return ""
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetSegmentPath() string {
    return "bridge-domain-evi" + "[eviid='" + fmt.Sprintf("%v", bridgeDomainEvi.Eviid) + "']"
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = bridgeDomainEvi.Eviid
    return leafs
}

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetYangName() string { return "bridge-domain-evi" }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) SetParent(parent types.Entity) { bridgeDomainEvi.parent = parent }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetParent() types.Entity { return bridgeDomainEvi.parent }

func (bridgeDomainEvi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BridgeDomainEvis_BridgeDomainEvi) GetParentYangName() string { return "bridge-domain-evis" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis
// Specify the access virtual forwarding
// interface name
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Acess Virtual Forwarding Interface. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi.
    AccessVfi []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetFilter() yfilter.YFilter { return accessVfis.YFilter }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) SetFilter(yf yfilter.YFilter) { accessVfis.YFilter = yf }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetGoName(yname string) string {
    if yname == "access-vfi" { return "AccessVfi" }
    return ""
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetSegmentPath() string {
    return "access-vfis"
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-vfi" {
        for _, c := range accessVfis.AccessVfi {
            if accessVfis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi{}
        accessVfis.AccessVfi = append(accessVfis.AccessVfi, child)
        return &accessVfis.AccessVfi[len(accessVfis.AccessVfi)-1]
    }
    return nil
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accessVfis.AccessVfi {
        children[accessVfis.AccessVfi[i].GetSegmentPath()] = &accessVfis.AccessVfi[i]
    }
    return children
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetYangName() string { return "access-vfis" }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) SetParent(parent types.Entity) { accessVfis.parent = parent }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetParent() types.Entity { return accessVfis.parent }

func (accessVfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi
// Name of the Acess Virtual Forwarding
// Interface
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the AccessVirtual Forwarding Interface.
    // The type is string with length: 1..32.
    Name interface{}

    // shutdown the AccessVfi. The type is interface{}.
    AccessVfiShutdown interface{}

    // List of pseudowires.
    AccessVfiPseudowires L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetFilter() yfilter.YFilter { return accessVfi.YFilter }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) SetFilter(yf yfilter.YFilter) { accessVfi.YFilter = yf }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "access-vfi-shutdown" { return "AccessVfiShutdown" }
    if yname == "access-vfi-pseudowires" { return "AccessVfiPseudowires" }
    return ""
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetSegmentPath() string {
    return "access-vfi" + "[name='" + fmt.Sprintf("%v", accessVfi.Name) + "']"
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-vfi-pseudowires" {
        return &accessVfi.AccessVfiPseudowires
    }
    return nil
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["access-vfi-pseudowires"] = &accessVfi.AccessVfiPseudowires
    return children
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = accessVfi.Name
    leafs["access-vfi-shutdown"] = accessVfi.AccessVfiShutdown
    return leafs
}

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetYangName() string { return "access-vfi" }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) SetParent(parent types.Entity) { accessVfi.parent = parent }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetParent() types.Entity { return accessVfi.parent }

func (accessVfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi) GetParentYangName() string { return "access-vfis" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires
// List of pseudowires
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire.
    AccessVfiPseudowire []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetFilter() yfilter.YFilter { return accessVfiPseudowires.YFilter }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) SetFilter(yf yfilter.YFilter) { accessVfiPseudowires.YFilter = yf }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetGoName(yname string) string {
    if yname == "access-vfi-pseudowire" { return "AccessVfiPseudowire" }
    return ""
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetSegmentPath() string {
    return "access-vfi-pseudowires"
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-vfi-pseudowire" {
        for _, c := range accessVfiPseudowires.AccessVfiPseudowire {
            if accessVfiPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire{}
        accessVfiPseudowires.AccessVfiPseudowire = append(accessVfiPseudowires.AccessVfiPseudowire, child)
        return &accessVfiPseudowires.AccessVfiPseudowire[len(accessVfiPseudowires.AccessVfiPseudowire)-1]
    }
    return nil
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accessVfiPseudowires.AccessVfiPseudowire {
        children[accessVfiPseudowires.AccessVfiPseudowire[i].GetSegmentPath()] = &accessVfiPseudowires.AccessVfiPseudowire[i]
    }
    return children
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetYangName() string { return "access-vfi-pseudowires" }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) SetParent(parent types.Entity) { accessVfiPseudowires.parent = parent }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetParent() types.Entity { return accessVfiPseudowires.parent }

func (accessVfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires) GetParentYangName() string { return "access-vfi" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire
// Pseudowire configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // Pseudowire class template name to use for this pseudowire. The type is
    // string with length: 1..32.
    AccessVfiPwClass interface{}

    // Static Mac Address Table.
    AccessVfiPseudowireStaticMacAddresses L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetFilter() yfilter.YFilter { return accessVfiPseudowire.YFilter }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) SetFilter(yf yfilter.YFilter) { accessVfiPseudowire.YFilter = yf }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "access-vfi-pw-class" { return "AccessVfiPwClass" }
    if yname == "access-vfi-pseudowire-static-mac-addresses" { return "AccessVfiPseudowireStaticMacAddresses" }
    return ""
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetSegmentPath() string {
    return "access-vfi-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", accessVfiPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", accessVfiPseudowire.PseudowireId) + "']"
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-vfi-pseudowire-static-mac-addresses" {
        return &accessVfiPseudowire.AccessVfiPseudowireStaticMacAddresses
    }
    return nil
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["access-vfi-pseudowire-static-mac-addresses"] = &accessVfiPseudowire.AccessVfiPseudowireStaticMacAddresses
    return children
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = accessVfiPseudowire.Neighbor
    leafs["pseudowire-id"] = accessVfiPseudowire.PseudowireId
    leafs["access-vfi-pw-class"] = accessVfiPseudowire.AccessVfiPwClass
    return leafs
}

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetYangName() string { return "access-vfi-pseudowire" }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) SetParent(parent types.Entity) { accessVfiPseudowire.parent = parent }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetParent() types.Entity { return accessVfiPseudowire.parent }

func (accessVfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire) GetParentYangName() string { return "access-vfi-pseudowires" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses
// Static Mac Address Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static Mac Address Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress.
    AccessVfiPseudowireStaticMacAddress []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetFilter() yfilter.YFilter { return accessVfiPseudowireStaticMacAddresses.YFilter }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) SetFilter(yf yfilter.YFilter) { accessVfiPseudowireStaticMacAddresses.YFilter = yf }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetGoName(yname string) string {
    if yname == "access-vfi-pseudowire-static-mac-address" { return "AccessVfiPseudowireStaticMacAddress" }
    return ""
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetSegmentPath() string {
    return "access-vfi-pseudowire-static-mac-addresses"
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access-vfi-pseudowire-static-mac-address" {
        for _, c := range accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress {
            if accessVfiPseudowireStaticMacAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress{}
        accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress = append(accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress, child)
        return &accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress[len(accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress)-1]
    }
    return nil
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress {
        children[accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress[i].GetSegmentPath()] = &accessVfiPseudowireStaticMacAddresses.AccessVfiPseudowireStaticMacAddress[i]
    }
    return children
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetYangName() string { return "access-vfi-pseudowire-static-mac-addresses" }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) SetParent(parent types.Entity) { accessVfiPseudowireStaticMacAddresses.parent = parent }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetParent() types.Entity { return accessVfiPseudowireStaticMacAddresses.parent }

func (accessVfiPseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses) GetParentYangName() string { return "access-vfi-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress
// Static Mac Address Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetFilter() yfilter.YFilter { return accessVfiPseudowireStaticMacAddress.YFilter }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) SetFilter(yf yfilter.YFilter) { accessVfiPseudowireStaticMacAddress.YFilter = yf }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetSegmentPath() string {
    return "access-vfi-pseudowire-static-mac-address" + "[address='" + fmt.Sprintf("%v", accessVfiPseudowireStaticMacAddress.Address) + "']"
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = accessVfiPseudowireStaticMacAddress.Address
    return leafs
}

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetYangName() string { return "access-vfi-pseudowire-static-mac-address" }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) SetParent(parent types.Entity) { accessVfiPseudowireStaticMacAddress.parent = parent }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetParent() types.Entity { return accessVfiPseudowireStaticMacAddress.parent }

func (accessVfiPseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_AccessVfis_AccessVfi_AccessVfiPseudowires_AccessVfiPseudowire_AccessVfiPseudowireStaticMacAddresses_AccessVfiPseudowireStaticMacAddress) GetParentYangName() string { return "access-vfi-pseudowire-static-mac-addresses" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires
// List of pseudowires
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire.
    BdPseudowire []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetFilter() yfilter.YFilter { return bdPseudowires.YFilter }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) SetFilter(yf yfilter.YFilter) { bdPseudowires.YFilter = yf }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetGoName(yname string) string {
    if yname == "bd-pseudowire" { return "BdPseudowire" }
    return ""
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetSegmentPath() string {
    return "bd-pseudowires"
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-pseudowire" {
        for _, c := range bdPseudowires.BdPseudowire {
            if bdPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire{}
        bdPseudowires.BdPseudowire = append(bdPseudowires.BdPseudowire, child)
        return &bdPseudowires.BdPseudowire[len(bdPseudowires.BdPseudowire)-1]
    }
    return nil
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdPseudowires.BdPseudowire {
        children[bdPseudowires.BdPseudowire[i].GetSegmentPath()] = &bdPseudowires.BdPseudowire[i]
    }
    return children
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetYangName() string { return "bd-pseudowires" }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) SetParent(parent types.Entity) { bdPseudowires.parent = parent }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetParent() types.Entity { return bdPseudowires.parent }

func (bdPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire
// Pseudowire configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // Attach a MLD Snooping profile. The type is string with length: 1..32.
    PseudowireMldSnoop interface{}

    // Attach a IGMP Snooping profile. The type is string with length: 1..32.
    PseudowireIgmpSnoop interface{}

    // Bridge-domain Pseudowire flooding. The type is InterfaceTrafficFlood.
    PseudowireFlooding interface{}

    // PW class template name to use for this pseudowire. The type is string with
    // length: 1..32.
    BdPwClass interface{}

    // Bridge-domain Pseudowire flooding Unknown Unicast. The type is
    // InterfaceTrafficFlood.
    PseudowireFloodingUnknownUnicast interface{}

    // Access Pseudowire Dynamic ARP Inspection.
    PseudowireDai L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai

    // Storm Control.
    BdpwStormControlTypes L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes

    // Attach a DHCP profile.
    PseudowireProfile L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile

    // Static Mac Address Table.
    BdPwStaticMacAddresses L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses

    // IP Source Guard.
    PseudowireIpSourceGuard L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard

    // Bridge-domain Pseudowire MAC configuration commands.
    PseudowireMac L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac

    // Split Horizon.
    BdPwSplitHorizon L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon

    // MPLS static labels.
    BdPwMplsStaticLabels L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels

    // List of pseudowires.
    BridgeDomainBackupPseudowires L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetFilter() yfilter.YFilter { return bdPseudowire.YFilter }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) SetFilter(yf yfilter.YFilter) { bdPseudowire.YFilter = yf }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "pseudowire-mld-snoop" { return "PseudowireMldSnoop" }
    if yname == "pseudowire-igmp-snoop" { return "PseudowireIgmpSnoop" }
    if yname == "pseudowire-flooding" { return "PseudowireFlooding" }
    if yname == "bd-pw-class" { return "BdPwClass" }
    if yname == "pseudowire-flooding-unknown-unicast" { return "PseudowireFloodingUnknownUnicast" }
    if yname == "pseudowire-dai" { return "PseudowireDai" }
    if yname == "bdpw-storm-control-types" { return "BdpwStormControlTypes" }
    if yname == "pseudowire-profile" { return "PseudowireProfile" }
    if yname == "bd-pw-static-mac-addresses" { return "BdPwStaticMacAddresses" }
    if yname == "pseudowire-ip-source-guard" { return "PseudowireIpSourceGuard" }
    if yname == "pseudowire-mac" { return "PseudowireMac" }
    if yname == "bd-pw-split-horizon" { return "BdPwSplitHorizon" }
    if yname == "bd-pw-mpls-static-labels" { return "BdPwMplsStaticLabels" }
    if yname == "bridge-domain-backup-pseudowires" { return "BridgeDomainBackupPseudowires" }
    return ""
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetSegmentPath() string {
    return "bd-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", bdPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", bdPseudowire.PseudowireId) + "']"
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-dai" {
        return &bdPseudowire.PseudowireDai
    }
    if childYangName == "bdpw-storm-control-types" {
        return &bdPseudowire.BdpwStormControlTypes
    }
    if childYangName == "pseudowire-profile" {
        return &bdPseudowire.PseudowireProfile
    }
    if childYangName == "bd-pw-static-mac-addresses" {
        return &bdPseudowire.BdPwStaticMacAddresses
    }
    if childYangName == "pseudowire-ip-source-guard" {
        return &bdPseudowire.PseudowireIpSourceGuard
    }
    if childYangName == "pseudowire-mac" {
        return &bdPseudowire.PseudowireMac
    }
    if childYangName == "bd-pw-split-horizon" {
        return &bdPseudowire.BdPwSplitHorizon
    }
    if childYangName == "bd-pw-mpls-static-labels" {
        return &bdPseudowire.BdPwMplsStaticLabels
    }
    if childYangName == "bridge-domain-backup-pseudowires" {
        return &bdPseudowire.BridgeDomainBackupPseudowires
    }
    return nil
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pseudowire-dai"] = &bdPseudowire.PseudowireDai
    children["bdpw-storm-control-types"] = &bdPseudowire.BdpwStormControlTypes
    children["pseudowire-profile"] = &bdPseudowire.PseudowireProfile
    children["bd-pw-static-mac-addresses"] = &bdPseudowire.BdPwStaticMacAddresses
    children["pseudowire-ip-source-guard"] = &bdPseudowire.PseudowireIpSourceGuard
    children["pseudowire-mac"] = &bdPseudowire.PseudowireMac
    children["bd-pw-split-horizon"] = &bdPseudowire.BdPwSplitHorizon
    children["bd-pw-mpls-static-labels"] = &bdPseudowire.BdPwMplsStaticLabels
    children["bridge-domain-backup-pseudowires"] = &bdPseudowire.BridgeDomainBackupPseudowires
    return children
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = bdPseudowire.Neighbor
    leafs["pseudowire-id"] = bdPseudowire.PseudowireId
    leafs["pseudowire-mld-snoop"] = bdPseudowire.PseudowireMldSnoop
    leafs["pseudowire-igmp-snoop"] = bdPseudowire.PseudowireIgmpSnoop
    leafs["pseudowire-flooding"] = bdPseudowire.PseudowireFlooding
    leafs["bd-pw-class"] = bdPseudowire.BdPwClass
    leafs["pseudowire-flooding-unknown-unicast"] = bdPseudowire.PseudowireFloodingUnknownUnicast
    return leafs
}

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetYangName() string { return "bd-pseudowire" }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) SetParent(parent types.Entity) { bdPseudowire.parent = parent }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetParent() types.Entity { return bdPseudowire.parent }

func (bdPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire) GetParentYangName() string { return "bd-pseudowires" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai
// Access Pseudowire Dynamic ARP Inspection
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Logging Type. The type is L2vpnLogging.
    Logging interface{}

    // Disable Dynamic ARP Inspection. The type is interface{}.
    Disable interface{}

    // Enable Access Pseudowire Dynamic ARP Inspection. The type is interface{}.
    Enable interface{}

    // Address Validation.
    PseudowireDaiAddressValidation L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetFilter() yfilter.YFilter { return pseudowireDai.YFilter }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) SetFilter(yf yfilter.YFilter) { pseudowireDai.YFilter = yf }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "enable" { return "Enable" }
    if yname == "pseudowire-dai-address-validation" { return "PseudowireDaiAddressValidation" }
    return ""
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetSegmentPath() string {
    return "pseudowire-dai"
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-dai-address-validation" {
        return &pseudowireDai.PseudowireDaiAddressValidation
    }
    return nil
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pseudowire-dai-address-validation"] = &pseudowireDai.PseudowireDaiAddressValidation
    return children
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = pseudowireDai.Logging
    leafs["disable"] = pseudowireDai.Disable
    leafs["enable"] = pseudowireDai.Enable
    return leafs
}

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetYangName() string { return "pseudowire-dai" }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) SetParent(parent types.Entity) { pseudowireDai.parent = parent }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetParent() types.Entity { return pseudowireDai.parent }

func (pseudowireDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation
// Address Validation
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 Verification. The type is L2vpnVerification.
    Ipv4Verification interface{}

    // Destination MAC Verification. The type is L2vpnVerification.
    DestinationMacVerification interface{}

    // Source MAC Verification. The type is L2vpnVerification.
    SourceMacVerification interface{}
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetFilter() yfilter.YFilter { return pseudowireDaiAddressValidation.YFilter }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) SetFilter(yf yfilter.YFilter) { pseudowireDaiAddressValidation.YFilter = yf }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetGoName(yname string) string {
    if yname == "ipv4-verification" { return "Ipv4Verification" }
    if yname == "destination-mac-verification" { return "DestinationMacVerification" }
    if yname == "source-mac-verification" { return "SourceMacVerification" }
    return ""
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetSegmentPath() string {
    return "pseudowire-dai-address-validation"
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv4-verification"] = pseudowireDaiAddressValidation.Ipv4Verification
    leafs["destination-mac-verification"] = pseudowireDaiAddressValidation.DestinationMacVerification
    leafs["source-mac-verification"] = pseudowireDaiAddressValidation.SourceMacVerification
    return leafs
}

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetYangName() string { return "pseudowire-dai-address-validation" }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) SetParent(parent types.Entity) { pseudowireDaiAddressValidation.parent = parent }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetParent() types.Entity { return pseudowireDaiAddressValidation.parent }

func (pseudowireDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireDai_PseudowireDaiAddressValidation) GetParentYangName() string { return "pseudowire-dai" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes
// Storm Control
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Storm Control Type. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType.
    BdpwStormControlType []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetFilter() yfilter.YFilter { return bdpwStormControlTypes.YFilter }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) SetFilter(yf yfilter.YFilter) { bdpwStormControlTypes.YFilter = yf }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetGoName(yname string) string {
    if yname == "bdpw-storm-control-type" { return "BdpwStormControlType" }
    return ""
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetSegmentPath() string {
    return "bdpw-storm-control-types"
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bdpw-storm-control-type" {
        for _, c := range bdpwStormControlTypes.BdpwStormControlType {
            if bdpwStormControlTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType{}
        bdpwStormControlTypes.BdpwStormControlType = append(bdpwStormControlTypes.BdpwStormControlType, child)
        return &bdpwStormControlTypes.BdpwStormControlType[len(bdpwStormControlTypes.BdpwStormControlType)-1]
    }
    return nil
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdpwStormControlTypes.BdpwStormControlType {
        children[bdpwStormControlTypes.BdpwStormControlType[i].GetSegmentPath()] = &bdpwStormControlTypes.BdpwStormControlType[i]
    }
    return children
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetBundleName() string { return "cisco_ios_xr" }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetYangName() string { return "bdpw-storm-control-types" }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) SetParent(parent types.Entity) { bdpwStormControlTypes.parent = parent }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetParent() types.Entity { return bdpwStormControlTypes.parent }

func (bdpwStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType
// Storm Control Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Storm Control Type. The type is StormControl.
    Sctype interface{}

    // Specify units for Storm Control Configuration.
    StormControlUnit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetFilter() yfilter.YFilter { return bdpwStormControlType.YFilter }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) SetFilter(yf yfilter.YFilter) { bdpwStormControlType.YFilter = yf }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetGoName(yname string) string {
    if yname == "sctype" { return "Sctype" }
    if yname == "storm-control-unit" { return "StormControlUnit" }
    return ""
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetSegmentPath() string {
    return "bdpw-storm-control-type" + "[sctype='" + fmt.Sprintf("%v", bdpwStormControlType.Sctype) + "']"
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "storm-control-unit" {
        return &bdpwStormControlType.StormControlUnit
    }
    return nil
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["storm-control-unit"] = &bdpwStormControlType.StormControlUnit
    return children
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sctype"] = bdpwStormControlType.Sctype
    return leafs
}

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetBundleName() string { return "cisco_ios_xr" }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetYangName() string { return "bdpw-storm-control-type" }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) SetParent(parent types.Entity) { bdpwStormControlType.parent = parent }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetParent() types.Entity { return bdpwStormControlType.parent }

func (bdpwStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType) GetParentYangName() string { return "bdpw-storm-control-types" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit
// Specify units for Storm Control Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Kilobits Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 64..1280000. Units are
    // kbit/s.
    KbitsPerSec interface{}

    // Packets Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 1..160000. Units are
    // packet/s.
    PktsPerSec interface{}
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetFilter() yfilter.YFilter { return stormControlUnit.YFilter }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) SetFilter(yf yfilter.YFilter) { stormControlUnit.YFilter = yf }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetGoName(yname string) string {
    if yname == "kbits-per-sec" { return "KbitsPerSec" }
    if yname == "pkts-per-sec" { return "PktsPerSec" }
    return ""
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetSegmentPath() string {
    return "storm-control-unit"
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["kbits-per-sec"] = stormControlUnit.KbitsPerSec
    leafs["pkts-per-sec"] = stormControlUnit.PktsPerSec
    return leafs
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetBundleName() string { return "cisco_ios_xr" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetYangName() string { return "storm-control-unit" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) SetParent(parent types.Entity) { stormControlUnit.parent = parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetParent() types.Entity { return stormControlUnit.parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdpwStormControlTypes_BdpwStormControlType_StormControlUnit) GetParentYangName() string { return "bdpw-storm-control-type" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile
// Attach a DHCP profile
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the snooping profile. The type is InterfaceProfile.
    ProfileId interface{}

    // Disable DHCP snooping. The type is string.
    DhcpSnoopingId interface{}
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetFilter() yfilter.YFilter { return pseudowireProfile.YFilter }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) SetFilter(yf yfilter.YFilter) { pseudowireProfile.YFilter = yf }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "dhcp-snooping-id" { return "DhcpSnoopingId" }
    return ""
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetSegmentPath() string {
    return "pseudowire-profile"
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = pseudowireProfile.ProfileId
    leafs["dhcp-snooping-id"] = pseudowireProfile.DhcpSnoopingId
    return leafs
}

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetYangName() string { return "pseudowire-profile" }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) SetParent(parent types.Entity) { pseudowireProfile.parent = parent }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetParent() types.Entity { return pseudowireProfile.parent }

func (pseudowireProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireProfile) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses
// Static Mac Address Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static Mac Address Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress.
    BdPwStaticMacAddress []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetFilter() yfilter.YFilter { return bdPwStaticMacAddresses.YFilter }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) SetFilter(yf yfilter.YFilter) { bdPwStaticMacAddresses.YFilter = yf }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetGoName(yname string) string {
    if yname == "bd-pw-static-mac-address" { return "BdPwStaticMacAddress" }
    return ""
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetSegmentPath() string {
    return "bd-pw-static-mac-addresses"
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-pw-static-mac-address" {
        for _, c := range bdPwStaticMacAddresses.BdPwStaticMacAddress {
            if bdPwStaticMacAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress{}
        bdPwStaticMacAddresses.BdPwStaticMacAddress = append(bdPwStaticMacAddresses.BdPwStaticMacAddress, child)
        return &bdPwStaticMacAddresses.BdPwStaticMacAddress[len(bdPwStaticMacAddresses.BdPwStaticMacAddress)-1]
    }
    return nil
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdPwStaticMacAddresses.BdPwStaticMacAddress {
        children[bdPwStaticMacAddresses.BdPwStaticMacAddress[i].GetSegmentPath()] = &bdPwStaticMacAddresses.BdPwStaticMacAddress[i]
    }
    return children
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetYangName() string { return "bd-pw-static-mac-addresses" }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) SetParent(parent types.Entity) { bdPwStaticMacAddresses.parent = parent }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetParent() types.Entity { return bdPwStaticMacAddresses.parent }

func (bdPwStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress
// Static Mac Address Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetFilter() yfilter.YFilter { return bdPwStaticMacAddress.YFilter }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) SetFilter(yf yfilter.YFilter) { bdPwStaticMacAddress.YFilter = yf }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetSegmentPath() string {
    return "bd-pw-static-mac-address" + "[address='" + fmt.Sprintf("%v", bdPwStaticMacAddress.Address) + "']"
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = bdPwStaticMacAddress.Address
    return leafs
}

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetYangName() string { return "bd-pw-static-mac-address" }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) SetParent(parent types.Entity) { bdPwStaticMacAddress.parent = parent }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetParent() types.Entity { return bdPwStaticMacAddress.parent }

func (bdPwStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwStaticMacAddresses_BdPwStaticMacAddress) GetParentYangName() string { return "bd-pw-static-mac-addresses" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard
// IP Source Guard
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Logging Type. The type is L2vpnLogging.
    Logging interface{}

    // Disable Dynamic IP source guard. The type is interface{}.
    Disable interface{}

    // Enable IP Source Guard. The type is interface{}.
    Enable interface{}
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetFilter() yfilter.YFilter { return pseudowireIpSourceGuard.YFilter }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) SetFilter(yf yfilter.YFilter) { pseudowireIpSourceGuard.YFilter = yf }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetSegmentPath() string {
    return "pseudowire-ip-source-guard"
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = pseudowireIpSourceGuard.Logging
    leafs["disable"] = pseudowireIpSourceGuard.Disable
    leafs["enable"] = pseudowireIpSourceGuard.Enable
    return leafs
}

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetYangName() string { return "pseudowire-ip-source-guard" }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) SetParent(parent types.Entity) { pseudowireIpSourceGuard.parent = parent }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetParent() types.Entity { return pseudowireIpSourceGuard.parent }

func (pseudowireIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireIpSourceGuard) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac
// Bridge-domain Pseudowire MAC
// configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable MAC Flush When Port goes down. The type is PortDownFlush.
    PseudowireMacPortDownFlush interface{}

    // Bridge-domain Pseudowire MAC configuration mode. The type is interface{}.
    Enable interface{}

    // Enable MAC Learning. The type is MacLearn.
    PseudowireMacLearning interface{}

    // MAC Secure.
    PseudowireMacSecure L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure

    // MAC-Aging configuration commands.
    PseudowireMacAging L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging

    // MAC-Limit configuration commands.
    PseudowireMacLimit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetFilter() yfilter.YFilter { return pseudowireMac.YFilter }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) SetFilter(yf yfilter.YFilter) { pseudowireMac.YFilter = yf }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetGoName(yname string) string {
    if yname == "pseudowire-mac-port-down-flush" { return "PseudowireMacPortDownFlush" }
    if yname == "enable" { return "Enable" }
    if yname == "pseudowire-mac-learning" { return "PseudowireMacLearning" }
    if yname == "pseudowire-mac-secure" { return "PseudowireMacSecure" }
    if yname == "pseudowire-mac-aging" { return "PseudowireMacAging" }
    if yname == "pseudowire-mac-limit" { return "PseudowireMacLimit" }
    return ""
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetSegmentPath() string {
    return "pseudowire-mac"
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-mac-secure" {
        return &pseudowireMac.PseudowireMacSecure
    }
    if childYangName == "pseudowire-mac-aging" {
        return &pseudowireMac.PseudowireMacAging
    }
    if childYangName == "pseudowire-mac-limit" {
        return &pseudowireMac.PseudowireMacLimit
    }
    return nil
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pseudowire-mac-secure"] = &pseudowireMac.PseudowireMacSecure
    children["pseudowire-mac-aging"] = &pseudowireMac.PseudowireMacAging
    children["pseudowire-mac-limit"] = &pseudowireMac.PseudowireMacLimit
    return children
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pseudowire-mac-port-down-flush"] = pseudowireMac.PseudowireMacPortDownFlush
    leafs["enable"] = pseudowireMac.Enable
    leafs["pseudowire-mac-learning"] = pseudowireMac.PseudowireMacLearning
    return leafs
}

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetYangName() string { return "pseudowire-mac" }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) SetParent(parent types.Entity) { pseudowireMac.parent = parent }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetParent() types.Entity { return pseudowireMac.parent }

func (pseudowireMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure
// MAC Secure
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC Secure Logging. The type is L2vpnLogging.
    Logging interface{}

    // Disable L2 Pseudowire MAC Secure. The type is interface{}.
    Disable interface{}

    // MAC secure enforcement action. The type is MacSecureAction.
    Action interface{}

    // Enable MAC Secure. The type is interface{}.
    Enable interface{}
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetFilter() yfilter.YFilter { return pseudowireMacSecure.YFilter }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) SetFilter(yf yfilter.YFilter) { pseudowireMacSecure.YFilter = yf }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "action" { return "Action" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetSegmentPath() string {
    return "pseudowire-mac-secure"
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = pseudowireMacSecure.Logging
    leafs["disable"] = pseudowireMacSecure.Disable
    leafs["action"] = pseudowireMacSecure.Action
    leafs["enable"] = pseudowireMacSecure.Enable
    return leafs
}

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetYangName() string { return "pseudowire-mac-secure" }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) SetParent(parent types.Entity) { pseudowireMacSecure.parent = parent }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetParent() types.Entity { return pseudowireMacSecure.parent }

func (pseudowireMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacSecure) GetParentYangName() string { return "pseudowire-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging
// MAC-Aging configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address aging type. The type is MacAging.
    PseudowireMacAgingType interface{}

    // MAC Aging Time. The type is interface{} with range: 300..30000.
    PseudowireMacAgingTime interface{}
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetFilter() yfilter.YFilter { return pseudowireMacAging.YFilter }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) SetFilter(yf yfilter.YFilter) { pseudowireMacAging.YFilter = yf }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetGoName(yname string) string {
    if yname == "pseudowire-mac-aging-type" { return "PseudowireMacAgingType" }
    if yname == "pseudowire-mac-aging-time" { return "PseudowireMacAgingTime" }
    return ""
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetSegmentPath() string {
    return "pseudowire-mac-aging"
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pseudowire-mac-aging-type"] = pseudowireMacAging.PseudowireMacAgingType
    leafs["pseudowire-mac-aging-time"] = pseudowireMacAging.PseudowireMacAgingTime
    return leafs
}

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetYangName() string { return "pseudowire-mac-aging" }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) SetParent(parent types.Entity) { pseudowireMacAging.parent = parent }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetParent() types.Entity { return pseudowireMacAging.parent }

func (pseudowireMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacAging) GetParentYangName() string { return "pseudowire-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit
// MAC-Limit configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge Access Pseudowire MAC address limit enforcement action. The type is
    // MacLimitAction.
    PseudowireMacLimitAction interface{}

    // MAC address limit notification action in a Bridge Access Pseudowire. The
    // type is MacNotification.
    PseudowireMacLimitNotif interface{}

    // Number of MAC addresses on a Bridge Access Pseudowire after which MAC limit
    // action is taken. The type is interface{} with range: 0..4294967295.
    PseudowireMacLimitMax interface{}
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetFilter() yfilter.YFilter { return pseudowireMacLimit.YFilter }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) SetFilter(yf yfilter.YFilter) { pseudowireMacLimit.YFilter = yf }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetGoName(yname string) string {
    if yname == "pseudowire-mac-limit-action" { return "PseudowireMacLimitAction" }
    if yname == "pseudowire-mac-limit-notif" { return "PseudowireMacLimitNotif" }
    if yname == "pseudowire-mac-limit-max" { return "PseudowireMacLimitMax" }
    return ""
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetSegmentPath() string {
    return "pseudowire-mac-limit"
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pseudowire-mac-limit-action"] = pseudowireMacLimit.PseudowireMacLimitAction
    leafs["pseudowire-mac-limit-notif"] = pseudowireMacLimit.PseudowireMacLimitNotif
    leafs["pseudowire-mac-limit-max"] = pseudowireMacLimit.PseudowireMacLimitMax
    return leafs
}

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetYangName() string { return "pseudowire-mac-limit" }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) SetParent(parent types.Entity) { pseudowireMacLimit.parent = parent }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetParent() types.Entity { return pseudowireMacLimit.parent }

func (pseudowireMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_PseudowireMac_PseudowireMacLimit) GetParentYangName() string { return "pseudowire-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon
// Split Horizon
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Split Horizon Group.
    BdPwSplitHorizonGroup L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetFilter() yfilter.YFilter { return bdPwSplitHorizon.YFilter }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) SetFilter(yf yfilter.YFilter) { bdPwSplitHorizon.YFilter = yf }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetGoName(yname string) string {
    if yname == "bd-pw-split-horizon-group" { return "BdPwSplitHorizonGroup" }
    return ""
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetSegmentPath() string {
    return "bd-pw-split-horizon"
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-pw-split-horizon-group" {
        return &bdPwSplitHorizon.BdPwSplitHorizonGroup
    }
    return nil
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bd-pw-split-horizon-group"] = &bdPwSplitHorizon.BdPwSplitHorizonGroup
    return children
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetBundleName() string { return "cisco_ios_xr" }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetYangName() string { return "bd-pw-split-horizon" }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) SetParent(parent types.Entity) { bdPwSplitHorizon.parent = parent }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetParent() types.Entity { return bdPwSplitHorizon.parent }

func (bdPwSplitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup
// Split Horizon Group
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable split horizon group. The type is interface{}.
    Enable interface{}
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetFilter() yfilter.YFilter { return bdPwSplitHorizonGroup.YFilter }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) SetFilter(yf yfilter.YFilter) { bdPwSplitHorizonGroup.YFilter = yf }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetSegmentPath() string {
    return "bd-pw-split-horizon-group"
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = bdPwSplitHorizonGroup.Enable
    return leafs
}

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetBundleName() string { return "cisco_ios_xr" }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetYangName() string { return "bd-pw-split-horizon-group" }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) SetParent(parent types.Entity) { bdPwSplitHorizonGroup.parent = parent }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetParent() types.Entity { return bdPwSplitHorizonGroup.parent }

func (bdPwSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwSplitHorizon_BdPwSplitHorizonGroup) GetParentYangName() string { return "bd-pw-split-horizon" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels
// MPLS static labels
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetFilter() yfilter.YFilter { return bdPwMplsStaticLabels.YFilter }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) SetFilter(yf yfilter.YFilter) { bdPwMplsStaticLabels.YFilter = yf }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetSegmentPath() string {
    return "bd-pw-mpls-static-labels"
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = bdPwMplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = bdPwMplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetYangName() string { return "bd-pw-mpls-static-labels" }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) SetParent(parent types.Entity) { bdPwMplsStaticLabels.parent = parent }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetParent() types.Entity { return bdPwMplsStaticLabels.parent }

func (bdPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BdPwMplsStaticLabels) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires
// List of pseudowires
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Backup pseudowire configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire.
    BridgeDomainBackupPseudowire []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetFilter() yfilter.YFilter { return bridgeDomainBackupPseudowires.YFilter }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) SetFilter(yf yfilter.YFilter) { bridgeDomainBackupPseudowires.YFilter = yf }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetGoName(yname string) string {
    if yname == "bridge-domain-backup-pseudowire" { return "BridgeDomainBackupPseudowire" }
    return ""
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetSegmentPath() string {
    return "bridge-domain-backup-pseudowires"
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bridge-domain-backup-pseudowire" {
        for _, c := range bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire {
            if bridgeDomainBackupPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire{}
        bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire = append(bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire, child)
        return &bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire[len(bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire)-1]
    }
    return nil
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire {
        children[bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire[i].GetSegmentPath()] = &bridgeDomainBackupPseudowires.BridgeDomainBackupPseudowire[i]
    }
    return children
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetYangName() string { return "bridge-domain-backup-pseudowires" }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) SetParent(parent types.Entity) { bridgeDomainBackupPseudowires.parent = parent }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetParent() types.Entity { return bridgeDomainBackupPseudowires.parent }

func (bridgeDomainBackupPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires) GetParentYangName() string { return "bd-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire
// Backup pseudowire configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // PW class template name to use for this pseudowire. The type is string with
    // length: 1..32.
    BridgeDomainBackupPwClass interface{}
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetFilter() yfilter.YFilter { return bridgeDomainBackupPseudowire.YFilter }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) SetFilter(yf yfilter.YFilter) { bridgeDomainBackupPseudowire.YFilter = yf }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "bridge-domain-backup-pw-class" { return "BridgeDomainBackupPwClass" }
    return ""
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetSegmentPath() string {
    return "bridge-domain-backup-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", bridgeDomainBackupPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", bridgeDomainBackupPseudowire.PseudowireId) + "']"
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = bridgeDomainBackupPseudowire.Neighbor
    leafs["pseudowire-id"] = bridgeDomainBackupPseudowire.PseudowireId
    leafs["bridge-domain-backup-pw-class"] = bridgeDomainBackupPseudowire.BridgeDomainBackupPwClass
    return leafs
}

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetYangName() string { return "bridge-domain-backup-pseudowire" }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) SetParent(parent types.Entity) { bridgeDomainBackupPseudowire.parent = parent }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetParent() types.Entity { return bridgeDomainBackupPseudowire.parent }

func (bridgeDomainBackupPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowires_BdPseudowire_BridgeDomainBackupPseudowires_BridgeDomainBackupPseudowire) GetParentYangName() string { return "bridge-domain-backup-pseudowires" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis
// Specify the virtual forwarding interface
// name
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Virtual Forwarding Interface. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi.
    Vfi []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetFilter() yfilter.YFilter { return vfis.YFilter }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) SetFilter(yf yfilter.YFilter) { vfis.YFilter = yf }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetGoName(yname string) string {
    if yname == "vfi" { return "Vfi" }
    return ""
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetSegmentPath() string {
    return "vfis"
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vfi" {
        for _, c := range vfis.Vfi {
            if vfis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi{}
        vfis.Vfi = append(vfis.Vfi, child)
        return &vfis.Vfi[len(vfis.Vfi)-1]
    }
    return nil
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vfis.Vfi {
        children[vfis.Vfi[i].GetSegmentPath()] = &vfis.Vfi[i]
    }
    return children
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetBundleName() string { return "cisco_ios_xr" }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetYangName() string { return "vfis" }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) SetParent(parent types.Entity) { vfis.parent = parent }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetParent() types.Entity { return vfis.parent }

func (vfis *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi
// Name of the Virtual Forwarding Interface
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Virtual Forwarding Interface. The type
    // is string with length: 1..32.
    Name interface{}

    // Enabling Shutdown. The type is interface{}.
    VfiShutdown interface{}

    // VPN Identifier. The type is interface{} with range: 1..4294967295.
    Vpnid interface{}

    // Enable Multicast P2MP in this VFI.
    MulticastP2Mp L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp

    // List of pseudowires.
    VfiPseudowires L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires

    // Enable Autodiscovery BGP in this VFI.
    BgpAutoDiscovery L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetFilter() yfilter.YFilter { return vfi.YFilter }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) SetFilter(yf yfilter.YFilter) { vfi.YFilter = yf }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "vfi-shutdown" { return "VfiShutdown" }
    if yname == "vpnid" { return "Vpnid" }
    if yname == "multicast-p2mp" { return "MulticastP2Mp" }
    if yname == "vfi-pseudowires" { return "VfiPseudowires" }
    if yname == "bgp-auto-discovery" { return "BgpAutoDiscovery" }
    return ""
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetSegmentPath() string {
    return "vfi" + "[name='" + fmt.Sprintf("%v", vfi.Name) + "']"
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "multicast-p2mp" {
        return &vfi.MulticastP2Mp
    }
    if childYangName == "vfi-pseudowires" {
        return &vfi.VfiPseudowires
    }
    if childYangName == "bgp-auto-discovery" {
        return &vfi.BgpAutoDiscovery
    }
    return nil
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["multicast-p2mp"] = &vfi.MulticastP2Mp
    children["vfi-pseudowires"] = &vfi.VfiPseudowires
    children["bgp-auto-discovery"] = &vfi.BgpAutoDiscovery
    return children
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = vfi.Name
    leafs["vfi-shutdown"] = vfi.VfiShutdown
    leafs["vpnid"] = vfi.Vpnid
    return leafs
}

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetBundleName() string { return "cisco_ios_xr" }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetYangName() string { return "vfi" }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) SetParent(parent types.Entity) { vfi.parent = parent }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetParent() types.Entity { return vfi.parent }

func (vfi *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi) GetParentYangName() string { return "vfis" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp
// Enable Multicast P2MP in this VFI
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Autodiscovery P2MP. The type is interface{}.
    Enable interface{}

    // Multicast P2MP Transport.
    Transports L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports

    // Multicast P2MP Signaling Type.
    Signalings L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetFilter() yfilter.YFilter { return multicastP2Mp.YFilter }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) SetFilter(yf yfilter.YFilter) { multicastP2Mp.YFilter = yf }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "transports" { return "Transports" }
    if yname == "signalings" { return "Signalings" }
    return ""
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetSegmentPath() string {
    return "multicast-p2mp"
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transports" {
        return &multicastP2Mp.Transports
    }
    if childYangName == "signalings" {
        return &multicastP2Mp.Signalings
    }
    return nil
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transports"] = &multicastP2Mp.Transports
    children["signalings"] = &multicastP2Mp.Signalings
    return children
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = multicastP2Mp.Enable
    return leafs
}

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetBundleName() string { return "cisco_ios_xr" }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetYangName() string { return "multicast-p2mp" }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) SetParent(parent types.Entity) { multicastP2Mp.parent = parent }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetParent() types.Entity { return multicastP2Mp.parent }

func (multicastP2Mp *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp) GetParentYangName() string { return "vfi" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports
// Multicast P2MP Transport
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multicast P2MP Transport Type. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport.
    Transport []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetFilter() yfilter.YFilter { return transports.YFilter }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) SetFilter(yf yfilter.YFilter) { transports.YFilter = yf }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetGoName(yname string) string {
    if yname == "transport" { return "Transport" }
    return ""
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetSegmentPath() string {
    return "transports"
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transport" {
        for _, c := range transports.Transport {
            if transports.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport{}
        transports.Transport = append(transports.Transport, child)
        return &transports.Transport[len(transports.Transport)-1]
    }
    return nil
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range transports.Transport {
        children[transports.Transport[i].GetSegmentPath()] = &transports.Transport[i]
    }
    return children
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetBundleName() string { return "cisco_ios_xr" }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetYangName() string { return "transports" }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) SetParent(parent types.Entity) { transports.parent = parent }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetParent() types.Entity { return transports.parent }

func (transports *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports) GetParentYangName() string { return "multicast-p2mp" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport
// Multicast P2MP Transport Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Transport Type. The type is string with pattern:
    // (RSVP_TE).
    TransportName interface{}

    // Multicast P2MP TE Attribute Set Name. The type is string with length:
    // 1..64.
    AttributeSetName interface{}
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetFilter() yfilter.YFilter { return transport.YFilter }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) SetFilter(yf yfilter.YFilter) { transport.YFilter = yf }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetGoName(yname string) string {
    if yname == "transport-name" { return "TransportName" }
    if yname == "attribute-set-name" { return "AttributeSetName" }
    return ""
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetSegmentPath() string {
    return "transport" + "[transport-name='" + fmt.Sprintf("%v", transport.TransportName) + "']"
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-name"] = transport.TransportName
    leafs["attribute-set-name"] = transport.AttributeSetName
    return leafs
}

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetBundleName() string { return "cisco_ios_xr" }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetYangName() string { return "transport" }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) SetParent(parent types.Entity) { transport.parent = parent }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetParent() types.Entity { return transport.parent }

func (transport *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Transports_Transport) GetParentYangName() string { return "transports" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings
// Multicast P2MP Signaling Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Multicast P2MP Signaling Type. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling.
    Signaling []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetFilter() yfilter.YFilter { return signalings.YFilter }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) SetFilter(yf yfilter.YFilter) { signalings.YFilter = yf }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetGoName(yname string) string {
    if yname == "signaling" { return "Signaling" }
    return ""
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetSegmentPath() string {
    return "signalings"
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "signaling" {
        for _, c := range signalings.Signaling {
            if signalings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling{}
        signalings.Signaling = append(signalings.Signaling, child)
        return &signalings.Signaling[len(signalings.Signaling)-1]
    }
    return nil
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range signalings.Signaling {
        children[signalings.Signaling[i].GetSegmentPath()] = &signalings.Signaling[i]
    }
    return children
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetBundleName() string { return "cisco_ios_xr" }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetYangName() string { return "signalings" }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) SetParent(parent types.Entity) { signalings.parent = parent }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetParent() types.Entity { return signalings.parent }

func (signalings *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings) GetParentYangName() string { return "multicast-p2mp" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling
// Multicast P2MP Signaling Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Signaling Type. The type is string with pattern:
    // (BGP).
    SignalingName interface{}
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetFilter() yfilter.YFilter { return signaling.YFilter }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) SetFilter(yf yfilter.YFilter) { signaling.YFilter = yf }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetGoName(yname string) string {
    if yname == "signaling-name" { return "SignalingName" }
    return ""
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetSegmentPath() string {
    return "signaling" + "[signaling-name='" + fmt.Sprintf("%v", signaling.SignalingName) + "']"
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["signaling-name"] = signaling.SignalingName
    return leafs
}

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetBundleName() string { return "cisco_ios_xr" }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetYangName() string { return "signaling" }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) SetParent(parent types.Entity) { signaling.parent = parent }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetParent() types.Entity { return signaling.parent }

func (signaling *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_MulticastP2Mp_Signalings_Signaling) GetParentYangName() string { return "signalings" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires
// List of pseudowires
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire.
    VfiPseudowire []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetFilter() yfilter.YFilter { return vfiPseudowires.YFilter }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) SetFilter(yf yfilter.YFilter) { vfiPseudowires.YFilter = yf }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetGoName(yname string) string {
    if yname == "vfi-pseudowire" { return "VfiPseudowire" }
    return ""
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetSegmentPath() string {
    return "vfi-pseudowires"
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vfi-pseudowire" {
        for _, c := range vfiPseudowires.VfiPseudowire {
            if vfiPseudowires.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire{}
        vfiPseudowires.VfiPseudowire = append(vfiPseudowires.VfiPseudowire, child)
        return &vfiPseudowires.VfiPseudowire[len(vfiPseudowires.VfiPseudowire)-1]
    }
    return nil
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vfiPseudowires.VfiPseudowire {
        children[vfiPseudowires.VfiPseudowire[i].GetSegmentPath()] = &vfiPseudowires.VfiPseudowire[i]
    }
    return children
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetBundleName() string { return "cisco_ios_xr" }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetYangName() string { return "vfi-pseudowires" }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) SetParent(parent types.Entity) { vfiPseudowires.parent = parent }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetParent() types.Entity { return vfiPseudowires.parent }

func (vfiPseudowires *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires) GetParentYangName() string { return "vfi" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire
// Pseudowire configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // PW class template name to use for this pseudowire. The type is string with
    // length: 1..32.
    VfiPwClass interface{}

    // Attach a IGMP Snooping profile. The type is string with length: 1..32.
    VfiPwIgmpSnoop interface{}

    // Attach a MLD Snooping profile. The type is string with length: 1..32.
    VfiPwMldSnoop interface{}

    // Attach a DHCP Snooping profile.
    VfiPwDhcpSnoop L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop

    // MPLS static labels.
    VfiPwMplsStaticLabels L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels

    // Static Mac Address Table.
    PseudowireStaticMacAddresses L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetFilter() yfilter.YFilter { return vfiPseudowire.YFilter }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) SetFilter(yf yfilter.YFilter) { vfiPseudowire.YFilter = yf }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "vfi-pw-class" { return "VfiPwClass" }
    if yname == "vfi-pw-igmp-snoop" { return "VfiPwIgmpSnoop" }
    if yname == "vfi-pw-mld-snoop" { return "VfiPwMldSnoop" }
    if yname == "vfi-pw-dhcp-snoop" { return "VfiPwDhcpSnoop" }
    if yname == "vfi-pw-mpls-static-labels" { return "VfiPwMplsStaticLabels" }
    if yname == "pseudowire-static-mac-addresses" { return "PseudowireStaticMacAddresses" }
    return ""
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetSegmentPath() string {
    return "vfi-pseudowire" + "[neighbor='" + fmt.Sprintf("%v", vfiPseudowire.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", vfiPseudowire.PseudowireId) + "']"
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vfi-pw-dhcp-snoop" {
        return &vfiPseudowire.VfiPwDhcpSnoop
    }
    if childYangName == "vfi-pw-mpls-static-labels" {
        return &vfiPseudowire.VfiPwMplsStaticLabels
    }
    if childYangName == "pseudowire-static-mac-addresses" {
        return &vfiPseudowire.PseudowireStaticMacAddresses
    }
    return nil
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vfi-pw-dhcp-snoop"] = &vfiPseudowire.VfiPwDhcpSnoop
    children["vfi-pw-mpls-static-labels"] = &vfiPseudowire.VfiPwMplsStaticLabels
    children["pseudowire-static-mac-addresses"] = &vfiPseudowire.PseudowireStaticMacAddresses
    return children
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = vfiPseudowire.Neighbor
    leafs["pseudowire-id"] = vfiPseudowire.PseudowireId
    leafs["vfi-pw-class"] = vfiPseudowire.VfiPwClass
    leafs["vfi-pw-igmp-snoop"] = vfiPseudowire.VfiPwIgmpSnoop
    leafs["vfi-pw-mld-snoop"] = vfiPseudowire.VfiPwMldSnoop
    return leafs
}

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetYangName() string { return "vfi-pseudowire" }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) SetParent(parent types.Entity) { vfiPseudowire.parent = parent }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetParent() types.Entity { return vfiPseudowire.parent }

func (vfiPseudowire *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire) GetParentYangName() string { return "vfi-pseudowires" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop
// Attach a DHCP Snooping profile
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the snooping profile. The type is InterfaceProfile.
    ProfileId interface{}

    // Disable DHCP snooping. The type is string.
    DhcpSnoopingId interface{}
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetFilter() yfilter.YFilter { return vfiPwDhcpSnoop.YFilter }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) SetFilter(yf yfilter.YFilter) { vfiPwDhcpSnoop.YFilter = yf }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "dhcp-snooping-id" { return "DhcpSnoopingId" }
    return ""
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetSegmentPath() string {
    return "vfi-pw-dhcp-snoop"
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = vfiPwDhcpSnoop.ProfileId
    leafs["dhcp-snooping-id"] = vfiPwDhcpSnoop.DhcpSnoopingId
    return leafs
}

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetBundleName() string { return "cisco_ios_xr" }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetYangName() string { return "vfi-pw-dhcp-snoop" }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) SetParent(parent types.Entity) { vfiPwDhcpSnoop.parent = parent }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetParent() types.Entity { return vfiPwDhcpSnoop.parent }

func (vfiPwDhcpSnoop *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwDhcpSnoop) GetParentYangName() string { return "vfi-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels
// MPLS static labels
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire local static label. The type is interface{} with range:
    // 16..1048575.
    LocalStaticLabel interface{}

    // Pseudowire remote static label. The type is interface{} with range:
    // 16..1048575.
    RemoteStaticLabel interface{}
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetFilter() yfilter.YFilter { return vfiPwMplsStaticLabels.YFilter }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) SetFilter(yf yfilter.YFilter) { vfiPwMplsStaticLabels.YFilter = yf }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetGoName(yname string) string {
    if yname == "local-static-label" { return "LocalStaticLabel" }
    if yname == "remote-static-label" { return "RemoteStaticLabel" }
    return ""
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetSegmentPath() string {
    return "vfi-pw-mpls-static-labels"
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-static-label"] = vfiPwMplsStaticLabels.LocalStaticLabel
    leafs["remote-static-label"] = vfiPwMplsStaticLabels.RemoteStaticLabel
    return leafs
}

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetBundleName() string { return "cisco_ios_xr" }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetYangName() string { return "vfi-pw-mpls-static-labels" }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) SetParent(parent types.Entity) { vfiPwMplsStaticLabels.parent = parent }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetParent() types.Entity { return vfiPwMplsStaticLabels.parent }

func (vfiPwMplsStaticLabels *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_VfiPwMplsStaticLabels) GetParentYangName() string { return "vfi-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses
// Static Mac Address Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static Mac Address Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress.
    PseudowireStaticMacAddress []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetFilter() yfilter.YFilter { return pseudowireStaticMacAddresses.YFilter }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) SetFilter(yf yfilter.YFilter) { pseudowireStaticMacAddresses.YFilter = yf }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetGoName(yname string) string {
    if yname == "pseudowire-static-mac-address" { return "PseudowireStaticMacAddress" }
    return ""
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetSegmentPath() string {
    return "pseudowire-static-mac-addresses"
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-static-mac-address" {
        for _, c := range pseudowireStaticMacAddresses.PseudowireStaticMacAddress {
            if pseudowireStaticMacAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress{}
        pseudowireStaticMacAddresses.PseudowireStaticMacAddress = append(pseudowireStaticMacAddresses.PseudowireStaticMacAddress, child)
        return &pseudowireStaticMacAddresses.PseudowireStaticMacAddress[len(pseudowireStaticMacAddresses.PseudowireStaticMacAddress)-1]
    }
    return nil
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowireStaticMacAddresses.PseudowireStaticMacAddress {
        children[pseudowireStaticMacAddresses.PseudowireStaticMacAddress[i].GetSegmentPath()] = &pseudowireStaticMacAddresses.PseudowireStaticMacAddress[i]
    }
    return children
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetYangName() string { return "pseudowire-static-mac-addresses" }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) SetParent(parent types.Entity) { pseudowireStaticMacAddresses.parent = parent }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetParent() types.Entity { return pseudowireStaticMacAddresses.parent }

func (pseudowireStaticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses) GetParentYangName() string { return "vfi-pseudowire" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress
// Static Mac Address Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetFilter() yfilter.YFilter { return pseudowireStaticMacAddress.YFilter }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) SetFilter(yf yfilter.YFilter) { pseudowireStaticMacAddress.YFilter = yf }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetSegmentPath() string {
    return "pseudowire-static-mac-address" + "[address='" + fmt.Sprintf("%v", pseudowireStaticMacAddress.Address) + "']"
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = pseudowireStaticMacAddress.Address
    return leafs
}

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetYangName() string { return "pseudowire-static-mac-address" }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) SetParent(parent types.Entity) { pseudowireStaticMacAddress.parent = parent }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetParent() types.Entity { return pseudowireStaticMacAddress.parent }

func (pseudowireStaticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_VfiPseudowires_VfiPseudowire_PseudowireStaticMacAddresses_PseudowireStaticMacAddress) GetParentYangName() string { return "pseudowire-static-mac-addresses" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery
// Enable Autodiscovery BGP in this VFI
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Policy for installation of forwarding data to L2FIB. The type is
    // string.
    TablePolicy interface{}

    // Enable control-word for this VFI. The type is interface{}.
    AdControlWord interface{}

    // Enable Autodiscovery BGP. The type is interface{}.
    Enable interface{}

    // Signaling Protocol LDP in this VFI configuration.
    LdpSignalingProtocol L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol

    // Route policy.
    BgpRoutePolicy L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy

    // Route Distinguisher.
    RouteDistinguisher L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher

    // Enable Signaling Protocol BGP in this VFI.
    BgpSignalingProtocol L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol

    // Route Target.
    RouteTargets L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetFilter() yfilter.YFilter { return bgpAutoDiscovery.YFilter }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) SetFilter(yf yfilter.YFilter) { bgpAutoDiscovery.YFilter = yf }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetGoName(yname string) string {
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "ad-control-word" { return "AdControlWord" }
    if yname == "enable" { return "Enable" }
    if yname == "ldp-signaling-protocol" { return "LdpSignalingProtocol" }
    if yname == "bgp-route-policy" { return "BgpRoutePolicy" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    if yname == "bgp-signaling-protocol" { return "BgpSignalingProtocol" }
    if yname == "route-targets" { return "RouteTargets" }
    return ""
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetSegmentPath() string {
    return "bgp-auto-discovery"
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ldp-signaling-protocol" {
        return &bgpAutoDiscovery.LdpSignalingProtocol
    }
    if childYangName == "bgp-route-policy" {
        return &bgpAutoDiscovery.BgpRoutePolicy
    }
    if childYangName == "route-distinguisher" {
        return &bgpAutoDiscovery.RouteDistinguisher
    }
    if childYangName == "bgp-signaling-protocol" {
        return &bgpAutoDiscovery.BgpSignalingProtocol
    }
    if childYangName == "route-targets" {
        return &bgpAutoDiscovery.RouteTargets
    }
    return nil
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ldp-signaling-protocol"] = &bgpAutoDiscovery.LdpSignalingProtocol
    children["bgp-route-policy"] = &bgpAutoDiscovery.BgpRoutePolicy
    children["route-distinguisher"] = &bgpAutoDiscovery.RouteDistinguisher
    children["bgp-signaling-protocol"] = &bgpAutoDiscovery.BgpSignalingProtocol
    children["route-targets"] = &bgpAutoDiscovery.RouteTargets
    return children
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-policy"] = bgpAutoDiscovery.TablePolicy
    leafs["ad-control-word"] = bgpAutoDiscovery.AdControlWord
    leafs["enable"] = bgpAutoDiscovery.Enable
    return leafs
}

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetYangName() string { return "bgp-auto-discovery" }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) SetParent(parent types.Entity) { bgpAutoDiscovery.parent = parent }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetParent() types.Entity { return bgpAutoDiscovery.parent }

func (bgpAutoDiscovery *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery) GetParentYangName() string { return "vfi" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol
// Signaling Protocol LDP in this VFI
// configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable LDP as Signaling Protocol .Deletion of this object also causes
    // deletion of all objects under LDPSignalingProtocol. The type is
    // interface{}.
    Enable interface{}

    // VPLS ID.
    VplsId L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId

    // Enable Flow Label based load balancing.
    FlowLabelLoadBalance L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetFilter() yfilter.YFilter { return ldpSignalingProtocol.YFilter }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) SetFilter(yf yfilter.YFilter) { ldpSignalingProtocol.YFilter = yf }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "vpls-id" { return "VplsId" }
    if yname == "flow-label-load-balance" { return "FlowLabelLoadBalance" }
    return ""
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetSegmentPath() string {
    return "ldp-signaling-protocol"
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vpls-id" {
        return &ldpSignalingProtocol.VplsId
    }
    if childYangName == "flow-label-load-balance" {
        return &ldpSignalingProtocol.FlowLabelLoadBalance
    }
    return nil
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vpls-id"] = &ldpSignalingProtocol.VplsId
    children["flow-label-load-balance"] = &ldpSignalingProtocol.FlowLabelLoadBalance
    return children
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = ldpSignalingProtocol.Enable
    return leafs
}

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetYangName() string { return "ldp-signaling-protocol" }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) SetParent(parent types.Entity) { ldpSignalingProtocol.parent = parent }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetParent() types.Entity { return ldpSignalingProtocol.parent }

func (ldpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol) GetParentYangName() string { return "bgp-auto-discovery" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId
// VPLS ID
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VPLS-ID Type. The type is LdpVplsId.
    Type interface{}

    // Two byte AS number. The type is interface{} with range: 1..65535.
    As interface{}

    // AS index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Address index. The type is interface{} with range: 0..32767.
    AddressIndex interface{}
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetFilter() yfilter.YFilter { return vplsId.YFilter }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) SetFilter(yf yfilter.YFilter) { vplsId.YFilter = yf }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetSegmentPath() string {
    return "vpls-id"
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = vplsId.Type
    leafs["as"] = vplsId.As
    leafs["as-index"] = vplsId.AsIndex
    leafs["address"] = vplsId.Address
    leafs["address-index"] = vplsId.AddressIndex
    return leafs
}

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetBundleName() string { return "cisco_ios_xr" }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetYangName() string { return "vpls-id" }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) SetParent(parent types.Entity) { vplsId.parent = parent }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetParent() types.Entity { return vplsId.parent }

func (vplsId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_VplsId) GetParentYangName() string { return "ldp-signaling-protocol" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance
// Enable Flow Label based load balancing
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flow Label load balance type. The type is FlowLabelLoadBalance.
    FlowLabel interface{}

    // Static Flow Label. The type is interface{}.
    Static interface{}
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetFilter() yfilter.YFilter { return flowLabelLoadBalance.YFilter }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) SetFilter(yf yfilter.YFilter) { flowLabelLoadBalance.YFilter = yf }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetGoName(yname string) string {
    if yname == "flow-label" { return "FlowLabel" }
    if yname == "static" { return "Static" }
    return ""
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetSegmentPath() string {
    return "flow-label-load-balance"
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-label"] = flowLabelLoadBalance.FlowLabel
    leafs["static"] = flowLabelLoadBalance.Static
    return leafs
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetBundleName() string { return "cisco_ios_xr" }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetYangName() string { return "flow-label-load-balance" }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) SetParent(parent types.Entity) { flowLabelLoadBalance.parent = parent }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetParent() types.Entity { return flowLabelLoadBalance.parent }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_LdpSignalingProtocol_FlowLabelLoadBalance) GetParentYangName() string { return "ldp-signaling-protocol" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy
// Route policy
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Export route policy. The type is string.
    Export interface{}
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetFilter() yfilter.YFilter { return bgpRoutePolicy.YFilter }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) SetFilter(yf yfilter.YFilter) { bgpRoutePolicy.YFilter = yf }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetGoName(yname string) string {
    if yname == "export" { return "Export" }
    return ""
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetSegmentPath() string {
    return "bgp-route-policy"
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["export"] = bgpRoutePolicy.Export
    return leafs
}

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetBundleName() string { return "cisco_ios_xr" }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetYangName() string { return "bgp-route-policy" }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) SetParent(parent types.Entity) { bgpRoutePolicy.parent = parent }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetParent() types.Entity { return bgpRoutePolicy.parent }

func (bgpRoutePolicy *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpRoutePolicy) GetParentYangName() string { return "bgp-auto-discovery" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher
// Route Distinguisher
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router Distinguisher Type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetFilter() yfilter.YFilter { return routeDistinguisher.YFilter }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) SetFilter(yf yfilter.YFilter) { routeDistinguisher.YFilter = yf }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetSegmentPath() string {
    return "route-distinguisher"
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = routeDistinguisher.Type
    leafs["as"] = routeDistinguisher.As
    leafs["as-index"] = routeDistinguisher.AsIndex
    leafs["address"] = routeDistinguisher.Address
    leafs["addr-index"] = routeDistinguisher.AddrIndex
    return leafs
}

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetYangName() string { return "route-distinguisher" }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) SetParent(parent types.Entity) { routeDistinguisher.parent = parent }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetParent() types.Entity { return routeDistinguisher.parent }

func (routeDistinguisher *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteDistinguisher) GetParentYangName() string { return "bgp-auto-discovery" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol
// Enable Signaling Protocol BGP in this
// VFI
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Virtual Edge Block Configurable Range. The type is interface{} with
    // range: 11..100.
    VeRange interface{}

    // Local Virtual Edge Identifier. The type is interface{} with range:
    // 1..16384.
    Veid interface{}

    // Enable BGP as Signaling Protocol. The type is interface{}.
    Enable interface{}

    // Enable Flow Label based load balancing.
    FlowLabelLoadBalance L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetFilter() yfilter.YFilter { return bgpSignalingProtocol.YFilter }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) SetFilter(yf yfilter.YFilter) { bgpSignalingProtocol.YFilter = yf }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetGoName(yname string) string {
    if yname == "ve-range" { return "VeRange" }
    if yname == "veid" { return "Veid" }
    if yname == "enable" { return "Enable" }
    if yname == "flow-label-load-balance" { return "FlowLabelLoadBalance" }
    return ""
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetSegmentPath() string {
    return "bgp-signaling-protocol"
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-label-load-balance" {
        return &bgpSignalingProtocol.FlowLabelLoadBalance
    }
    return nil
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-label-load-balance"] = &bgpSignalingProtocol.FlowLabelLoadBalance
    return children
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ve-range"] = bgpSignalingProtocol.VeRange
    leafs["veid"] = bgpSignalingProtocol.Veid
    leafs["enable"] = bgpSignalingProtocol.Enable
    return leafs
}

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetYangName() string { return "bgp-signaling-protocol" }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) SetParent(parent types.Entity) { bgpSignalingProtocol.parent = parent }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetParent() types.Entity { return bgpSignalingProtocol.parent }

func (bgpSignalingProtocol *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol) GetParentYangName() string { return "bgp-auto-discovery" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance
// Enable Flow Label based load balancing
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flow Label load balance type. The type is FlowLabelLoadBalance.
    FlowLabel interface{}

    // Static Flow Label. The type is interface{}.
    Static interface{}
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetFilter() yfilter.YFilter { return flowLabelLoadBalance.YFilter }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) SetFilter(yf yfilter.YFilter) { flowLabelLoadBalance.YFilter = yf }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetGoName(yname string) string {
    if yname == "flow-label" { return "FlowLabel" }
    if yname == "static" { return "Static" }
    return ""
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetSegmentPath() string {
    return "flow-label-load-balance"
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-label"] = flowLabelLoadBalance.FlowLabel
    leafs["static"] = flowLabelLoadBalance.Static
    return leafs
}

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetBundleName() string { return "cisco_ios_xr" }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetYangName() string { return "flow-label-load-balance" }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) SetParent(parent types.Entity) { flowLabelLoadBalance.parent = parent }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetParent() types.Entity { return flowLabelLoadBalance.parent }

func (flowLabelLoadBalance *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_BgpSignalingProtocol_FlowLabelLoadBalance) GetParentYangName() string { return "bgp-signaling-protocol" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets
// Route Target
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Route Target. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget.
    RouteTarget []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetFilter() yfilter.YFilter { return routeTargets.YFilter }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) SetFilter(yf yfilter.YFilter) { routeTargets.YFilter = yf }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetGoName(yname string) string {
    if yname == "route-target" { return "RouteTarget" }
    return ""
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetSegmentPath() string {
    return "route-targets"
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-target" {
        for _, c := range routeTargets.RouteTarget {
            if routeTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget{}
        routeTargets.RouteTarget = append(routeTargets.RouteTarget, child)
        return &routeTargets.RouteTarget[len(routeTargets.RouteTarget)-1]
    }
    return nil
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routeTargets.RouteTarget {
        children[routeTargets.RouteTarget[i].GetSegmentPath()] = &routeTargets.RouteTarget[i]
    }
    return children
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetBundleName() string { return "cisco_ios_xr" }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetYangName() string { return "route-targets" }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) SetParent(parent types.Entity) { routeTargets.parent = parent }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetParent() types.Entity { return routeTargets.parent }

func (routeTargets *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets) GetParentYangName() string { return "bgp-auto-discovery" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget
// Name of the Route Target
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // two byte as or four byte as. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs.
    TwoByteAsOrFourByteAs []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs

    // ipv4 address. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address.
    Ipv4Address []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetFilter() yfilter.YFilter { return routeTarget.YFilter }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) SetFilter(yf yfilter.YFilter) { routeTarget.YFilter = yf }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "format" { return "Format" }
    if yname == "two-byte-as-or-four-byte-as" { return "TwoByteAsOrFourByteAs" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    return ""
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetSegmentPath() string {
    return "route-target" + "[role='" + fmt.Sprintf("%v", routeTarget.Role) + "']" + "[format='" + fmt.Sprintf("%v", routeTarget.Format) + "']"
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "two-byte-as-or-four-byte-as" {
        for _, c := range routeTarget.TwoByteAsOrFourByteAs {
            if routeTarget.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs{}
        routeTarget.TwoByteAsOrFourByteAs = append(routeTarget.TwoByteAsOrFourByteAs, child)
        return &routeTarget.TwoByteAsOrFourByteAs[len(routeTarget.TwoByteAsOrFourByteAs)-1]
    }
    if childYangName == "ipv4-address" {
        for _, c := range routeTarget.Ipv4Address {
            if routeTarget.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address{}
        routeTarget.Ipv4Address = append(routeTarget.Ipv4Address, child)
        return &routeTarget.Ipv4Address[len(routeTarget.Ipv4Address)-1]
    }
    return nil
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routeTarget.TwoByteAsOrFourByteAs {
        children[routeTarget.TwoByteAsOrFourByteAs[i].GetSegmentPath()] = &routeTarget.TwoByteAsOrFourByteAs[i]
    }
    for i := range routeTarget.Ipv4Address {
        children[routeTarget.Ipv4Address[i].GetSegmentPath()] = &routeTarget.Ipv4Address[i]
    }
    return children
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = routeTarget.Role
    leafs["format"] = routeTarget.Format
    return leafs
}

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetBundleName() string { return "cisco_ios_xr" }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetYangName() string { return "route-target" }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) SetParent(parent types.Entity) { routeTarget.parent = parent }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetParent() types.Entity { return routeTarget.parent }

func (routeTarget *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget) GetParentYangName() string { return "route-targets" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs
// two byte as or four byte as
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Two byte or 4 byte AS number. The type is
    // interface{} with range: 1..4294967295.
    As interface{}

    // This attribute is a key. AS:nn (hex or decimal format). The type is
    // interface{} with range: 0..4294967295.
    AsIndex interface{}
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetFilter() yfilter.YFilter { return twoByteAsOrFourByteAs.YFilter }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) SetFilter(yf yfilter.YFilter) { twoByteAsOrFourByteAs.YFilter = yf }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    return ""
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetSegmentPath() string {
    return "two-byte-as-or-four-byte-as" + "[as='" + fmt.Sprintf("%v", twoByteAsOrFourByteAs.As) + "']" + "[as-index='" + fmt.Sprintf("%v", twoByteAsOrFourByteAs.AsIndex) + "']"
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = twoByteAsOrFourByteAs.As
    leafs["as-index"] = twoByteAsOrFourByteAs.AsIndex
    return leafs
}

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetBundleName() string { return "cisco_ios_xr" }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetYangName() string { return "two-byte-as-or-four-byte-as" }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) SetParent(parent types.Entity) { twoByteAsOrFourByteAs.parent = parent }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetParent() types.Entity { return twoByteAsOrFourByteAs.parent }

func (twoByteAsOrFourByteAs *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_TwoByteAsOrFourByteAs) GetParentYangName() string { return "route-target" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address
// ipv4 address
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. Addr index. The type is interface{} with range:
    // 0..65535.
    AddrIndex interface{}
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetFilter() yfilter.YFilter { return ipv4Address.YFilter }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) SetFilter(yf yfilter.YFilter) { ipv4Address.YFilter = yf }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetSegmentPath() string {
    return "ipv4-address" + "[address='" + fmt.Sprintf("%v", ipv4Address.Address) + "']" + "[addr-index='" + fmt.Sprintf("%v", ipv4Address.AddrIndex) + "']"
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ipv4Address.Address
    leafs["addr-index"] = ipv4Address.AddrIndex
    return leafs
}

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetYangName() string { return "ipv4-address" }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) SetParent(parent types.Entity) { ipv4Address.parent = parent }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetParent() types.Entity { return ipv4Address.parent }

func (ipv4Address *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Vfis_Vfi_BgpAutoDiscovery_RouteTargets_RouteTarget_Ipv4Address) GetParentYangName() string { return "route-target" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits
// Attachment Circuit table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Attachment Circuit. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit.
    BdAttachmentCircuit []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetFilter() yfilter.YFilter { return bdAttachmentCircuits.YFilter }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) SetFilter(yf yfilter.YFilter) { bdAttachmentCircuits.YFilter = yf }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetGoName(yname string) string {
    if yname == "bd-attachment-circuit" { return "BdAttachmentCircuit" }
    return ""
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetSegmentPath() string {
    return "bd-attachment-circuits"
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-attachment-circuit" {
        for _, c := range bdAttachmentCircuits.BdAttachmentCircuit {
            if bdAttachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit{}
        bdAttachmentCircuits.BdAttachmentCircuit = append(bdAttachmentCircuits.BdAttachmentCircuit, child)
        return &bdAttachmentCircuits.BdAttachmentCircuit[len(bdAttachmentCircuits.BdAttachmentCircuit)-1]
    }
    return nil
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdAttachmentCircuits.BdAttachmentCircuit {
        children[bdAttachmentCircuits.BdAttachmentCircuit[i].GetSegmentPath()] = &bdAttachmentCircuits.BdAttachmentCircuit[i]
    }
    return children
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetYangName() string { return "bd-attachment-circuits" }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) SetParent(parent types.Entity) { bdAttachmentCircuits.parent = parent }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetParent() types.Entity { return bdAttachmentCircuits.parent }

func (bdAttachmentCircuits *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit
// Name of the Attachment Circuit
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The name of the Attachment Circuit. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    Name interface{}

    // Enable or Disable Flooding. The type is InterfaceTrafficFlood.
    InterfaceFlooding interface{}

    // Attach a IGMP Snooping profile. The type is string with length: 1..32.
    InterfaceIgmpSnoop interface{}

    // Enable or Disable Unknown Unicast Flooding. The type is
    // InterfaceTrafficFlood.
    InterfaceFloodingUnknownUnicast interface{}

    // Attach a MLD Snooping profile. The type is string with length: 1..32.
    InterfaceMldSnoop interface{}

    // IP Source Guard.
    InterfaceIpSourceGuard L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard

    // L2 Interface Dynamic ARP Inspection.
    InterfaceDai L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai

    // Attach a DHCP profile.
    InterfaceProfile L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile

    // Storm Control.
    BdacStormControlTypes L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes

    // Split Horizon.
    SplitHorizon L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon

    // Static Mac Address Table.
    StaticMacAddresses L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses

    // MAC configuration commands.
    InterfaceMac L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetFilter() yfilter.YFilter { return bdAttachmentCircuit.YFilter }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) SetFilter(yf yfilter.YFilter) { bdAttachmentCircuit.YFilter = yf }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "interface-flooding" { return "InterfaceFlooding" }
    if yname == "interface-igmp-snoop" { return "InterfaceIgmpSnoop" }
    if yname == "interface-flooding-unknown-unicast" { return "InterfaceFloodingUnknownUnicast" }
    if yname == "interface-mld-snoop" { return "InterfaceMldSnoop" }
    if yname == "interface-ip-source-guard" { return "InterfaceIpSourceGuard" }
    if yname == "interface-dai" { return "InterfaceDai" }
    if yname == "interface-profile" { return "InterfaceProfile" }
    if yname == "bdac-storm-control-types" { return "BdacStormControlTypes" }
    if yname == "split-horizon" { return "SplitHorizon" }
    if yname == "static-mac-addresses" { return "StaticMacAddresses" }
    if yname == "interface-mac" { return "InterfaceMac" }
    return ""
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetSegmentPath() string {
    return "bd-attachment-circuit" + "[name='" + fmt.Sprintf("%v", bdAttachmentCircuit.Name) + "']"
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-ip-source-guard" {
        return &bdAttachmentCircuit.InterfaceIpSourceGuard
    }
    if childYangName == "interface-dai" {
        return &bdAttachmentCircuit.InterfaceDai
    }
    if childYangName == "interface-profile" {
        return &bdAttachmentCircuit.InterfaceProfile
    }
    if childYangName == "bdac-storm-control-types" {
        return &bdAttachmentCircuit.BdacStormControlTypes
    }
    if childYangName == "split-horizon" {
        return &bdAttachmentCircuit.SplitHorizon
    }
    if childYangName == "static-mac-addresses" {
        return &bdAttachmentCircuit.StaticMacAddresses
    }
    if childYangName == "interface-mac" {
        return &bdAttachmentCircuit.InterfaceMac
    }
    return nil
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-ip-source-guard"] = &bdAttachmentCircuit.InterfaceIpSourceGuard
    children["interface-dai"] = &bdAttachmentCircuit.InterfaceDai
    children["interface-profile"] = &bdAttachmentCircuit.InterfaceProfile
    children["bdac-storm-control-types"] = &bdAttachmentCircuit.BdacStormControlTypes
    children["split-horizon"] = &bdAttachmentCircuit.SplitHorizon
    children["static-mac-addresses"] = &bdAttachmentCircuit.StaticMacAddresses
    children["interface-mac"] = &bdAttachmentCircuit.InterfaceMac
    return children
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = bdAttachmentCircuit.Name
    leafs["interface-flooding"] = bdAttachmentCircuit.InterfaceFlooding
    leafs["interface-igmp-snoop"] = bdAttachmentCircuit.InterfaceIgmpSnoop
    leafs["interface-flooding-unknown-unicast"] = bdAttachmentCircuit.InterfaceFloodingUnknownUnicast
    leafs["interface-mld-snoop"] = bdAttachmentCircuit.InterfaceMldSnoop
    return leafs
}

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetYangName() string { return "bd-attachment-circuit" }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) SetParent(parent types.Entity) { bdAttachmentCircuit.parent = parent }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetParent() types.Entity { return bdAttachmentCircuit.parent }

func (bdAttachmentCircuit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit) GetParentYangName() string { return "bd-attachment-circuits" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard
// IP Source Guard
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Logging Type. The type is L2vpnLogging.
    Logging interface{}

    // Disable L2 Interface Dynamic IP source guard. The type is interface{}.
    Disable interface{}

    // Enable IP Source Guard. The type is interface{}.
    Enable interface{}
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetFilter() yfilter.YFilter { return interfaceIpSourceGuard.YFilter }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) SetFilter(yf yfilter.YFilter) { interfaceIpSourceGuard.YFilter = yf }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetSegmentPath() string {
    return "interface-ip-source-guard"
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = interfaceIpSourceGuard.Logging
    leafs["disable"] = interfaceIpSourceGuard.Disable
    leafs["enable"] = interfaceIpSourceGuard.Enable
    return leafs
}

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetYangName() string { return "interface-ip-source-guard" }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) SetParent(parent types.Entity) { interfaceIpSourceGuard.parent = parent }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetParent() types.Entity { return interfaceIpSourceGuard.parent }

func (interfaceIpSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceIpSourceGuard) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai
// L2 Interface Dynamic ARP Inspection
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Logging Type. The type is L2vpnLogging.
    Logging interface{}

    // Disable L2 Interface Dynamic ARP Inspection. The type is interface{}.
    Disable interface{}

    // Enable L2 Interface Dynamic ARP Inspection. The type is interface{}.
    Enable interface{}

    // Address Validation.
    InterfaceDaiAddressValidation L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetFilter() yfilter.YFilter { return interfaceDai.YFilter }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) SetFilter(yf yfilter.YFilter) { interfaceDai.YFilter = yf }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "enable" { return "Enable" }
    if yname == "interface-dai-address-validation" { return "InterfaceDaiAddressValidation" }
    return ""
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetSegmentPath() string {
    return "interface-dai"
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-dai-address-validation" {
        return &interfaceDai.InterfaceDaiAddressValidation
    }
    return nil
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-dai-address-validation"] = &interfaceDai.InterfaceDaiAddressValidation
    return children
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = interfaceDai.Logging
    leafs["disable"] = interfaceDai.Disable
    leafs["enable"] = interfaceDai.Enable
    return leafs
}

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetYangName() string { return "interface-dai" }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) SetParent(parent types.Entity) { interfaceDai.parent = parent }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetParent() types.Entity { return interfaceDai.parent }

func (interfaceDai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation
// Address Validation
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 Verification. The type is L2vpnVerification.
    Ipv4Verification interface{}

    // Destination MAC Verification. The type is L2vpnVerification.
    DestinationMacVerification interface{}

    // Source MAC Verification. The type is L2vpnVerification.
    SourceMacVerification interface{}

    // Enable Address Validation. The type is interface{}.
    Enable interface{}
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetFilter() yfilter.YFilter { return interfaceDaiAddressValidation.YFilter }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) SetFilter(yf yfilter.YFilter) { interfaceDaiAddressValidation.YFilter = yf }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetGoName(yname string) string {
    if yname == "ipv4-verification" { return "Ipv4Verification" }
    if yname == "destination-mac-verification" { return "DestinationMacVerification" }
    if yname == "source-mac-verification" { return "SourceMacVerification" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetSegmentPath() string {
    return "interface-dai-address-validation"
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv4-verification"] = interfaceDaiAddressValidation.Ipv4Verification
    leafs["destination-mac-verification"] = interfaceDaiAddressValidation.DestinationMacVerification
    leafs["source-mac-verification"] = interfaceDaiAddressValidation.SourceMacVerification
    leafs["enable"] = interfaceDaiAddressValidation.Enable
    return leafs
}

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetYangName() string { return "interface-dai-address-validation" }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) SetParent(parent types.Entity) { interfaceDaiAddressValidation.parent = parent }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetParent() types.Entity { return interfaceDaiAddressValidation.parent }

func (interfaceDaiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceDai_InterfaceDaiAddressValidation) GetParentYangName() string { return "interface-dai" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile
// Attach a DHCP profile
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the snooping profile. The type is InterfaceProfile.
    ProfileId interface{}

    // Disable DHCP snooping. The type is string.
    DhcpSnoopingId interface{}
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetFilter() yfilter.YFilter { return interfaceProfile.YFilter }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) SetFilter(yf yfilter.YFilter) { interfaceProfile.YFilter = yf }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetGoName(yname string) string {
    if yname == "profile-id" { return "ProfileId" }
    if yname == "dhcp-snooping-id" { return "DhcpSnoopingId" }
    return ""
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetSegmentPath() string {
    return "interface-profile"
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["profile-id"] = interfaceProfile.ProfileId
    leafs["dhcp-snooping-id"] = interfaceProfile.DhcpSnoopingId
    return leafs
}

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetYangName() string { return "interface-profile" }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) SetParent(parent types.Entity) { interfaceProfile.parent = parent }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetParent() types.Entity { return interfaceProfile.parent }

func (interfaceProfile *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceProfile) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes
// Storm Control
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Storm Control Type. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType.
    BdacStormControlType []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetFilter() yfilter.YFilter { return bdacStormControlTypes.YFilter }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) SetFilter(yf yfilter.YFilter) { bdacStormControlTypes.YFilter = yf }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetGoName(yname string) string {
    if yname == "bdac-storm-control-type" { return "BdacStormControlType" }
    return ""
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetSegmentPath() string {
    return "bdac-storm-control-types"
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bdac-storm-control-type" {
        for _, c := range bdacStormControlTypes.BdacStormControlType {
            if bdacStormControlTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType{}
        bdacStormControlTypes.BdacStormControlType = append(bdacStormControlTypes.BdacStormControlType, child)
        return &bdacStormControlTypes.BdacStormControlType[len(bdacStormControlTypes.BdacStormControlType)-1]
    }
    return nil
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdacStormControlTypes.BdacStormControlType {
        children[bdacStormControlTypes.BdacStormControlType[i].GetSegmentPath()] = &bdacStormControlTypes.BdacStormControlType[i]
    }
    return children
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetBundleName() string { return "cisco_ios_xr" }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetYangName() string { return "bdac-storm-control-types" }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) SetParent(parent types.Entity) { bdacStormControlTypes.parent = parent }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetParent() types.Entity { return bdacStormControlTypes.parent }

func (bdacStormControlTypes *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType
// Storm Control Type
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Storm Control Type. The type is StormControl.
    Sctype interface{}

    // Specify units for Storm Control Configuration.
    StormControlUnit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetFilter() yfilter.YFilter { return bdacStormControlType.YFilter }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) SetFilter(yf yfilter.YFilter) { bdacStormControlType.YFilter = yf }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetGoName(yname string) string {
    if yname == "sctype" { return "Sctype" }
    if yname == "storm-control-unit" { return "StormControlUnit" }
    return ""
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetSegmentPath() string {
    return "bdac-storm-control-type" + "[sctype='" + fmt.Sprintf("%v", bdacStormControlType.Sctype) + "']"
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "storm-control-unit" {
        return &bdacStormControlType.StormControlUnit
    }
    return nil
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["storm-control-unit"] = &bdacStormControlType.StormControlUnit
    return children
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sctype"] = bdacStormControlType.Sctype
    return leafs
}

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetBundleName() string { return "cisco_ios_xr" }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetYangName() string { return "bdac-storm-control-type" }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) SetParent(parent types.Entity) { bdacStormControlType.parent = parent }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetParent() types.Entity { return bdacStormControlType.parent }

func (bdacStormControlType *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType) GetParentYangName() string { return "bdac-storm-control-types" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit
// Specify units for Storm Control Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Kilobits Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 64..1280000. Units are
    // kbit/s.
    KbitsPerSec interface{}

    // Packets Per Second, PktsPerSec and KbitsPerSec cannot be configured
    // together. The type is interface{} with range: 1..160000. Units are
    // packet/s.
    PktsPerSec interface{}
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetFilter() yfilter.YFilter { return stormControlUnit.YFilter }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) SetFilter(yf yfilter.YFilter) { stormControlUnit.YFilter = yf }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetGoName(yname string) string {
    if yname == "kbits-per-sec" { return "KbitsPerSec" }
    if yname == "pkts-per-sec" { return "PktsPerSec" }
    return ""
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetSegmentPath() string {
    return "storm-control-unit"
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["kbits-per-sec"] = stormControlUnit.KbitsPerSec
    leafs["pkts-per-sec"] = stormControlUnit.PktsPerSec
    return leafs
}

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetBundleName() string { return "cisco_ios_xr" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetYangName() string { return "storm-control-unit" }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) SetParent(parent types.Entity) { stormControlUnit.parent = parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetParent() types.Entity { return stormControlUnit.parent }

func (stormControlUnit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_BdacStormControlTypes_BdacStormControlType_StormControlUnit) GetParentYangName() string { return "bdac-storm-control-type" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon
// Split Horizon
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Split Horizon Group ID.
    SplitHorizonGroupId L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetFilter() yfilter.YFilter { return splitHorizon.YFilter }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) SetFilter(yf yfilter.YFilter) { splitHorizon.YFilter = yf }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetGoName(yname string) string {
    if yname == "split-horizon-group-id" { return "SplitHorizonGroupId" }
    return ""
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetSegmentPath() string {
    return "split-horizon"
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "split-horizon-group-id" {
        return &splitHorizon.SplitHorizonGroupId
    }
    return nil
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["split-horizon-group-id"] = &splitHorizon.SplitHorizonGroupId
    return children
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetBundleName() string { return "cisco_ios_xr" }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetYangName() string { return "split-horizon" }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) SetParent(parent types.Entity) { splitHorizon.parent = parent }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetParent() types.Entity { return splitHorizon.parent }

func (splitHorizon *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId
// Split Horizon Group ID
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable split horizon group. The type is interface{}.
    Enable interface{}
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetFilter() yfilter.YFilter { return splitHorizonGroupId.YFilter }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) SetFilter(yf yfilter.YFilter) { splitHorizonGroupId.YFilter = yf }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetSegmentPath() string {
    return "split-horizon-group-id"
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = splitHorizonGroupId.Enable
    return leafs
}

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetBundleName() string { return "cisco_ios_xr" }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetYangName() string { return "split-horizon-group-id" }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) SetParent(parent types.Entity) { splitHorizonGroupId.parent = parent }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetParent() types.Entity { return splitHorizonGroupId.parent }

func (splitHorizonGroupId *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_SplitHorizon_SplitHorizonGroupId) GetParentYangName() string { return "split-horizon" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses
// Static Mac Address Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Static Mac Address Configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress.
    StaticMacAddress []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetFilter() yfilter.YFilter { return staticMacAddresses.YFilter }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) SetFilter(yf yfilter.YFilter) { staticMacAddresses.YFilter = yf }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetGoName(yname string) string {
    if yname == "static-mac-address" { return "StaticMacAddress" }
    return ""
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetSegmentPath() string {
    return "static-mac-addresses"
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "static-mac-address" {
        for _, c := range staticMacAddresses.StaticMacAddress {
            if staticMacAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress{}
        staticMacAddresses.StaticMacAddress = append(staticMacAddresses.StaticMacAddress, child)
        return &staticMacAddresses.StaticMacAddress[len(staticMacAddresses.StaticMacAddress)-1]
    }
    return nil
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range staticMacAddresses.StaticMacAddress {
        children[staticMacAddresses.StaticMacAddress[i].GetSegmentPath()] = &staticMacAddresses.StaticMacAddress[i]
    }
    return children
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetYangName() string { return "static-mac-addresses" }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) SetParent(parent types.Entity) { staticMacAddresses.parent = parent }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetParent() types.Entity { return staticMacAddresses.parent }

func (staticMacAddresses *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress
// Static Mac Address Configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Static MAC address. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetFilter() yfilter.YFilter { return staticMacAddress.YFilter }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) SetFilter(yf yfilter.YFilter) { staticMacAddress.YFilter = yf }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetSegmentPath() string {
    return "static-mac-address" + "[address='" + fmt.Sprintf("%v", staticMacAddress.Address) + "']"
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = staticMacAddress.Address
    return leafs
}

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetYangName() string { return "static-mac-address" }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) SetParent(parent types.Entity) { staticMacAddress.parent = parent }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetParent() types.Entity { return staticMacAddress.parent }

func (staticMacAddress *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_StaticMacAddresses_StaticMacAddress) GetParentYangName() string { return "static-mac-addresses" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac
// MAC configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable MAC Flush When Port goes down. The type is PortDownFlush.
    InterfaceMacPortDownFlush interface{}

    // Enable Mac Learning. The type is MacLearn.
    InterfaceMacLearning interface{}

    // MAC-Aging configuration commands.
    InterfaceMacAging L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging

    // MAC Secure.
    InterfaceMacSecure L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure

    // MAC-Limit configuration commands.
    InterfaceMacLimit L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetFilter() yfilter.YFilter { return interfaceMac.YFilter }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) SetFilter(yf yfilter.YFilter) { interfaceMac.YFilter = yf }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetGoName(yname string) string {
    if yname == "interface-mac-port-down-flush" { return "InterfaceMacPortDownFlush" }
    if yname == "interface-mac-learning" { return "InterfaceMacLearning" }
    if yname == "interface-mac-aging" { return "InterfaceMacAging" }
    if yname == "interface-mac-secure" { return "InterfaceMacSecure" }
    if yname == "interface-mac-limit" { return "InterfaceMacLimit" }
    return ""
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetSegmentPath() string {
    return "interface-mac"
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-mac-aging" {
        return &interfaceMac.InterfaceMacAging
    }
    if childYangName == "interface-mac-secure" {
        return &interfaceMac.InterfaceMacSecure
    }
    if childYangName == "interface-mac-limit" {
        return &interfaceMac.InterfaceMacLimit
    }
    return nil
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-mac-aging"] = &interfaceMac.InterfaceMacAging
    children["interface-mac-secure"] = &interfaceMac.InterfaceMacSecure
    children["interface-mac-limit"] = &interfaceMac.InterfaceMacLimit
    return children
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-mac-port-down-flush"] = interfaceMac.InterfaceMacPortDownFlush
    leafs["interface-mac-learning"] = interfaceMac.InterfaceMacLearning
    return leafs
}

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetYangName() string { return "interface-mac" }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) SetParent(parent types.Entity) { interfaceMac.parent = parent }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetParent() types.Entity { return interfaceMac.parent }

func (interfaceMac *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac) GetParentYangName() string { return "bd-attachment-circuit" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging
// MAC-Aging configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Mac Aging Time. The type is interface{} with range: 300..30000.
    InterfaceMacAgingTime interface{}

    // MAC address aging type. The type is MacAging.
    InterfaceMacAgingType interface{}
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetFilter() yfilter.YFilter { return interfaceMacAging.YFilter }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) SetFilter(yf yfilter.YFilter) { interfaceMacAging.YFilter = yf }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetGoName(yname string) string {
    if yname == "interface-mac-aging-time" { return "InterfaceMacAgingTime" }
    if yname == "interface-mac-aging-type" { return "InterfaceMacAgingType" }
    return ""
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetSegmentPath() string {
    return "interface-mac-aging"
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-mac-aging-time"] = interfaceMacAging.InterfaceMacAgingTime
    leafs["interface-mac-aging-type"] = interfaceMacAging.InterfaceMacAgingType
    return leafs
}

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetYangName() string { return "interface-mac-aging" }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) SetParent(parent types.Entity) { interfaceMacAging.parent = parent }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetParent() types.Entity { return interfaceMacAging.parent }

func (interfaceMacAging *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacAging) GetParentYangName() string { return "interface-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure
// MAC Secure
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC Secure Logging. The type is L2vpnLogging.
    Logging interface{}

    // Disable L2 Interface MAC Secure. The type is interface{}.
    Disable interface{}

    // MAC secure enforcement action. The type is MacSecureAction.
    Action interface{}

    // Enable MAC Secure. The type is interface{}.
    Enable interface{}
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetFilter() yfilter.YFilter { return interfaceMacSecure.YFilter }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) SetFilter(yf yfilter.YFilter) { interfaceMacSecure.YFilter = yf }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "disable" { return "Disable" }
    if yname == "action" { return "Action" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetSegmentPath() string {
    return "interface-mac-secure"
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = interfaceMacSecure.Logging
    leafs["disable"] = interfaceMacSecure.Disable
    leafs["action"] = interfaceMacSecure.Action
    leafs["enable"] = interfaceMacSecure.Enable
    return leafs
}

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetYangName() string { return "interface-mac-secure" }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) SetParent(parent types.Entity) { interfaceMacSecure.parent = parent }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetParent() types.Entity { return interfaceMacSecure.parent }

func (interfaceMacSecure *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacSecure) GetParentYangName() string { return "interface-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit
// MAC-Limit configuration commands
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of MAC addresses on an Interface after which MAC limit action is
    // taken. The type is interface{} with range: 0..4294967295.
    InterfaceMacLimitMax interface{}

    // MAC address limit notification action in a Interface. The type is
    // MacNotification.
    InterfaceMacLimitNotif interface{}

    // Interface MAC address limit enforcement action. The type is MacLimitAction.
    InterfaceMacLimitAction interface{}
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetFilter() yfilter.YFilter { return interfaceMacLimit.YFilter }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) SetFilter(yf yfilter.YFilter) { interfaceMacLimit.YFilter = yf }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetGoName(yname string) string {
    if yname == "interface-mac-limit-max" { return "InterfaceMacLimitMax" }
    if yname == "interface-mac-limit-notif" { return "InterfaceMacLimitNotif" }
    if yname == "interface-mac-limit-action" { return "InterfaceMacLimitAction" }
    return ""
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetSegmentPath() string {
    return "interface-mac-limit"
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-mac-limit-max"] = interfaceMacLimit.InterfaceMacLimitMax
    leafs["interface-mac-limit-notif"] = interfaceMacLimit.InterfaceMacLimitNotif
    leafs["interface-mac-limit-action"] = interfaceMacLimit.InterfaceMacLimitAction
    return leafs
}

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetYangName() string { return "interface-mac-limit" }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) SetParent(parent types.Entity) { interfaceMacLimit.parent = parent }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetParent() types.Entity { return interfaceMacLimit.parent }

func (interfaceMacLimit *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdAttachmentCircuits_BdAttachmentCircuit_InterfaceMac_InterfaceMacLimit) GetParentYangName() string { return "interface-mac" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns
// List of EVPN pseudowires
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN Pseudowire configuration. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn.
    BdPseudowireEvpn []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetFilter() yfilter.YFilter { return bdPseudowireEvpns.YFilter }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) SetFilter(yf yfilter.YFilter) { bdPseudowireEvpns.YFilter = yf }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetGoName(yname string) string {
    if yname == "bd-pseudowire-evpn" { return "BdPseudowireEvpn" }
    return ""
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetSegmentPath() string {
    return "bd-pseudowire-evpns"
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bd-pseudowire-evpn" {
        for _, c := range bdPseudowireEvpns.BdPseudowireEvpn {
            if bdPseudowireEvpns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn{}
        bdPseudowireEvpns.BdPseudowireEvpn = append(bdPseudowireEvpns.BdPseudowireEvpn, child)
        return &bdPseudowireEvpns.BdPseudowireEvpn[len(bdPseudowireEvpns.BdPseudowireEvpn)-1]
    }
    return nil
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bdPseudowireEvpns.BdPseudowireEvpn {
        children[bdPseudowireEvpns.BdPseudowireEvpn[i].GetSegmentPath()] = &bdPseudowireEvpns.BdPseudowireEvpn[i]
    }
    return children
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetBundleName() string { return "cisco_ios_xr" }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetYangName() string { return "bd-pseudowire-evpns" }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) SetParent(parent types.Entity) { bdPseudowireEvpns.parent = parent }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetParent() types.Entity { return bdPseudowireEvpns.parent }

func (bdPseudowireEvpns *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn
// EVPN Pseudowire configuration
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..65534.
    Eviid interface{}

    // This attribute is a key. AC ID. The type is interface{} with range:
    // 1..4294967295.
    Acid interface{}
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetFilter() yfilter.YFilter { return bdPseudowireEvpn.YFilter }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) SetFilter(yf yfilter.YFilter) { bdPseudowireEvpn.YFilter = yf }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "acid" { return "Acid" }
    return ""
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetSegmentPath() string {
    return "bd-pseudowire-evpn" + "[eviid='" + fmt.Sprintf("%v", bdPseudowireEvpn.Eviid) + "']" + "[acid='" + fmt.Sprintf("%v", bdPseudowireEvpn.Acid) + "']"
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = bdPseudowireEvpn.Eviid
    leafs["acid"] = bdPseudowireEvpn.Acid
    return leafs
}

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetYangName() string { return "bd-pseudowire-evpn" }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) SetParent(parent types.Entity) { bdPseudowireEvpn.parent = parent }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetParent() types.Entity { return bdPseudowireEvpn.parent }

func (bdPseudowireEvpn *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_BdPseudowireEvpns_BdPseudowireEvpn) GetParentYangName() string { return "bd-pseudowire-evpns" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard
// IP Source Guard
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Logging. The type is interface{}.
    Logging interface{}

    // Enable IP Source Guard. The type is interface{}.
    Enable interface{}
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetFilter() yfilter.YFilter { return ipSourceGuard.YFilter }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) SetFilter(yf yfilter.YFilter) { ipSourceGuard.YFilter = yf }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetSegmentPath() string {
    return "ip-source-guard"
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = ipSourceGuard.Logging
    leafs["enable"] = ipSourceGuard.Enable
    return leafs
}

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetBundleName() string { return "cisco_ios_xr" }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetYangName() string { return "ip-source-guard" }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) SetParent(parent types.Entity) { ipSourceGuard.parent = parent }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetParent() types.Entity { return ipSourceGuard.parent }

func (ipSourceGuard *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_IpSourceGuard) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai
// Dynamic ARP Inspection
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Logging. The type is interface{}.
    Logging interface{}

    // Enable Dynamic ARP Inspection. The type is interface{}.
    Enable interface{}

    // Address Validation.
    DaiAddressValidation L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetFilter() yfilter.YFilter { return dai.YFilter }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) SetFilter(yf yfilter.YFilter) { dai.YFilter = yf }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    if yname == "enable" { return "Enable" }
    if yname == "dai-address-validation" { return "DaiAddressValidation" }
    return ""
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetSegmentPath() string {
    return "dai"
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dai-address-validation" {
        return &dai.DaiAddressValidation
    }
    return nil
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dai-address-validation"] = &dai.DaiAddressValidation
    return children
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["logging"] = dai.Logging
    leafs["enable"] = dai.Enable
    return leafs
}

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetBundleName() string { return "cisco_ios_xr" }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetYangName() string { return "dai" }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) SetParent(parent types.Entity) { dai.parent = parent }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetParent() types.Entity { return dai.parent }

func (dai *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation
// Address Validation
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable IPv4 Verification. The type is interface{}.
    Ipv4Verification interface{}

    // Enable Destination MAC Verification. The type is interface{}.
    DestinationMacVerification interface{}

    // Enable Source MAC Verification. The type is interface{}.
    SourceMacVerification interface{}

    // Enable Address Validation. The type is interface{}.
    Enable interface{}
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetFilter() yfilter.YFilter { return daiAddressValidation.YFilter }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) SetFilter(yf yfilter.YFilter) { daiAddressValidation.YFilter = yf }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetGoName(yname string) string {
    if yname == "ipv4-verification" { return "Ipv4Verification" }
    if yname == "destination-mac-verification" { return "DestinationMacVerification" }
    if yname == "source-mac-verification" { return "SourceMacVerification" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetSegmentPath() string {
    return "dai-address-validation"
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ipv4-verification"] = daiAddressValidation.Ipv4Verification
    leafs["destination-mac-verification"] = daiAddressValidation.DestinationMacVerification
    leafs["source-mac-verification"] = daiAddressValidation.SourceMacVerification
    leafs["enable"] = daiAddressValidation.Enable
    return leafs
}

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetBundleName() string { return "cisco_ios_xr" }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetYangName() string { return "dai-address-validation" }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) SetParent(parent types.Entity) { daiAddressValidation.parent = parent }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetParent() types.Entity { return daiAddressValidation.parent }

func (daiAddressValidation *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_Dai_DaiAddressValidation) GetParentYangName() string { return "dai" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces
// Bridge Domain Routed Interface Table
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge Domain Routed Interface. The type is slice of
    // L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface.
    RoutedInterface []L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetFilter() yfilter.YFilter { return routedInterfaces.YFilter }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) SetFilter(yf yfilter.YFilter) { routedInterfaces.YFilter = yf }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetGoName(yname string) string {
    if yname == "routed-interface" { return "RoutedInterface" }
    return ""
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetSegmentPath() string {
    return "routed-interfaces"
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "routed-interface" {
        for _, c := range routedInterfaces.RoutedInterface {
            if routedInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface{}
        routedInterfaces.RoutedInterface = append(routedInterfaces.RoutedInterface, child)
        return &routedInterfaces.RoutedInterface[len(routedInterfaces.RoutedInterface)-1]
    }
    return nil
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range routedInterfaces.RoutedInterface {
        children[routedInterfaces.RoutedInterface[i].GetSegmentPath()] = &routedInterfaces.RoutedInterface[i]
    }
    return children
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetYangName() string { return "routed-interfaces" }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) SetParent(parent types.Entity) { routedInterfaces.parent = parent }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetParent() types.Entity { return routedInterfaces.parent }

func (routedInterfaces *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces) GetParentYangName() string { return "bridge-domain" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface
// Bridge Domain Routed Interface
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The name of the Routed Interface. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Routed interface split horizon group.
    RoutedInterfaceSplitHorizonGroup L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetFilter() yfilter.YFilter { return routedInterface.YFilter }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) SetFilter(yf yfilter.YFilter) { routedInterface.YFilter = yf }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "routed-interface-split-horizon-group" { return "RoutedInterfaceSplitHorizonGroup" }
    return ""
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetSegmentPath() string {
    return "routed-interface" + "[interface-name='" + fmt.Sprintf("%v", routedInterface.InterfaceName) + "']"
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "routed-interface-split-horizon-group" {
        return &routedInterface.RoutedInterfaceSplitHorizonGroup
    }
    return nil
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["routed-interface-split-horizon-group"] = &routedInterface.RoutedInterfaceSplitHorizonGroup
    return children
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routedInterface.InterfaceName
    return leafs
}

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetBundleName() string { return "cisco_ios_xr" }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetYangName() string { return "routed-interface" }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) SetParent(parent types.Entity) { routedInterface.parent = parent }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetParent() types.Entity { return routedInterface.parent }

func (routedInterface *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface) GetParentYangName() string { return "routed-interfaces" }

// L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup
// Routed interface split horizon group
type L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure BVI under SHG 1. The type is interface{}.
    RoutedInterfaceSplitHorizonGroupCore interface{}
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetFilter() yfilter.YFilter { return routedInterfaceSplitHorizonGroup.YFilter }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) SetFilter(yf yfilter.YFilter) { routedInterfaceSplitHorizonGroup.YFilter = yf }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetGoName(yname string) string {
    if yname == "routed-interface-split-horizon-group-core" { return "RoutedInterfaceSplitHorizonGroupCore" }
    return ""
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetSegmentPath() string {
    return "routed-interface-split-horizon-group"
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["routed-interface-split-horizon-group-core"] = routedInterfaceSplitHorizonGroup.RoutedInterfaceSplitHorizonGroupCore
    return leafs
}

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetBundleName() string { return "cisco_ios_xr" }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetYangName() string { return "routed-interface-split-horizon-group" }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) SetParent(parent types.Entity) { routedInterfaceSplitHorizonGroup.parent = parent }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetParent() types.Entity { return routedInterfaceSplitHorizonGroup.parent }

func (routedInterfaceSplitHorizonGroup *L2Vpn_Database_BridgeDomainGroups_BridgeDomainGroup_BridgeDomains_BridgeDomain_RoutedInterfaces_RoutedInterface_RoutedInterfaceSplitHorizonGroup) GetParentYangName() string { return "routed-interface" }

// L2Vpn_Database_PseudowireClasses
// List of pseudowire classes
type L2Vpn_Database_PseudowireClasses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire class. The type is slice of
    // L2Vpn_Database_PseudowireClasses_PseudowireClass.
    PseudowireClass []L2Vpn_Database_PseudowireClasses_PseudowireClass
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetFilter() yfilter.YFilter { return pseudowireClasses.YFilter }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) SetFilter(yf yfilter.YFilter) { pseudowireClasses.YFilter = yf }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetGoName(yname string) string {
    if yname == "pseudowire-class" { return "PseudowireClass" }
    return ""
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetSegmentPath() string {
    return "pseudowire-classes"
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pseudowire-class" {
        for _, c := range pseudowireClasses.PseudowireClass {
            if pseudowireClasses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_PseudowireClasses_PseudowireClass{}
        pseudowireClasses.PseudowireClass = append(pseudowireClasses.PseudowireClass, child)
        return &pseudowireClasses.PseudowireClass[len(pseudowireClasses.PseudowireClass)-1]
    }
    return nil
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pseudowireClasses.PseudowireClass {
        children[pseudowireClasses.PseudowireClass[i].GetSegmentPath()] = &pseudowireClasses.PseudowireClass[i]
    }
    return children
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetYangName() string { return "pseudowire-classes" }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) SetParent(parent types.Entity) { pseudowireClasses.parent = parent }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetParent() types.Entity { return pseudowireClasses.parent }

func (pseudowireClasses *L2Vpn_Database_PseudowireClasses) GetParentYangName() string { return "database" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass
// Pseudowire class
type L2Vpn_Database_PseudowireClasses_PseudowireClass struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the pseudowire class. The type is string
    // with length: 1..32.
    Name interface{}

    // Enable backup MAC withdraw. The type is interface{}.
    MacWithdraw interface{}

    // Enable pseudowire class. The type is interface{}.
    Enable interface{}

    // L2TPv3 encapsulation.
    L2Tpv3Encapsulation L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation

    // Back Up Pseudowire class.
    BackupDisableDelay L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay

    // MPLS encapsulation.
    MplsEncapsulation L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetFilter() yfilter.YFilter { return pseudowireClass.YFilter }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) SetFilter(yf yfilter.YFilter) { pseudowireClass.YFilter = yf }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "mac-withdraw" { return "MacWithdraw" }
    if yname == "enable" { return "Enable" }
    if yname == "l2tpv3-encapsulation" { return "L2Tpv3Encapsulation" }
    if yname == "backup-disable-delay" { return "BackupDisableDelay" }
    if yname == "mpls-encapsulation" { return "MplsEncapsulation" }
    return ""
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetSegmentPath() string {
    return "pseudowire-class" + "[name='" + fmt.Sprintf("%v", pseudowireClass.Name) + "']"
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "l2tpv3-encapsulation" {
        return &pseudowireClass.L2Tpv3Encapsulation
    }
    if childYangName == "backup-disable-delay" {
        return &pseudowireClass.BackupDisableDelay
    }
    if childYangName == "mpls-encapsulation" {
        return &pseudowireClass.MplsEncapsulation
    }
    return nil
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["l2tpv3-encapsulation"] = &pseudowireClass.L2Tpv3Encapsulation
    children["backup-disable-delay"] = &pseudowireClass.BackupDisableDelay
    children["mpls-encapsulation"] = &pseudowireClass.MplsEncapsulation
    return children
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = pseudowireClass.Name
    leafs["mac-withdraw"] = pseudowireClass.MacWithdraw
    leafs["enable"] = pseudowireClass.Enable
    return leafs
}

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetYangName() string { return "pseudowire-class" }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) SetParent(parent types.Entity) { pseudowireClass.parent = parent }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetParent() types.Entity { return pseudowireClass.parent }

func (pseudowireClass *L2Vpn_Database_PseudowireClasses_PseudowireClass) GetParentYangName() string { return "pseudowire-classes" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation
// L2TPv3 encapsulation
type L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the do not fragment bit to 1. The type is interface{}.
    DfBitSet interface{}

    // Cookie size. The type is L2tpCookieSize. The default value is zero.
    CookieSize interface{}

    // Source IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Transport mode. The type is TransportMode.
    TransportMode interface{}

    // Enable L2TPv3 encapsulation. The type is interface{}.
    Enable interface{}

    // Time to live. The type is interface{} with range: 1..255.
    TimeToLive interface{}

    // Sequencing.
    Sequencing L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing

    // Type of service.
    TypeOfService L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService

    // L2TPv3 signaling protocol.
    SignalingProtocol L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol

    // Path maximum transmission unit.
    PathMtu L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetFilter() yfilter.YFilter { return l2Tpv3Encapsulation.YFilter }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) SetFilter(yf yfilter.YFilter) { l2Tpv3Encapsulation.YFilter = yf }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetGoName(yname string) string {
    if yname == "df-bit-set" { return "DfBitSet" }
    if yname == "cookie-size" { return "CookieSize" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "transport-mode" { return "TransportMode" }
    if yname == "enable" { return "Enable" }
    if yname == "time-to-live" { return "TimeToLive" }
    if yname == "sequencing" { return "Sequencing" }
    if yname == "type-of-service" { return "TypeOfService" }
    if yname == "signaling-protocol" { return "SignalingProtocol" }
    if yname == "path-mtu" { return "PathMtu" }
    return ""
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetSegmentPath() string {
    return "l2tpv3-encapsulation"
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequencing" {
        return &l2Tpv3Encapsulation.Sequencing
    }
    if childYangName == "type-of-service" {
        return &l2Tpv3Encapsulation.TypeOfService
    }
    if childYangName == "signaling-protocol" {
        return &l2Tpv3Encapsulation.SignalingProtocol
    }
    if childYangName == "path-mtu" {
        return &l2Tpv3Encapsulation.PathMtu
    }
    return nil
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sequencing"] = &l2Tpv3Encapsulation.Sequencing
    children["type-of-service"] = &l2Tpv3Encapsulation.TypeOfService
    children["signaling-protocol"] = &l2Tpv3Encapsulation.SignalingProtocol
    children["path-mtu"] = &l2Tpv3Encapsulation.PathMtu
    return children
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["df-bit-set"] = l2Tpv3Encapsulation.DfBitSet
    leafs["cookie-size"] = l2Tpv3Encapsulation.CookieSize
    leafs["source-address"] = l2Tpv3Encapsulation.SourceAddress
    leafs["transport-mode"] = l2Tpv3Encapsulation.TransportMode
    leafs["enable"] = l2Tpv3Encapsulation.Enable
    leafs["time-to-live"] = l2Tpv3Encapsulation.TimeToLive
    return leafs
}

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetYangName() string { return "l2tpv3-encapsulation" }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) SetParent(parent types.Entity) { l2Tpv3Encapsulation.parent = parent }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetParent() types.Entity { return l2Tpv3Encapsulation.parent }

func (l2Tpv3Encapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation) GetParentYangName() string { return "pseudowire-class" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing
// Sequencing
type L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequencing. The type is L2tpv3Sequencing. The default value is off.
    Sequencing interface{}

    // Out of sequence threshold. The type is interface{} with range: 5..65535.
    // The default value is 5.
    ResyncThreshold interface{}
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetFilter() yfilter.YFilter { return sequencing.YFilter }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) SetFilter(yf yfilter.YFilter) { sequencing.YFilter = yf }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetGoName(yname string) string {
    if yname == "sequencing" { return "Sequencing" }
    if yname == "resync-threshold" { return "ResyncThreshold" }
    return ""
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetSegmentPath() string {
    return "sequencing"
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequencing"] = sequencing.Sequencing
    leafs["resync-threshold"] = sequencing.ResyncThreshold
    return leafs
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetBundleName() string { return "cisco_ios_xr" }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetYangName() string { return "sequencing" }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) SetParent(parent types.Entity) { sequencing.parent = parent }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetParent() types.Entity { return sequencing.parent }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_Sequencing) GetParentYangName() string { return "l2tpv3-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService
// Type of service
type L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of service value. The type is interface{} with range: 0..255.
    TypeOfServiceValue interface{}

    // Type of service mode. The type is TypeOfServiceMode.
    TypeOfServiceMode interface{}
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetFilter() yfilter.YFilter { return typeOfService.YFilter }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) SetFilter(yf yfilter.YFilter) { typeOfService.YFilter = yf }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetGoName(yname string) string {
    if yname == "type-of-service-value" { return "TypeOfServiceValue" }
    if yname == "type-of-service-mode" { return "TypeOfServiceMode" }
    return ""
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetSegmentPath() string {
    return "type-of-service"
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type-of-service-value"] = typeOfService.TypeOfServiceValue
    leafs["type-of-service-mode"] = typeOfService.TypeOfServiceMode
    return leafs
}

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetBundleName() string { return "cisco_ios_xr" }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetYangName() string { return "type-of-service" }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) SetParent(parent types.Entity) { typeOfService.parent = parent }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetParent() types.Entity { return typeOfService.parent }

func (typeOfService *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_TypeOfService) GetParentYangName() string { return "l2tpv3-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol
// L2TPv3 signaling protocol
type L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2TPv3 signaling protocol. The type is L2tpSignalingProtocol. The default
    // value is l2tpv3.
    Protocol interface{}

    // Name of the L2TPv3 class name. The type is string with length: 1..32.
    L2Tpv3ClassName interface{}
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetFilter() yfilter.YFilter { return signalingProtocol.YFilter }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) SetFilter(yf yfilter.YFilter) { signalingProtocol.YFilter = yf }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "l2tpv3-class-name" { return "L2Tpv3ClassName" }
    return ""
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetSegmentPath() string {
    return "signaling-protocol"
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol"] = signalingProtocol.Protocol
    leafs["l2tpv3-class-name"] = signalingProtocol.L2Tpv3ClassName
    return leafs
}

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetBundleName() string { return "cisco_ios_xr" }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetYangName() string { return "signaling-protocol" }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) SetParent(parent types.Entity) { signalingProtocol.parent = parent }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetParent() types.Entity { return signalingProtocol.parent }

func (signalingProtocol *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_SignalingProtocol) GetParentYangName() string { return "l2tpv3-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu
// Path maximum transmission unit
type L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path MTU. The type is interface{}.
    Enable interface{}

    // Maximum path maximum transmission unit. The type is interface{} with range:
    // 68..65535.
    MaxPathMtu interface{}
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetFilter() yfilter.YFilter { return pathMtu.YFilter }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) SetFilter(yf yfilter.YFilter) { pathMtu.YFilter = yf }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "max-path-mtu" { return "MaxPathMtu" }
    return ""
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetSegmentPath() string {
    return "path-mtu"
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathMtu.Enable
    leafs["max-path-mtu"] = pathMtu.MaxPathMtu
    return leafs
}

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetBundleName() string { return "cisco_ios_xr" }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetYangName() string { return "path-mtu" }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) SetParent(parent types.Entity) { pathMtu.parent = parent }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetParent() types.Entity { return pathMtu.parent }

func (pathMtu *L2Vpn_Database_PseudowireClasses_PseudowireClass_L2Tpv3Encapsulation_PathMtu) GetParentYangName() string { return "l2tpv3-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay
// Back Up Pseudowire class
type L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay or Never. The type is BackupDisable.
    Type interface{}

    // Disable backup delay. The type is interface{} with range: 0..180.
    DisableBackup interface{}
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetFilter() yfilter.YFilter { return backupDisableDelay.YFilter }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) SetFilter(yf yfilter.YFilter) { backupDisableDelay.YFilter = yf }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "disable-backup" { return "DisableBackup" }
    return ""
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetSegmentPath() string {
    return "backup-disable-delay"
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = backupDisableDelay.Type
    leafs["disable-backup"] = backupDisableDelay.DisableBackup
    return leafs
}

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetBundleName() string { return "cisco_ios_xr" }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetYangName() string { return "backup-disable-delay" }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) SetParent(parent types.Entity) { backupDisableDelay.parent = parent }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetParent() types.Entity { return backupDisableDelay.parent }

func (backupDisableDelay *L2Vpn_Database_PseudowireClasses_PseudowireClass_BackupDisableDelay) GetParentYangName() string { return "pseudowire-class" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation
// MPLS encapsulation
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire Switching Point Tlv. The type is PwSwitchingPointTlv.
    PwSwitchingTlv interface{}

    // Static Tag rewrite. The type is interface{} with range: 1..4094.
    StaticTagRewrite interface{}

    // MPLS signaling protocol. The type is MplsSignalingProtocol. The default
    // value is ldp.
    SignalingProtocol interface{}

    // VCCV verification type. The type is VccvVerification. The default value is
    // lsp-ping.
    VccvType interface{}

    // Source IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Transport mode. The type is TransportMode.
    TransportMode interface{}

    // Enable MPLS encapsulation. The type is interface{}.
    Enable interface{}

    // Enable control word. The type is ControlWord.
    ControlWord interface{}

    // Sequencing.
    Sequencing L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing

    // Redundancy options for MPLS encapsulation.
    MplsRedundancy L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy

    // Preferred path.
    PreferredPath L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath

    // Load Balancing.
    LoadBalanceGroup L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetFilter() yfilter.YFilter { return mplsEncapsulation.YFilter }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) SetFilter(yf yfilter.YFilter) { mplsEncapsulation.YFilter = yf }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetGoName(yname string) string {
    if yname == "pw-switching-tlv" { return "PwSwitchingTlv" }
    if yname == "static-tag-rewrite" { return "StaticTagRewrite" }
    if yname == "signaling-protocol" { return "SignalingProtocol" }
    if yname == "vccv-type" { return "VccvType" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "transport-mode" { return "TransportMode" }
    if yname == "enable" { return "Enable" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "sequencing" { return "Sequencing" }
    if yname == "mpls-redundancy" { return "MplsRedundancy" }
    if yname == "preferred-path" { return "PreferredPath" }
    if yname == "load-balance-group" { return "LoadBalanceGroup" }
    return ""
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetSegmentPath() string {
    return "mpls-encapsulation"
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sequencing" {
        return &mplsEncapsulation.Sequencing
    }
    if childYangName == "mpls-redundancy" {
        return &mplsEncapsulation.MplsRedundancy
    }
    if childYangName == "preferred-path" {
        return &mplsEncapsulation.PreferredPath
    }
    if childYangName == "load-balance-group" {
        return &mplsEncapsulation.LoadBalanceGroup
    }
    return nil
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sequencing"] = &mplsEncapsulation.Sequencing
    children["mpls-redundancy"] = &mplsEncapsulation.MplsRedundancy
    children["preferred-path"] = &mplsEncapsulation.PreferredPath
    children["load-balance-group"] = &mplsEncapsulation.LoadBalanceGroup
    return children
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pw-switching-tlv"] = mplsEncapsulation.PwSwitchingTlv
    leafs["static-tag-rewrite"] = mplsEncapsulation.StaticTagRewrite
    leafs["signaling-protocol"] = mplsEncapsulation.SignalingProtocol
    leafs["vccv-type"] = mplsEncapsulation.VccvType
    leafs["source-address"] = mplsEncapsulation.SourceAddress
    leafs["transport-mode"] = mplsEncapsulation.TransportMode
    leafs["enable"] = mplsEncapsulation.Enable
    leafs["control-word"] = mplsEncapsulation.ControlWord
    return leafs
}

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetYangName() string { return "mpls-encapsulation" }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) SetParent(parent types.Entity) { mplsEncapsulation.parent = parent }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetParent() types.Entity { return mplsEncapsulation.parent }

func (mplsEncapsulation *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation) GetParentYangName() string { return "pseudowire-class" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing
// Sequencing
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequencing. The type is MplsSequencing. The default value is off.
    Sequencing interface{}

    // Out of sequence threshold. The type is interface{} with range: 5..65535.
    // The default value is 5.
    ResyncThreshold interface{}
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetFilter() yfilter.YFilter { return sequencing.YFilter }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) SetFilter(yf yfilter.YFilter) { sequencing.YFilter = yf }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetGoName(yname string) string {
    if yname == "sequencing" { return "Sequencing" }
    if yname == "resync-threshold" { return "ResyncThreshold" }
    return ""
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetSegmentPath() string {
    return "sequencing"
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequencing"] = sequencing.Sequencing
    leafs["resync-threshold"] = sequencing.ResyncThreshold
    return leafs
}

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetBundleName() string { return "cisco_ios_xr" }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetYangName() string { return "sequencing" }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) SetParent(parent types.Entity) { sequencing.parent = parent }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetParent() types.Entity { return sequencing.parent }

func (sequencing *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_Sequencing) GetParentYangName() string { return "mpls-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy
// Redundancy options for MPLS encapsulation
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Force one-way PW redundancy behavior in Redundancy Group. The type is
    // interface{}.
    RedundancyOneWay interface{}

    // Initial delay before activating the redundant PW, in seconds. The type is
    // interface{} with range: 0..120. Units are second.
    RedundancyInitialDelay interface{}
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetFilter() yfilter.YFilter { return mplsRedundancy.YFilter }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) SetFilter(yf yfilter.YFilter) { mplsRedundancy.YFilter = yf }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetGoName(yname string) string {
    if yname == "redundancy-one-way" { return "RedundancyOneWay" }
    if yname == "redundancy-initial-delay" { return "RedundancyInitialDelay" }
    return ""
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetSegmentPath() string {
    return "mpls-redundancy"
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["redundancy-one-way"] = mplsRedundancy.RedundancyOneWay
    leafs["redundancy-initial-delay"] = mplsRedundancy.RedundancyInitialDelay
    return leafs
}

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetBundleName() string { return "cisco_ios_xr" }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetYangName() string { return "mpls-redundancy" }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) SetParent(parent types.Entity) { mplsRedundancy.parent = parent }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetParent() types.Entity { return mplsRedundancy.parent }

func (mplsRedundancy *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_MplsRedundancy) GetParentYangName() string { return "mpls-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath
// Preferred path
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Preferred Path Type. The type is PreferredPath.
    Type interface{}

    // Interface Tunnel number for preferred path. The type is interface{} with
    // range: 0..65535.
    InterfaceTunnelNumber interface{}

    // Fallback disable. The type is interface{}.
    FallbackDisable interface{}

    // Name of the SR TE Policy. The type is string with length: 1..60.
    SrtePolicy interface{}
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetFilter() yfilter.YFilter { return preferredPath.YFilter }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) SetFilter(yf yfilter.YFilter) { preferredPath.YFilter = yf }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "interface-tunnel-number" { return "InterfaceTunnelNumber" }
    if yname == "fallback-disable" { return "FallbackDisable" }
    if yname == "srte-policy" { return "SrtePolicy" }
    return ""
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetSegmentPath() string {
    return "preferred-path"
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = preferredPath.Type
    leafs["interface-tunnel-number"] = preferredPath.InterfaceTunnelNumber
    leafs["fallback-disable"] = preferredPath.FallbackDisable
    leafs["srte-policy"] = preferredPath.SrtePolicy
    return leafs
}

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetBundleName() string { return "cisco_ios_xr" }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetYangName() string { return "preferred-path" }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) SetParent(parent types.Entity) { preferredPath.parent = parent }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetParent() types.Entity { return preferredPath.parent }

func (preferredPath *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_PreferredPath) GetParentYangName() string { return "mpls-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup
// Load Balancing
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Legacy Flow Label TLV code. The type is FlowLabelTlvCode.
    FlowLabelLoadBalanceCode interface{}

    // Enable PW Label based Load Balancing. The type is LoadBalance.
    PwLabelLoadBalance interface{}

    // Enable Flow Label based load balancing.
    FlowLabelLoadBalance L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetFilter() yfilter.YFilter { return loadBalanceGroup.YFilter }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) SetFilter(yf yfilter.YFilter) { loadBalanceGroup.YFilter = yf }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetGoName(yname string) string {
    if yname == "flow-label-load-balance-code" { return "FlowLabelLoadBalanceCode" }
    if yname == "pw-label-load-balance" { return "PwLabelLoadBalance" }
    if yname == "flow-label-load-balance" { return "FlowLabelLoadBalance" }
    return ""
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetSegmentPath() string {
    return "load-balance-group"
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-label-load-balance" {
        return &loadBalanceGroup.FlowLabelLoadBalance
    }
    return nil
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-label-load-balance"] = &loadBalanceGroup.FlowLabelLoadBalance
    return children
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-label-load-balance-code"] = loadBalanceGroup.FlowLabelLoadBalanceCode
    leafs["pw-label-load-balance"] = loadBalanceGroup.PwLabelLoadBalance
    return leafs
}

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetBundleName() string { return "cisco_ios_xr" }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetYangName() string { return "load-balance-group" }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) SetParent(parent types.Entity) { loadBalanceGroup.parent = parent }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetParent() types.Entity { return loadBalanceGroup.parent }

func (loadBalanceGroup *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup) GetParentYangName() string { return "mpls-encapsulation" }

// L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance
// Enable Flow Label based load balancing
type L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flow Label load balance type. The type is FlowLabelLoadBalance.
    FlowLabel interface{}

    // Static Flow Label. The type is interface{}.
    Static interface{}
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetFilter() yfilter.YFilter { return flowLabelLoadBalance.YFilter }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) SetFilter(yf yfilter.YFilter) { flowLabelLoadBalance.YFilter = yf }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetGoName(yname string) string {
    if yname == "flow-label" { return "FlowLabel" }
    if yname == "static" { return "Static" }
    return ""
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetSegmentPath() string {
    return "flow-label-load-balance"
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-label"] = flowLabelLoadBalance.FlowLabel
    leafs["static"] = flowLabelLoadBalance.Static
    return leafs
}

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetBundleName() string { return "cisco_ios_xr" }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetYangName() string { return "flow-label-load-balance" }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) SetParent(parent types.Entity) { flowLabelLoadBalance.parent = parent }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetParent() types.Entity { return flowLabelLoadBalance.parent }

func (flowLabelLoadBalance *L2Vpn_Database_PseudowireClasses_PseudowireClass_MplsEncapsulation_LoadBalanceGroup_FlowLabelLoadBalance) GetParentYangName() string { return "load-balance-group" }

// L2Vpn_Database_FlexibleXconnectServiceTable
// List of Flexible XConnect Services
type L2Vpn_Database_FlexibleXconnectServiceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // List of Vlan-Unaware Flexible XConnect Services.
    VlanUnawareFlexibleXconnectServices L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices

    // List of Vlan-Aware Flexible XConnect Services.
    VlanAwareFlexibleXconnectServices L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetFilter() yfilter.YFilter { return flexibleXconnectServiceTable.YFilter }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) SetFilter(yf yfilter.YFilter) { flexibleXconnectServiceTable.YFilter = yf }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetGoName(yname string) string {
    if yname == "vlan-unaware-flexible-xconnect-services" { return "VlanUnawareFlexibleXconnectServices" }
    if yname == "vlan-aware-flexible-xconnect-services" { return "VlanAwareFlexibleXconnectServices" }
    return ""
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetSegmentPath() string {
    return "flexible-xconnect-service-table"
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-unaware-flexible-xconnect-services" {
        return &flexibleXconnectServiceTable.VlanUnawareFlexibleXconnectServices
    }
    if childYangName == "vlan-aware-flexible-xconnect-services" {
        return &flexibleXconnectServiceTable.VlanAwareFlexibleXconnectServices
    }
    return nil
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vlan-unaware-flexible-xconnect-services"] = &flexibleXconnectServiceTable.VlanUnawareFlexibleXconnectServices
    children["vlan-aware-flexible-xconnect-services"] = &flexibleXconnectServiceTable.VlanAwareFlexibleXconnectServices
    return children
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetBundleName() string { return "cisco_ios_xr" }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetYangName() string { return "flexible-xconnect-service-table" }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) SetParent(parent types.Entity) { flexibleXconnectServiceTable.parent = parent }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetParent() types.Entity { return flexibleXconnectServiceTable.parent }

func (flexibleXconnectServiceTable *L2Vpn_Database_FlexibleXconnectServiceTable) GetParentYangName() string { return "database" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices
// List of Vlan-Unaware Flexible XConnect
// Services
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flexible XConnect Service. The type is slice of
    // L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService.
    VlanUnawareFlexibleXconnectService []L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetFilter() yfilter.YFilter { return vlanUnawareFlexibleXconnectServices.YFilter }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) SetFilter(yf yfilter.YFilter) { vlanUnawareFlexibleXconnectServices.YFilter = yf }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetGoName(yname string) string {
    if yname == "vlan-unaware-flexible-xconnect-service" { return "VlanUnawareFlexibleXconnectService" }
    return ""
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetSegmentPath() string {
    return "vlan-unaware-flexible-xconnect-services"
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-unaware-flexible-xconnect-service" {
        for _, c := range vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService {
            if vlanUnawareFlexibleXconnectServices.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService{}
        vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService = append(vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService, child)
        return &vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService[len(vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService)-1]
    }
    return nil
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService {
        children[vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService[i].GetSegmentPath()] = &vlanUnawareFlexibleXconnectServices.VlanUnawareFlexibleXconnectService[i]
    }
    return children
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetYangName() string { return "vlan-unaware-flexible-xconnect-services" }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) SetParent(parent types.Entity) { vlanUnawareFlexibleXconnectServices.parent = parent }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetParent() types.Entity { return vlanUnawareFlexibleXconnectServices.parent }

func (vlanUnawareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices) GetParentYangName() string { return "flexible-xconnect-service-table" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService
// Flexible XConnect Service
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Flexible XConnect Service. The type is
    // string with length: 1..23.
    Name interface{}

    // List of attachment circuits.
    VlanUnawareFxcAttachmentCircuits L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits

    // List of EVPN Services.
    VlanUnawareFxcPseudowireEvpns L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetFilter() yfilter.YFilter { return vlanUnawareFlexibleXconnectService.YFilter }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) SetFilter(yf yfilter.YFilter) { vlanUnawareFlexibleXconnectService.YFilter = yf }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "vlan-unaware-fxc-attachment-circuits" { return "VlanUnawareFxcAttachmentCircuits" }
    if yname == "vlan-unaware-fxc-pseudowire-evpns" { return "VlanUnawareFxcPseudowireEvpns" }
    return ""
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetSegmentPath() string {
    return "vlan-unaware-flexible-xconnect-service" + "[name='" + fmt.Sprintf("%v", vlanUnawareFlexibleXconnectService.Name) + "']"
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-unaware-fxc-attachment-circuits" {
        return &vlanUnawareFlexibleXconnectService.VlanUnawareFxcAttachmentCircuits
    }
    if childYangName == "vlan-unaware-fxc-pseudowire-evpns" {
        return &vlanUnawareFlexibleXconnectService.VlanUnawareFxcPseudowireEvpns
    }
    return nil
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vlan-unaware-fxc-attachment-circuits"] = &vlanUnawareFlexibleXconnectService.VlanUnawareFxcAttachmentCircuits
    children["vlan-unaware-fxc-pseudowire-evpns"] = &vlanUnawareFlexibleXconnectService.VlanUnawareFxcPseudowireEvpns
    return children
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = vlanUnawareFlexibleXconnectService.Name
    return leafs
}

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetYangName() string { return "vlan-unaware-flexible-xconnect-service" }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) SetParent(parent types.Entity) { vlanUnawareFlexibleXconnectService.parent = parent }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetParent() types.Entity { return vlanUnawareFlexibleXconnectService.parent }

func (vlanUnawareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService) GetParentYangName() string { return "vlan-unaware-flexible-xconnect-services" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits
// List of attachment circuits
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attachment circuit interface. The type is slice of
    // L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit.
    VlanUnawareFxcAttachmentCircuit []L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetFilter() yfilter.YFilter { return vlanUnawareFxcAttachmentCircuits.YFilter }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) SetFilter(yf yfilter.YFilter) { vlanUnawareFxcAttachmentCircuits.YFilter = yf }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetGoName(yname string) string {
    if yname == "vlan-unaware-fxc-attachment-circuit" { return "VlanUnawareFxcAttachmentCircuit" }
    return ""
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetSegmentPath() string {
    return "vlan-unaware-fxc-attachment-circuits"
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-unaware-fxc-attachment-circuit" {
        for _, c := range vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit {
            if vlanUnawareFxcAttachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit{}
        vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit = append(vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit, child)
        return &vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit[len(vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit)-1]
    }
    return nil
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit {
        children[vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit[i].GetSegmentPath()] = &vlanUnawareFxcAttachmentCircuits.VlanUnawareFxcAttachmentCircuit[i]
    }
    return children
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetYangName() string { return "vlan-unaware-fxc-attachment-circuits" }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) SetParent(parent types.Entity) { vlanUnawareFxcAttachmentCircuits.parent = parent }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetParent() types.Entity { return vlanUnawareFxcAttachmentCircuits.parent }

func (vlanUnawareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits) GetParentYangName() string { return "vlan-unaware-flexible-xconnect-service" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit
// Attachment circuit interface
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the attachment circuit interface. The type
    // is string with pattern: [a-zA-Z0-9./-]+.
    Name interface{}
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetFilter() yfilter.YFilter { return vlanUnawareFxcAttachmentCircuit.YFilter }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) SetFilter(yf yfilter.YFilter) { vlanUnawareFxcAttachmentCircuit.YFilter = yf }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    return ""
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetSegmentPath() string {
    return "vlan-unaware-fxc-attachment-circuit" + "[name='" + fmt.Sprintf("%v", vlanUnawareFxcAttachmentCircuit.Name) + "']"
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = vlanUnawareFxcAttachmentCircuit.Name
    return leafs
}

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetYangName() string { return "vlan-unaware-fxc-attachment-circuit" }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) SetParent(parent types.Entity) { vlanUnawareFxcAttachmentCircuit.parent = parent }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetParent() types.Entity { return vlanUnawareFxcAttachmentCircuit.parent }

func (vlanUnawareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcAttachmentCircuits_VlanUnawareFxcAttachmentCircuit) GetParentYangName() string { return "vlan-unaware-fxc-attachment-circuits" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns
// List of EVPN Services
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN FXC Service Configuration. The type is slice of
    // L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn.
    VlanUnawareFxcPseudowireEvpn []L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetFilter() yfilter.YFilter { return vlanUnawareFxcPseudowireEvpns.YFilter }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) SetFilter(yf yfilter.YFilter) { vlanUnawareFxcPseudowireEvpns.YFilter = yf }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetGoName(yname string) string {
    if yname == "vlan-unaware-fxc-pseudowire-evpn" { return "VlanUnawareFxcPseudowireEvpn" }
    return ""
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetSegmentPath() string {
    return "vlan-unaware-fxc-pseudowire-evpns"
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-unaware-fxc-pseudowire-evpn" {
        for _, c := range vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn {
            if vlanUnawareFxcPseudowireEvpns.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn{}
        vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn = append(vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn, child)
        return &vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn[len(vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn)-1]
    }
    return nil
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn {
        children[vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn[i].GetSegmentPath()] = &vlanUnawareFxcPseudowireEvpns.VlanUnawareFxcPseudowireEvpn[i]
    }
    return children
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetYangName() string { return "vlan-unaware-fxc-pseudowire-evpns" }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) SetParent(parent types.Entity) { vlanUnawareFxcPseudowireEvpns.parent = parent }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetParent() types.Entity { return vlanUnawareFxcPseudowireEvpns.parent }

func (vlanUnawareFxcPseudowireEvpns *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns) GetParentYangName() string { return "vlan-unaware-flexible-xconnect-service" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn
// EVPN FXC Service Configuration
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..65534.
    Eviid interface{}

    // This attribute is a key. AC ID. The type is interface{} with range:
    // 1..4294967295.
    Acid interface{}
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetFilter() yfilter.YFilter { return vlanUnawareFxcPseudowireEvpn.YFilter }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) SetFilter(yf yfilter.YFilter) { vlanUnawareFxcPseudowireEvpn.YFilter = yf }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "acid" { return "Acid" }
    return ""
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetSegmentPath() string {
    return "vlan-unaware-fxc-pseudowire-evpn" + "[eviid='" + fmt.Sprintf("%v", vlanUnawareFxcPseudowireEvpn.Eviid) + "']" + "[acid='" + fmt.Sprintf("%v", vlanUnawareFxcPseudowireEvpn.Acid) + "']"
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = vlanUnawareFxcPseudowireEvpn.Eviid
    leafs["acid"] = vlanUnawareFxcPseudowireEvpn.Acid
    return leafs
}

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetYangName() string { return "vlan-unaware-fxc-pseudowire-evpn" }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) SetParent(parent types.Entity) { vlanUnawareFxcPseudowireEvpn.parent = parent }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetParent() types.Entity { return vlanUnawareFxcPseudowireEvpn.parent }

func (vlanUnawareFxcPseudowireEvpn *L2Vpn_Database_FlexibleXconnectServiceTable_VlanUnawareFlexibleXconnectServices_VlanUnawareFlexibleXconnectService_VlanUnawareFxcPseudowireEvpns_VlanUnawareFxcPseudowireEvpn) GetParentYangName() string { return "vlan-unaware-fxc-pseudowire-evpns" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices
// List of Vlan-Aware Flexible XConnect Services
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Flexible XConnect Service. The type is slice of
    // L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService.
    VlanAwareFlexibleXconnectService []L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetFilter() yfilter.YFilter { return vlanAwareFlexibleXconnectServices.YFilter }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) SetFilter(yf yfilter.YFilter) { vlanAwareFlexibleXconnectServices.YFilter = yf }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetGoName(yname string) string {
    if yname == "vlan-aware-flexible-xconnect-service" { return "VlanAwareFlexibleXconnectService" }
    return ""
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetSegmentPath() string {
    return "vlan-aware-flexible-xconnect-services"
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-aware-flexible-xconnect-service" {
        for _, c := range vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService {
            if vlanAwareFlexibleXconnectServices.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService{}
        vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService = append(vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService, child)
        return &vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService[len(vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService)-1]
    }
    return nil
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService {
        children[vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService[i].GetSegmentPath()] = &vlanAwareFlexibleXconnectServices.VlanAwareFlexibleXconnectService[i]
    }
    return children
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetBundleName() string { return "cisco_ios_xr" }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetYangName() string { return "vlan-aware-flexible-xconnect-services" }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) SetParent(parent types.Entity) { vlanAwareFlexibleXconnectServices.parent = parent }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetParent() types.Entity { return vlanAwareFlexibleXconnectServices.parent }

func (vlanAwareFlexibleXconnectServices *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices) GetParentYangName() string { return "flexible-xconnect-service-table" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService
// Flexible XConnect Service
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Ethernet VPN ID. The type is interface{} with
    // range: 1..65534.
    Eviid interface{}

    // List of attachment circuits.
    VlanAwareFxcAttachmentCircuits L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetFilter() yfilter.YFilter { return vlanAwareFlexibleXconnectService.YFilter }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) SetFilter(yf yfilter.YFilter) { vlanAwareFlexibleXconnectService.YFilter = yf }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "vlan-aware-fxc-attachment-circuits" { return "VlanAwareFxcAttachmentCircuits" }
    return ""
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetSegmentPath() string {
    return "vlan-aware-flexible-xconnect-service" + "[eviid='" + fmt.Sprintf("%v", vlanAwareFlexibleXconnectService.Eviid) + "']"
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-aware-fxc-attachment-circuits" {
        return &vlanAwareFlexibleXconnectService.VlanAwareFxcAttachmentCircuits
    }
    return nil
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vlan-aware-fxc-attachment-circuits"] = &vlanAwareFlexibleXconnectService.VlanAwareFxcAttachmentCircuits
    return children
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = vlanAwareFlexibleXconnectService.Eviid
    return leafs
}

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetBundleName() string { return "cisco_ios_xr" }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetYangName() string { return "vlan-aware-flexible-xconnect-service" }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) SetParent(parent types.Entity) { vlanAwareFlexibleXconnectService.parent = parent }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetParent() types.Entity { return vlanAwareFlexibleXconnectService.parent }

func (vlanAwareFlexibleXconnectService *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService) GetParentYangName() string { return "vlan-aware-flexible-xconnect-services" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits
// List of attachment circuits
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attachment circuit interface. The type is slice of
    // L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit.
    VlanAwareFxcAttachmentCircuit []L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetFilter() yfilter.YFilter { return vlanAwareFxcAttachmentCircuits.YFilter }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) SetFilter(yf yfilter.YFilter) { vlanAwareFxcAttachmentCircuits.YFilter = yf }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetGoName(yname string) string {
    if yname == "vlan-aware-fxc-attachment-circuit" { return "VlanAwareFxcAttachmentCircuit" }
    return ""
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetSegmentPath() string {
    return "vlan-aware-fxc-attachment-circuits"
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vlan-aware-fxc-attachment-circuit" {
        for _, c := range vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit {
            if vlanAwareFxcAttachmentCircuits.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit{}
        vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit = append(vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit, child)
        return &vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit[len(vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit)-1]
    }
    return nil
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit {
        children[vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit[i].GetSegmentPath()] = &vlanAwareFxcAttachmentCircuits.VlanAwareFxcAttachmentCircuit[i]
    }
    return children
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetBundleName() string { return "cisco_ios_xr" }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetYangName() string { return "vlan-aware-fxc-attachment-circuits" }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) SetParent(parent types.Entity) { vlanAwareFxcAttachmentCircuits.parent = parent }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetParent() types.Entity { return vlanAwareFxcAttachmentCircuits.parent }

func (vlanAwareFxcAttachmentCircuits *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits) GetParentYangName() string { return "vlan-aware-flexible-xconnect-service" }

// L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit
// Attachment circuit interface
type L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the attachment circuit interface. The type
    // is string with pattern: [a-zA-Z0-9./-]+.
    Name interface{}
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetFilter() yfilter.YFilter { return vlanAwareFxcAttachmentCircuit.YFilter }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) SetFilter(yf yfilter.YFilter) { vlanAwareFxcAttachmentCircuit.YFilter = yf }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    return ""
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetSegmentPath() string {
    return "vlan-aware-fxc-attachment-circuit" + "[name='" + fmt.Sprintf("%v", vlanAwareFxcAttachmentCircuit.Name) + "']"
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = vlanAwareFxcAttachmentCircuit.Name
    return leafs
}

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetBundleName() string { return "cisco_ios_xr" }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetYangName() string { return "vlan-aware-fxc-attachment-circuit" }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) SetParent(parent types.Entity) { vlanAwareFxcAttachmentCircuit.parent = parent }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetParent() types.Entity { return vlanAwareFxcAttachmentCircuit.parent }

func (vlanAwareFxcAttachmentCircuit *L2Vpn_Database_FlexibleXconnectServiceTable_VlanAwareFlexibleXconnectServices_VlanAwareFlexibleXconnectService_VlanAwareFxcAttachmentCircuits_VlanAwareFxcAttachmentCircuit) GetParentYangName() string { return "vlan-aware-fxc-attachment-circuits" }

// L2Vpn_Database_Redundancy
// Redundancy groups
type L2Vpn_Database_Redundancy struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable redundancy groups. The type is interface{}.
    Enable interface{}

    // List of Inter-Chassis Communication Protocol redundancy groups.
    IccpRedundancyGroups L2Vpn_Database_Redundancy_IccpRedundancyGroups
}

func (redundancy *L2Vpn_Database_Redundancy) GetFilter() yfilter.YFilter { return redundancy.YFilter }

func (redundancy *L2Vpn_Database_Redundancy) SetFilter(yf yfilter.YFilter) { redundancy.YFilter = yf }

func (redundancy *L2Vpn_Database_Redundancy) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "iccp-redundancy-groups" { return "IccpRedundancyGroups" }
    return ""
}

func (redundancy *L2Vpn_Database_Redundancy) GetSegmentPath() string {
    return "redundancy"
}

func (redundancy *L2Vpn_Database_Redundancy) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-redundancy-groups" {
        return &redundancy.IccpRedundancyGroups
    }
    return nil
}

func (redundancy *L2Vpn_Database_Redundancy) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-redundancy-groups"] = &redundancy.IccpRedundancyGroups
    return children
}

func (redundancy *L2Vpn_Database_Redundancy) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = redundancy.Enable
    return leafs
}

func (redundancy *L2Vpn_Database_Redundancy) GetBundleName() string { return "cisco_ios_xr" }

func (redundancy *L2Vpn_Database_Redundancy) GetYangName() string { return "redundancy" }

func (redundancy *L2Vpn_Database_Redundancy) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redundancy *L2Vpn_Database_Redundancy) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redundancy *L2Vpn_Database_Redundancy) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redundancy *L2Vpn_Database_Redundancy) SetParent(parent types.Entity) { redundancy.parent = parent }

func (redundancy *L2Vpn_Database_Redundancy) GetParent() types.Entity { return redundancy.parent }

func (redundancy *L2Vpn_Database_Redundancy) GetParentYangName() string { return "database" }

// L2Vpn_Database_Redundancy_IccpRedundancyGroups
// List of Inter-Chassis Communication Protocol
// redundancy groups
type L2Vpn_Database_Redundancy_IccpRedundancyGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Redundancy group. The type is slice of
    // L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup.
    IccpRedundancyGroup []L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetFilter() yfilter.YFilter { return iccpRedundancyGroups.YFilter }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) SetFilter(yf yfilter.YFilter) { iccpRedundancyGroups.YFilter = yf }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetGoName(yname string) string {
    if yname == "iccp-redundancy-group" { return "IccpRedundancyGroup" }
    return ""
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetSegmentPath() string {
    return "iccp-redundancy-groups"
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-redundancy-group" {
        for _, c := range iccpRedundancyGroups.IccpRedundancyGroup {
            if iccpRedundancyGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup{}
        iccpRedundancyGroups.IccpRedundancyGroup = append(iccpRedundancyGroups.IccpRedundancyGroup, child)
        return &iccpRedundancyGroups.IccpRedundancyGroup[len(iccpRedundancyGroups.IccpRedundancyGroup)-1]
    }
    return nil
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpRedundancyGroups.IccpRedundancyGroup {
        children[iccpRedundancyGroups.IccpRedundancyGroup[i].GetSegmentPath()] = &iccpRedundancyGroups.IccpRedundancyGroup[i]
    }
    return children
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetBundleName() string { return "cisco_ios_xr" }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetYangName() string { return "iccp-redundancy-groups" }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) SetParent(parent types.Entity) { iccpRedundancyGroups.parent = parent }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetParent() types.Entity { return iccpRedundancyGroups.parent }

func (iccpRedundancyGroups *L2Vpn_Database_Redundancy_IccpRedundancyGroups) GetParentYangName() string { return "redundancy" }

// L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup
// ICCP Redundancy group
type L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Group ID. The type is interface{} with range:
    // 1..4294967295.
    GroupId interface{}

    // ICCP-based service multi-homing node ID. The type is interface{} with
    // range: 0..254.
    MultiHomingNodeId interface{}

    // List of interfaces.
    IccpInterfaces L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetFilter() yfilter.YFilter { return iccpRedundancyGroup.YFilter }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) SetFilter(yf yfilter.YFilter) { iccpRedundancyGroup.YFilter = yf }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetGoName(yname string) string {
    if yname == "group-id" { return "GroupId" }
    if yname == "multi-homing-node-id" { return "MultiHomingNodeId" }
    if yname == "iccp-interfaces" { return "IccpInterfaces" }
    return ""
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetSegmentPath() string {
    return "iccp-redundancy-group" + "[group-id='" + fmt.Sprintf("%v", iccpRedundancyGroup.GroupId) + "']"
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-interfaces" {
        return &iccpRedundancyGroup.IccpInterfaces
    }
    return nil
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-interfaces"] = &iccpRedundancyGroup.IccpInterfaces
    return children
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["group-id"] = iccpRedundancyGroup.GroupId
    leafs["multi-homing-node-id"] = iccpRedundancyGroup.MultiHomingNodeId
    return leafs
}

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetBundleName() string { return "cisco_ios_xr" }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetYangName() string { return "iccp-redundancy-group" }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) SetParent(parent types.Entity) { iccpRedundancyGroup.parent = parent }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetParent() types.Entity { return iccpRedundancyGroup.parent }

func (iccpRedundancyGroup *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup) GetParentYangName() string { return "iccp-redundancy-groups" }

// L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces
// List of interfaces
type L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is slice of
    // L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface.
    IccpInterface []L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetFilter() yfilter.YFilter { return iccpInterfaces.YFilter }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) SetFilter(yf yfilter.YFilter) { iccpInterfaces.YFilter = yf }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetGoName(yname string) string {
    if yname == "iccp-interface" { return "IccpInterface" }
    return ""
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetSegmentPath() string {
    return "iccp-interfaces"
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-interface" {
        for _, c := range iccpInterfaces.IccpInterface {
            if iccpInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface{}
        iccpInterfaces.IccpInterface = append(iccpInterfaces.IccpInterface, child)
        return &iccpInterfaces.IccpInterface[len(iccpInterfaces.IccpInterface)-1]
    }
    return nil
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpInterfaces.IccpInterface {
        children[iccpInterfaces.IccpInterface[i].GetSegmentPath()] = &iccpInterfaces.IccpInterface[i]
    }
    return children
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetYangName() string { return "iccp-interfaces" }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) SetParent(parent types.Entity) { iccpInterfaces.parent = parent }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetParent() types.Entity { return iccpInterfaces.parent }

func (iccpInterfaces *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces) GetParentYangName() string { return "iccp-redundancy-group" }

// L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface
// Interface name
type L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Secondary VLAN range, in the form of 1-3,5 ,8-11. The type is string.
    SecondaryVlanRange interface{}

    // Failure clear recovery delay. The type is interface{} with range: 30..3600.
    // The default value is 180.
    RecoveryDelay interface{}

    // Primary VLAN range, in the form of 1-3,5 ,8-11. The type is string.
    PrimaryVlanRange interface{}

    // Enable STP-TCN MAC flushing. The type is interface{}.
    MacFlushTcn interface{}
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetFilter() yfilter.YFilter { return iccpInterface.YFilter }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) SetFilter(yf yfilter.YFilter) { iccpInterface.YFilter = yf }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "secondary-vlan-range" { return "SecondaryVlanRange" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "primary-vlan-range" { return "PrimaryVlanRange" }
    if yname == "mac-flush-tcn" { return "MacFlushTcn" }
    return ""
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetSegmentPath() string {
    return "iccp-interface" + "[interface-name='" + fmt.Sprintf("%v", iccpInterface.InterfaceName) + "']"
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = iccpInterface.InterfaceName
    leafs["secondary-vlan-range"] = iccpInterface.SecondaryVlanRange
    leafs["recovery-delay"] = iccpInterface.RecoveryDelay
    leafs["primary-vlan-range"] = iccpInterface.PrimaryVlanRange
    leafs["mac-flush-tcn"] = iccpInterface.MacFlushTcn
    return leafs
}

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetBundleName() string { return "cisco_ios_xr" }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetYangName() string { return "iccp-interface" }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) SetParent(parent types.Entity) { iccpInterface.parent = parent }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetParent() types.Entity { return iccpInterface.parent }

func (iccpInterface *L2Vpn_Database_Redundancy_IccpRedundancyGroups_IccpRedundancyGroup_IccpInterfaces_IccpInterface) GetParentYangName() string { return "iccp-interfaces" }

// L2Vpn_Pbb
// L2VPN PBB Global
type L2Vpn_Pbb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Backbone Source MAC. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    BackboneSourceMac interface{}
}

func (pbb *L2Vpn_Pbb) GetFilter() yfilter.YFilter { return pbb.YFilter }

func (pbb *L2Vpn_Pbb) SetFilter(yf yfilter.YFilter) { pbb.YFilter = yf }

func (pbb *L2Vpn_Pbb) GetGoName(yname string) string {
    if yname == "backbone-source-mac" { return "BackboneSourceMac" }
    return ""
}

func (pbb *L2Vpn_Pbb) GetSegmentPath() string {
    return "pbb"
}

func (pbb *L2Vpn_Pbb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pbb *L2Vpn_Pbb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pbb *L2Vpn_Pbb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backbone-source-mac"] = pbb.BackboneSourceMac
    return leafs
}

func (pbb *L2Vpn_Pbb) GetBundleName() string { return "cisco_ios_xr" }

func (pbb *L2Vpn_Pbb) GetYangName() string { return "pbb" }

func (pbb *L2Vpn_Pbb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pbb *L2Vpn_Pbb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pbb *L2Vpn_Pbb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pbb *L2Vpn_Pbb) SetParent(parent types.Entity) { pbb.parent = parent }

func (pbb *L2Vpn_Pbb) GetParent() types.Entity { return pbb.parent }

func (pbb *L2Vpn_Pbb) GetParentYangName() string { return "l2vpn" }

// L2Vpn_AutoDiscovery
// Global auto-discovery attributes
type L2Vpn_AutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global bgp signaling attributes.
    BgpSignaling L2Vpn_AutoDiscovery_BgpSignaling
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetFilter() yfilter.YFilter { return autoDiscovery.YFilter }

func (autoDiscovery *L2Vpn_AutoDiscovery) SetFilter(yf yfilter.YFilter) { autoDiscovery.YFilter = yf }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetGoName(yname string) string {
    if yname == "bgp-signaling" { return "BgpSignaling" }
    return ""
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetSegmentPath() string {
    return "auto-discovery"
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-signaling" {
        return &autoDiscovery.BgpSignaling
    }
    return nil
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bgp-signaling"] = &autoDiscovery.BgpSignaling
    return children
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoDiscovery *L2Vpn_AutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetYangName() string { return "auto-discovery" }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoDiscovery *L2Vpn_AutoDiscovery) SetParent(parent types.Entity) { autoDiscovery.parent = parent }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetParent() types.Entity { return autoDiscovery.parent }

func (autoDiscovery *L2Vpn_AutoDiscovery) GetParentYangName() string { return "l2vpn" }

// L2Vpn_AutoDiscovery_BgpSignaling
// Global bgp signaling attributes
type L2Vpn_AutoDiscovery_BgpSignaling struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ignore MTU mismatch for auto-discovered pseudowires. The type is
    // interface{}.
    MtuMismatchIgnore interface{}
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetFilter() yfilter.YFilter { return bgpSignaling.YFilter }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) SetFilter(yf yfilter.YFilter) { bgpSignaling.YFilter = yf }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetGoName(yname string) string {
    if yname == "mtu-mismatch-ignore" { return "MtuMismatchIgnore" }
    return ""
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetSegmentPath() string {
    return "bgp-signaling"
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mtu-mismatch-ignore"] = bgpSignaling.MtuMismatchIgnore
    return leafs
}

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetBundleName() string { return "cisco_ios_xr" }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetYangName() string { return "bgp-signaling" }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) SetParent(parent types.Entity) { bgpSignaling.parent = parent }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetParent() types.Entity { return bgpSignaling.parent }

func (bgpSignaling *L2Vpn_AutoDiscovery_BgpSignaling) GetParentYangName() string { return "auto-discovery" }

// L2Vpn_Utility
// L2VPN utilities
type L2Vpn_Utility struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // L2VPN logging utility.
    Logging L2Vpn_Utility_Logging
}

func (utility *L2Vpn_Utility) GetFilter() yfilter.YFilter { return utility.YFilter }

func (utility *L2Vpn_Utility) SetFilter(yf yfilter.YFilter) { utility.YFilter = yf }

func (utility *L2Vpn_Utility) GetGoName(yname string) string {
    if yname == "logging" { return "Logging" }
    return ""
}

func (utility *L2Vpn_Utility) GetSegmentPath() string {
    return "utility"
}

func (utility *L2Vpn_Utility) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "logging" {
        return &utility.Logging
    }
    return nil
}

func (utility *L2Vpn_Utility) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["logging"] = &utility.Logging
    return children
}

func (utility *L2Vpn_Utility) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (utility *L2Vpn_Utility) GetBundleName() string { return "cisco_ios_xr" }

func (utility *L2Vpn_Utility) GetYangName() string { return "utility" }

func (utility *L2Vpn_Utility) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (utility *L2Vpn_Utility) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (utility *L2Vpn_Utility) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (utility *L2Vpn_Utility) SetParent(parent types.Entity) { utility.parent = parent }

func (utility *L2Vpn_Utility) GetParent() types.Entity { return utility.parent }

func (utility *L2Vpn_Utility) GetParentYangName() string { return "l2vpn" }

// L2Vpn_Utility_Logging
// L2VPN logging utility
type L2Vpn_Utility_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Bridge Domain state change logging. The type is interface{}.
    BridgeDomainStateChange interface{}

    // Enable pseudowire state change logging. The type is interface{}.
    PseudowireStateChange interface{}

    // Enable VFI state change logging. The type is interface{}.
    Vfi interface{}

    // Enable Non Stop Routing state change logging. The type is interface{}.
    NsrStateChange interface{}

    // Enable PW-HE Replication state change logging. The type is interface{}.
    PwheReplicationStateChange interface{}
}

func (logging *L2Vpn_Utility_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *L2Vpn_Utility_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *L2Vpn_Utility_Logging) GetGoName(yname string) string {
    if yname == "bridge-domain-state-change" { return "BridgeDomainStateChange" }
    if yname == "pseudowire-state-change" { return "PseudowireStateChange" }
    if yname == "vfi" { return "Vfi" }
    if yname == "nsr-state-change" { return "NsrStateChange" }
    if yname == "pwhe-replication-state-change" { return "PwheReplicationStateChange" }
    return ""
}

func (logging *L2Vpn_Utility_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *L2Vpn_Utility_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *L2Vpn_Utility_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *L2Vpn_Utility_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bridge-domain-state-change"] = logging.BridgeDomainStateChange
    leafs["pseudowire-state-change"] = logging.PseudowireStateChange
    leafs["vfi"] = logging.Vfi
    leafs["nsr-state-change"] = logging.NsrStateChange
    leafs["pwhe-replication-state-change"] = logging.PwheReplicationStateChange
    return leafs
}

func (logging *L2Vpn_Utility_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *L2Vpn_Utility_Logging) GetYangName() string { return "logging" }

func (logging *L2Vpn_Utility_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *L2Vpn_Utility_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *L2Vpn_Utility_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *L2Vpn_Utility_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *L2Vpn_Utility_Logging) GetParent() types.Entity { return logging.parent }

func (logging *L2Vpn_Utility_Logging) GetParentYangName() string { return "utility" }

// L2Vpn_Snmp
// SNMP related configuration
type L2Vpn_Snmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MIB related configuration.
    Mib L2Vpn_Snmp_Mib
}

func (snmp *L2Vpn_Snmp) GetFilter() yfilter.YFilter { return snmp.YFilter }

func (snmp *L2Vpn_Snmp) SetFilter(yf yfilter.YFilter) { snmp.YFilter = yf }

func (snmp *L2Vpn_Snmp) GetGoName(yname string) string {
    if yname == "mib" { return "Mib" }
    return ""
}

func (snmp *L2Vpn_Snmp) GetSegmentPath() string {
    return "snmp"
}

func (snmp *L2Vpn_Snmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mib" {
        return &snmp.Mib
    }
    return nil
}

func (snmp *L2Vpn_Snmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mib"] = &snmp.Mib
    return children
}

func (snmp *L2Vpn_Snmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (snmp *L2Vpn_Snmp) GetBundleName() string { return "cisco_ios_xr" }

func (snmp *L2Vpn_Snmp) GetYangName() string { return "snmp" }

func (snmp *L2Vpn_Snmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmp *L2Vpn_Snmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmp *L2Vpn_Snmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmp *L2Vpn_Snmp) SetParent(parent types.Entity) { snmp.parent = parent }

func (snmp *L2Vpn_Snmp) GetParent() types.Entity { return snmp.parent }

func (snmp *L2Vpn_Snmp) GetParentYangName() string { return "l2vpn" }

// L2Vpn_Snmp_Mib
// MIB related configuration
type L2Vpn_Snmp_Mib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface related configuration for MIB.
    MibInterface L2Vpn_Snmp_Mib_MibInterface

    // Pseudowire related configuration for MIB.
    MibPseudowire L2Vpn_Snmp_Mib_MibPseudowire
}

func (mib *L2Vpn_Snmp_Mib) GetFilter() yfilter.YFilter { return mib.YFilter }

func (mib *L2Vpn_Snmp_Mib) SetFilter(yf yfilter.YFilter) { mib.YFilter = yf }

func (mib *L2Vpn_Snmp_Mib) GetGoName(yname string) string {
    if yname == "mib-interface" { return "MibInterface" }
    if yname == "mib-pseudowire" { return "MibPseudowire" }
    return ""
}

func (mib *L2Vpn_Snmp_Mib) GetSegmentPath() string {
    return "mib"
}

func (mib *L2Vpn_Snmp_Mib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mib-interface" {
        return &mib.MibInterface
    }
    if childYangName == "mib-pseudowire" {
        return &mib.MibPseudowire
    }
    return nil
}

func (mib *L2Vpn_Snmp_Mib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mib-interface"] = &mib.MibInterface
    children["mib-pseudowire"] = &mib.MibPseudowire
    return children
}

func (mib *L2Vpn_Snmp_Mib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mib *L2Vpn_Snmp_Mib) GetBundleName() string { return "cisco_ios_xr" }

func (mib *L2Vpn_Snmp_Mib) GetYangName() string { return "mib" }

func (mib *L2Vpn_Snmp_Mib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mib *L2Vpn_Snmp_Mib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mib *L2Vpn_Snmp_Mib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mib *L2Vpn_Snmp_Mib) SetParent(parent types.Entity) { mib.parent = parent }

func (mib *L2Vpn_Snmp_Mib) GetParent() types.Entity { return mib.parent }

func (mib *L2Vpn_Snmp_Mib) GetParentYangName() string { return "snmp" }

// L2Vpn_Snmp_Mib_MibInterface
// Interface related configuration for MIB
type L2Vpn_Snmp_Mib_MibInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MIB interface name output format.
    Format L2Vpn_Snmp_Mib_MibInterface_Format
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetFilter() yfilter.YFilter { return mibInterface.YFilter }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) SetFilter(yf yfilter.YFilter) { mibInterface.YFilter = yf }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    return ""
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetSegmentPath() string {
    return "mib-interface"
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "format" {
        return &mibInterface.Format
    }
    return nil
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["format"] = &mibInterface.Format
    return children
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetBundleName() string { return "cisco_ios_xr" }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetYangName() string { return "mib-interface" }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) SetParent(parent types.Entity) { mibInterface.parent = parent }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetParent() types.Entity { return mibInterface.parent }

func (mibInterface *L2Vpn_Snmp_Mib_MibInterface) GetParentYangName() string { return "mib" }

// L2Vpn_Snmp_Mib_MibInterface_Format
// MIB interface name output format
type L2Vpn_Snmp_Mib_MibInterface_Format struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set MIB interface name output in slash format (/). The type is interface{}.
    ExternalInterfaceFormat interface{}
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetFilter() yfilter.YFilter { return format.YFilter }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) SetFilter(yf yfilter.YFilter) { format.YFilter = yf }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetGoName(yname string) string {
    if yname == "external-interface-format" { return "ExternalInterfaceFormat" }
    return ""
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetSegmentPath() string {
    return "format"
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["external-interface-format"] = format.ExternalInterfaceFormat
    return leafs
}

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetBundleName() string { return "cisco_ios_xr" }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetYangName() string { return "format" }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) SetParent(parent types.Entity) { format.parent = parent }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetParent() types.Entity { return format.parent }

func (format *L2Vpn_Snmp_Mib_MibInterface_Format) GetParentYangName() string { return "mib-interface" }

// L2Vpn_Snmp_Mib_MibPseudowire
// Pseudowire related configuration for MIB
type L2Vpn_Snmp_Mib_MibPseudowire struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable pseudowire statistics in MIB output. The type is interface{}.
    Statistics interface{}
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetFilter() yfilter.YFilter { return mibPseudowire.YFilter }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) SetFilter(yf yfilter.YFilter) { mibPseudowire.YFilter = yf }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetGoName(yname string) string {
    if yname == "statistics" { return "Statistics" }
    return ""
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetSegmentPath() string {
    return "mib-pseudowire"
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["statistics"] = mibPseudowire.Statistics
    return leafs
}

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetBundleName() string { return "cisco_ios_xr" }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetYangName() string { return "mib-pseudowire" }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) SetParent(parent types.Entity) { mibPseudowire.parent = parent }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetParent() types.Entity { return mibPseudowire.parent }

func (mibPseudowire *L2Vpn_Snmp_Mib_MibPseudowire) GetParentYangName() string { return "mib" }

// GenericInterfaceLists
// generic interface lists
type GenericInterfaceLists struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bridge group. The type is slice of GenericInterfaceLists_GenericInterface.
    GenericInterface []GenericInterfaceLists_GenericInterface
}

func (genericInterfaceLists *GenericInterfaceLists) GetFilter() yfilter.YFilter { return genericInterfaceLists.YFilter }

func (genericInterfaceLists *GenericInterfaceLists) SetFilter(yf yfilter.YFilter) { genericInterfaceLists.YFilter = yf }

func (genericInterfaceLists *GenericInterfaceLists) GetGoName(yname string) string {
    if yname == "generic-interface" { return "GenericInterface" }
    return ""
}

func (genericInterfaceLists *GenericInterfaceLists) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:generic-interface-lists"
}

func (genericInterfaceLists *GenericInterfaceLists) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-interface" {
        for _, c := range genericInterfaceLists.GenericInterface {
            if genericInterfaceLists.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := GenericInterfaceLists_GenericInterface{}
        genericInterfaceLists.GenericInterface = append(genericInterfaceLists.GenericInterface, child)
        return &genericInterfaceLists.GenericInterface[len(genericInterfaceLists.GenericInterface)-1]
    }
    return nil
}

func (genericInterfaceLists *GenericInterfaceLists) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range genericInterfaceLists.GenericInterface {
        children[genericInterfaceLists.GenericInterface[i].GetSegmentPath()] = &genericInterfaceLists.GenericInterface[i]
    }
    return children
}

func (genericInterfaceLists *GenericInterfaceLists) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericInterfaceLists *GenericInterfaceLists) GetBundleName() string { return "cisco_ios_xr" }

func (genericInterfaceLists *GenericInterfaceLists) GetYangName() string { return "generic-interface-lists" }

func (genericInterfaceLists *GenericInterfaceLists) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericInterfaceLists *GenericInterfaceLists) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericInterfaceLists *GenericInterfaceLists) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericInterfaceLists *GenericInterfaceLists) SetParent(parent types.Entity) { genericInterfaceLists.parent = parent }

func (genericInterfaceLists *GenericInterfaceLists) GetParent() types.Entity { return genericInterfaceLists.parent }

func (genericInterfaceLists *GenericInterfaceLists) GetParentYangName() string { return "Cisco-IOS-XR-l2vpn-cfg" }

// GenericInterfaceLists_GenericInterface
// Bridge group
type GenericInterfaceLists_GenericInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the interface list. The type is string
    // with length: 1..32.
    GenericInterfaceListName interface{}

    // Enable interface list. The type is interface{}.
    Enable interface{}

    // Interface table.
    Interfaces GenericInterfaceLists_GenericInterface_Interfaces
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetFilter() yfilter.YFilter { return genericInterface.YFilter }

func (genericInterface *GenericInterfaceLists_GenericInterface) SetFilter(yf yfilter.YFilter) { genericInterface.YFilter = yf }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetGoName(yname string) string {
    if yname == "generic-interface-list-name" { return "GenericInterfaceListName" }
    if yname == "enable" { return "Enable" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetSegmentPath() string {
    return "generic-interface" + "[generic-interface-list-name='" + fmt.Sprintf("%v", genericInterface.GenericInterfaceListName) + "']"
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &genericInterface.Interfaces
    }
    return nil
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &genericInterface.Interfaces
    return children
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-interface-list-name"] = genericInterface.GenericInterfaceListName
    leafs["enable"] = genericInterface.Enable
    return leafs
}

func (genericInterface *GenericInterfaceLists_GenericInterface) GetBundleName() string { return "cisco_ios_xr" }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetYangName() string { return "generic-interface" }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericInterface *GenericInterfaceLists_GenericInterface) SetParent(parent types.Entity) { genericInterface.parent = parent }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetParent() types.Entity { return genericInterface.parent }

func (genericInterface *GenericInterfaceLists_GenericInterface) GetParentYangName() string { return "generic-interface-lists" }

// GenericInterfaceLists_GenericInterface_Interfaces
// Interface table
type GenericInterfaceLists_GenericInterface_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface. The type is slice of
    // GenericInterfaceLists_GenericInterface_Interfaces_Interface.
    Interface []GenericInterfaceLists_GenericInterface_Interfaces_Interface
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := GenericInterfaceLists_GenericInterface_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *GenericInterfaceLists_GenericInterface_Interfaces) GetParentYangName() string { return "generic-interface" }

// GenericInterfaceLists_GenericInterface_Interfaces_Interface
// Interface
type GenericInterfaceLists_GenericInterface_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable interface. The type is interface{}.
    Enable interface{}
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["enable"] = self.Enable
    return leafs
}

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *GenericInterfaceLists_GenericInterface_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Evpn
// evpn
type Evpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable EVPN feature. The type is interface{}.
    Enable interface{}

    // EVPN submodes.
    EvpnTables Evpn_EvpnTables
}

func (evpn *Evpn) GetFilter() yfilter.YFilter { return evpn.YFilter }

func (evpn *Evpn) SetFilter(yf yfilter.YFilter) { evpn.YFilter = yf }

func (evpn *Evpn) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evpn-tables" { return "EvpnTables" }
    return ""
}

func (evpn *Evpn) GetSegmentPath() string {
    return "Cisco-IOS-XR-l2vpn-cfg:evpn"
}

func (evpn *Evpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-tables" {
        return &evpn.EvpnTables
    }
    return nil
}

func (evpn *Evpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-tables"] = &evpn.EvpnTables
    return children
}

func (evpn *Evpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpn.Enable
    return leafs
}

func (evpn *Evpn) GetBundleName() string { return "cisco_ios_xr" }

func (evpn *Evpn) GetYangName() string { return "evpn" }

func (evpn *Evpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpn *Evpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpn *Evpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpn *Evpn) SetParent(parent types.Entity) { evpn.parent = parent }

func (evpn *Evpn) GetParent() types.Entity { return evpn.parent }

func (evpn *Evpn) GetParentYangName() string { return "Cisco-IOS-XR-l2vpn-cfg" }

// Evpn_EvpnTables
// EVPN submodes
type Evpn_EvpnTables struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure node to cost-out. The type is interface{}.
    EviCostOut interface{}

    // Configure EVPN router-id implicitly through Loopback Interface. The type is
    // string with pattern: [a-zA-Z0-9./-]+.
    EvpnSourceInterface interface{}

    // Cost-in node after given time (seconds) on startup timer. The type is
    // interface{} with range: 30..86400. Units are second.
    EvpnCostInStartup interface{}

    // Enter EVPN timers configuration submode.
    EvpnTimers Evpn_EvpnTables_EvpnTimers

    // EVPN MAC Configuration.
    Evpnmac Evpn_EvpnTables_Evpnmac

    // Enter EVPN Instance configuration submode.
    Evpnevis Evpn_EvpnTables_Evpnevis

    // Virtual Access VFI interfaces.
    EvpnVirtualAccessVfis Evpn_EvpnTables_EvpnVirtualAccessVfis

    // Enter EVPN Loadbalancing configuration submode.
    EvpnLoadBalancing Evpn_EvpnTables_EvpnLoadBalancing

    // Enable Autodiscovery BGP in EVPN.
    EvpnBgpAutoDiscovery Evpn_EvpnTables_EvpnBgpAutoDiscovery

    // Enter EVPN Instance configuration submode.
    EvpnInstances Evpn_EvpnTables_EvpnInstances

    // Enter EVPN Logging configuration submode.
    EvpnLogging Evpn_EvpnTables_EvpnLogging

    // Attachment Circuit interfaces.
    EvpnInterfaces Evpn_EvpnTables_EvpnInterfaces

    // Virtual Access Pseudowire interfaces.
    EvpnVirtualAccessPws Evpn_EvpnTables_EvpnVirtualAccessPws

    // EVPN Global Ethernet Segment submode.
    EvpnEthernetSegment Evpn_EvpnTables_EvpnEthernetSegment
}

func (evpnTables *Evpn_EvpnTables) GetFilter() yfilter.YFilter { return evpnTables.YFilter }

func (evpnTables *Evpn_EvpnTables) SetFilter(yf yfilter.YFilter) { evpnTables.YFilter = yf }

func (evpnTables *Evpn_EvpnTables) GetGoName(yname string) string {
    if yname == "evi-cost-out" { return "EviCostOut" }
    if yname == "evpn-source-interface" { return "EvpnSourceInterface" }
    if yname == "evpn-cost-in-startup" { return "EvpnCostInStartup" }
    if yname == "evpn-timers" { return "EvpnTimers" }
    if yname == "evpnmac" { return "Evpnmac" }
    if yname == "evpnevis" { return "Evpnevis" }
    if yname == "evpn-virtual-access-vfis" { return "EvpnVirtualAccessVfis" }
    if yname == "evpn-load-balancing" { return "EvpnLoadBalancing" }
    if yname == "evpn-bgp-auto-discovery" { return "EvpnBgpAutoDiscovery" }
    if yname == "evpn-instances" { return "EvpnInstances" }
    if yname == "evpn-logging" { return "EvpnLogging" }
    if yname == "evpn-interfaces" { return "EvpnInterfaces" }
    if yname == "evpn-virtual-access-pws" { return "EvpnVirtualAccessPws" }
    if yname == "evpn-ethernet-segment" { return "EvpnEthernetSegment" }
    return ""
}

func (evpnTables *Evpn_EvpnTables) GetSegmentPath() string {
    return "evpn-tables"
}

func (evpnTables *Evpn_EvpnTables) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-timers" {
        return &evpnTables.EvpnTimers
    }
    if childYangName == "evpnmac" {
        return &evpnTables.Evpnmac
    }
    if childYangName == "evpnevis" {
        return &evpnTables.Evpnevis
    }
    if childYangName == "evpn-virtual-access-vfis" {
        return &evpnTables.EvpnVirtualAccessVfis
    }
    if childYangName == "evpn-load-balancing" {
        return &evpnTables.EvpnLoadBalancing
    }
    if childYangName == "evpn-bgp-auto-discovery" {
        return &evpnTables.EvpnBgpAutoDiscovery
    }
    if childYangName == "evpn-instances" {
        return &evpnTables.EvpnInstances
    }
    if childYangName == "evpn-logging" {
        return &evpnTables.EvpnLogging
    }
    if childYangName == "evpn-interfaces" {
        return &evpnTables.EvpnInterfaces
    }
    if childYangName == "evpn-virtual-access-pws" {
        return &evpnTables.EvpnVirtualAccessPws
    }
    if childYangName == "evpn-ethernet-segment" {
        return &evpnTables.EvpnEthernetSegment
    }
    return nil
}

func (evpnTables *Evpn_EvpnTables) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-timers"] = &evpnTables.EvpnTimers
    children["evpnmac"] = &evpnTables.Evpnmac
    children["evpnevis"] = &evpnTables.Evpnevis
    children["evpn-virtual-access-vfis"] = &evpnTables.EvpnVirtualAccessVfis
    children["evpn-load-balancing"] = &evpnTables.EvpnLoadBalancing
    children["evpn-bgp-auto-discovery"] = &evpnTables.EvpnBgpAutoDiscovery
    children["evpn-instances"] = &evpnTables.EvpnInstances
    children["evpn-logging"] = &evpnTables.EvpnLogging
    children["evpn-interfaces"] = &evpnTables.EvpnInterfaces
    children["evpn-virtual-access-pws"] = &evpnTables.EvpnVirtualAccessPws
    children["evpn-ethernet-segment"] = &evpnTables.EvpnEthernetSegment
    return children
}

func (evpnTables *Evpn_EvpnTables) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evi-cost-out"] = evpnTables.EviCostOut
    leafs["evpn-source-interface"] = evpnTables.EvpnSourceInterface
    leafs["evpn-cost-in-startup"] = evpnTables.EvpnCostInStartup
    return leafs
}

func (evpnTables *Evpn_EvpnTables) GetBundleName() string { return "cisco_ios_xr" }

func (evpnTables *Evpn_EvpnTables) GetYangName() string { return "evpn-tables" }

func (evpnTables *Evpn_EvpnTables) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnTables *Evpn_EvpnTables) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnTables *Evpn_EvpnTables) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnTables *Evpn_EvpnTables) SetParent(parent types.Entity) { evpnTables.parent = parent }

func (evpnTables *Evpn_EvpnTables) GetParent() types.Entity { return evpnTables.parent }

func (evpnTables *Evpn_EvpnTables) GetParentYangName() string { return "evpn" }

// Evpn_EvpnTables_EvpnTimers
// Enter EVPN timers configuration submode
type Evpn_EvpnTables_EvpnTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global Recovery timer. The type is interface{} with range: 20..3600. The
    // default value is 30.
    EvpnRecovery interface{}

    // Enable EVPN timers. The type is interface{}.
    Enable interface{}

    // Global Peering timer. The type is interface{} with range: 0..300. The
    // default value is 3.
    EvpnPeering interface{}
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetFilter() yfilter.YFilter { return evpnTimers.YFilter }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) SetFilter(yf yfilter.YFilter) { evpnTimers.YFilter = yf }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetGoName(yname string) string {
    if yname == "evpn-recovery" { return "EvpnRecovery" }
    if yname == "enable" { return "Enable" }
    if yname == "evpn-peering" { return "EvpnPeering" }
    return ""
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetSegmentPath() string {
    return "evpn-timers"
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-recovery"] = evpnTimers.EvpnRecovery
    leafs["enable"] = evpnTimers.Enable
    leafs["evpn-peering"] = evpnTimers.EvpnPeering
    return leafs
}

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetBundleName() string { return "cisco_ios_xr" }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetYangName() string { return "evpn-timers" }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) SetParent(parent types.Entity) { evpnTimers.parent = parent }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetParent() types.Entity { return evpnTimers.parent }

func (evpnTimers *Evpn_EvpnTables_EvpnTimers) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_Evpnmac
// EVPN MAC Configuration
type Evpn_EvpnTables_Evpnmac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable EVPN MAC Configuration. The type is interface{}.
    Enable interface{}

    // EVPN MAC Secure Configuration.
    EvpnmacSecure Evpn_EvpnTables_Evpnmac_EvpnmacSecure
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetFilter() yfilter.YFilter { return evpnmac.YFilter }

func (evpnmac *Evpn_EvpnTables_Evpnmac) SetFilter(yf yfilter.YFilter) { evpnmac.YFilter = yf }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evpnmac-secure" { return "EvpnmacSecure" }
    return ""
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetSegmentPath() string {
    return "evpnmac"
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpnmac-secure" {
        return &evpnmac.EvpnmacSecure
    }
    return nil
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpnmac-secure"] = &evpnmac.EvpnmacSecure
    return children
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnmac.Enable
    return leafs
}

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetBundleName() string { return "cisco_ios_xr" }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetYangName() string { return "evpnmac" }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnmac *Evpn_EvpnTables_Evpnmac) SetParent(parent types.Entity) { evpnmac.parent = parent }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetParent() types.Entity { return evpnmac.parent }

func (evpnmac *Evpn_EvpnTables_Evpnmac) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_Evpnmac_EvpnmacSecure
// EVPN MAC Secure Configuration
type Evpn_EvpnTables_Evpnmac_EvpnmacSecure struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Length of time to lock the MAC after a MAC security violation. The type is
    // interface{} with range: 5..3600.
    EvpnmacSecureFreezeTime interface{}

    // Enable EVPN MAC Secure Configuration. The type is interface{}.
    Enable interface{}

    // Number of times to unfreeze a MAC before permanently freezing it. The type
    // is interface{} with range: 0..1000.
    EvpnmacSecureRetryCount interface{}

    // Number of moves to occur within the move interval before locking the MAC.
    // The type is interface{} with range: 1..1000.
    EvpnmacSecureMoveCount interface{}

    // Interval to watch for subsequent MAC moves before locking the MAC. The type
    // is interface{} with range: 5..3600.
    EvpnmacSecureMoveInterval interface{}
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetFilter() yfilter.YFilter { return evpnmacSecure.YFilter }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) SetFilter(yf yfilter.YFilter) { evpnmacSecure.YFilter = yf }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetGoName(yname string) string {
    if yname == "evpnmac-secure-freeze-time" { return "EvpnmacSecureFreezeTime" }
    if yname == "enable" { return "Enable" }
    if yname == "evpnmac-secure-retry-count" { return "EvpnmacSecureRetryCount" }
    if yname == "evpnmac-secure-move-count" { return "EvpnmacSecureMoveCount" }
    if yname == "evpnmac-secure-move-interval" { return "EvpnmacSecureMoveInterval" }
    return ""
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetSegmentPath() string {
    return "evpnmac-secure"
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpnmac-secure-freeze-time"] = evpnmacSecure.EvpnmacSecureFreezeTime
    leafs["enable"] = evpnmacSecure.Enable
    leafs["evpnmac-secure-retry-count"] = evpnmacSecure.EvpnmacSecureRetryCount
    leafs["evpnmac-secure-move-count"] = evpnmacSecure.EvpnmacSecureMoveCount
    leafs["evpnmac-secure-move-interval"] = evpnmacSecure.EvpnmacSecureMoveInterval
    return leafs
}

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetBundleName() string { return "cisco_ios_xr" }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetYangName() string { return "evpnmac-secure" }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) SetParent(parent types.Entity) { evpnmacSecure.parent = parent }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetParent() types.Entity { return evpnmacSecure.parent }

func (evpnmacSecure *Evpn_EvpnTables_Evpnmac_EvpnmacSecure) GetParentYangName() string { return "evpnmac" }

// Evpn_EvpnTables_Evpnevis
// Enter EVPN Instance configuration submode
type Evpn_EvpnTables_Evpnevis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter EVPN Instance configuration submode. The type is slice of
    // Evpn_EvpnTables_Evpnevis_Evpnevi.
    Evpnevi []Evpn_EvpnTables_Evpnevis_Evpnevi
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetFilter() yfilter.YFilter { return evpnevis.YFilter }

func (evpnevis *Evpn_EvpnTables_Evpnevis) SetFilter(yf yfilter.YFilter) { evpnevis.YFilter = yf }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetGoName(yname string) string {
    if yname == "evpnevi" { return "Evpnevi" }
    return ""
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetSegmentPath() string {
    return "evpnevis"
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpnevi" {
        for _, c := range evpnevis.Evpnevi {
            if evpnevis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_Evpnevis_Evpnevi{}
        evpnevis.Evpnevi = append(evpnevis.Evpnevi, child)
        return &evpnevis.Evpnevi[len(evpnevis.Evpnevi)-1]
    }
    return nil
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnevis.Evpnevi {
        children[evpnevis.Evpnevi[i].GetSegmentPath()] = &evpnevis.Evpnevi[i]
    }
    return children
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetBundleName() string { return "cisco_ios_xr" }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetYangName() string { return "evpnevis" }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnevis *Evpn_EvpnTables_Evpnevis) SetParent(parent types.Entity) { evpnevis.parent = parent }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetParent() types.Entity { return evpnevis.parent }

func (evpnevis *Evpn_EvpnTables_Evpnevis) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_Evpnevis_Evpnevi
// Enter EVPN Instance configuration submode
type Evpn_EvpnTables_Evpnevis_Evpnevi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. EVI ID. The type is interface{} with range:
    // 1..65534.
    Eviid interface{}

    // Disable route re-origination. The type is interface{}.
    EviReorigDisable interface{}

    // DEPRECATED: Advertise local MAC-only and BVI MAC routes. The type is
    // interface{}.
    EviAdvertiseMacDeprecated interface{}

    // EVPN Instance description. The type is string with length: 1..64.
    EvpneviDescription interface{}

    // Disable Unknown Unicast Flooding on this EVI. The type is interface{}.
    EviUnknownUnicastFloodingDisable interface{}

    // CW disable for EVPN EVI. The type is interface{}.
    EvpnEviCwDisable interface{}

    // Enter Loadbalancing configuration submode.
    EviLoadBalancing Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing

    // Enable Autodiscovery BGP in EVPN Instance.
    EvpnevIbgpAutoDiscovery Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery

    // Enter Advertise local MAC-only routes configuration submode.
    EviAdvertiseMac Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetFilter() yfilter.YFilter { return evpnevi.YFilter }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) SetFilter(yf yfilter.YFilter) { evpnevi.YFilter = yf }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "evi-reorig-disable" { return "EviReorigDisable" }
    if yname == "evi-advertise-mac-deprecated" { return "EviAdvertiseMacDeprecated" }
    if yname == "evpnevi-description" { return "EvpneviDescription" }
    if yname == "evi-unknown-unicast-flooding-disable" { return "EviUnknownUnicastFloodingDisable" }
    if yname == "evpn-evi-cw-disable" { return "EvpnEviCwDisable" }
    if yname == "evi-load-balancing" { return "EviLoadBalancing" }
    if yname == "evpnev-ibgp-auto-discovery" { return "EvpnevIbgpAutoDiscovery" }
    if yname == "evi-advertise-mac" { return "EviAdvertiseMac" }
    return ""
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetSegmentPath() string {
    return "evpnevi" + "[eviid='" + fmt.Sprintf("%v", evpnevi.Eviid) + "']"
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evi-load-balancing" {
        return &evpnevi.EviLoadBalancing
    }
    if childYangName == "evpnev-ibgp-auto-discovery" {
        return &evpnevi.EvpnevIbgpAutoDiscovery
    }
    if childYangName == "evi-advertise-mac" {
        return &evpnevi.EviAdvertiseMac
    }
    return nil
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evi-load-balancing"] = &evpnevi.EviLoadBalancing
    children["evpnev-ibgp-auto-discovery"] = &evpnevi.EvpnevIbgpAutoDiscovery
    children["evi-advertise-mac"] = &evpnevi.EviAdvertiseMac
    return children
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = evpnevi.Eviid
    leafs["evi-reorig-disable"] = evpnevi.EviReorigDisable
    leafs["evi-advertise-mac-deprecated"] = evpnevi.EviAdvertiseMacDeprecated
    leafs["evpnevi-description"] = evpnevi.EvpneviDescription
    leafs["evi-unknown-unicast-flooding-disable"] = evpnevi.EviUnknownUnicastFloodingDisable
    leafs["evpn-evi-cw-disable"] = evpnevi.EvpnEviCwDisable
    return leafs
}

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetBundleName() string { return "cisco_ios_xr" }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetYangName() string { return "evpnevi" }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) SetParent(parent types.Entity) { evpnevi.parent = parent }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetParent() types.Entity { return evpnevi.parent }

func (evpnevi *Evpn_EvpnTables_Evpnevis_Evpnevi) GetParentYangName() string { return "evpnevis" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing
// Enter Loadbalancing configuration submode
type Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Loadbalancing. The type is interface{}.
    Enable interface{}

    // Enable Flow Label based load balancing. The type is interface{}.
    EviFlowLabel interface{}
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetFilter() yfilter.YFilter { return eviLoadBalancing.YFilter }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) SetFilter(yf yfilter.YFilter) { eviLoadBalancing.YFilter = yf }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evi-flow-label" { return "EviFlowLabel" }
    return ""
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetSegmentPath() string {
    return "evi-load-balancing"
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = eviLoadBalancing.Enable
    leafs["evi-flow-label"] = eviLoadBalancing.EviFlowLabel
    return leafs
}

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetBundleName() string { return "cisco_ios_xr" }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetYangName() string { return "evi-load-balancing" }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) SetParent(parent types.Entity) { eviLoadBalancing.parent = parent }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetParent() types.Entity { return eviLoadBalancing.parent }

func (eviLoadBalancing *Evpn_EvpnTables_Evpnevis_Evpnevi_EviLoadBalancing) GetParentYangName() string { return "evpnevi" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery
// Enable Autodiscovery BGP in EVPN Instance
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Autodiscovery BGP. The type is interface{}.
    Enable interface{}

    // Table Policy for installation of forwarding data to L2FIB. The type is
    // string.
    TablePolicy interface{}

    // Route Distinguisher.
    EvpnRouteDistinguisher Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher

    // Route Target.
    EvpnRouteTargets Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetFilter() yfilter.YFilter { return evpnevIbgpAutoDiscovery.YFilter }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) SetFilter(yf yfilter.YFilter) { evpnevIbgpAutoDiscovery.YFilter = yf }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "evpn-route-distinguisher" { return "EvpnRouteDistinguisher" }
    if yname == "evpn-route-targets" { return "EvpnRouteTargets" }
    return ""
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetSegmentPath() string {
    return "evpnev-ibgp-auto-discovery"
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-distinguisher" {
        return &evpnevIbgpAutoDiscovery.EvpnRouteDistinguisher
    }
    if childYangName == "evpn-route-targets" {
        return &evpnevIbgpAutoDiscovery.EvpnRouteTargets
    }
    return nil
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-route-distinguisher"] = &evpnevIbgpAutoDiscovery.EvpnRouteDistinguisher
    children["evpn-route-targets"] = &evpnevIbgpAutoDiscovery.EvpnRouteTargets
    return children
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnevIbgpAutoDiscovery.Enable
    leafs["table-policy"] = evpnevIbgpAutoDiscovery.TablePolicy
    return leafs
}

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetYangName() string { return "evpnev-ibgp-auto-discovery" }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) SetParent(parent types.Entity) { evpnevIbgpAutoDiscovery.parent = parent }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetParent() types.Entity { return evpnevIbgpAutoDiscovery.parent }

func (evpnevIbgpAutoDiscovery *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery) GetParentYangName() string { return "evpnevi" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher
// Route Distinguisher
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router Distinguisher Type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetFilter() yfilter.YFilter { return evpnRouteDistinguisher.YFilter }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) SetFilter(yf yfilter.YFilter) { evpnRouteDistinguisher.YFilter = yf }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetSegmentPath() string {
    return "evpn-route-distinguisher"
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = evpnRouteDistinguisher.Type
    leafs["as"] = evpnRouteDistinguisher.As
    leafs["as-index"] = evpnRouteDistinguisher.AsIndex
    leafs["address"] = evpnRouteDistinguisher.Address
    leafs["addr-index"] = evpnRouteDistinguisher.AddrIndex
    return leafs
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetYangName() string { return "evpn-route-distinguisher" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) SetParent(parent types.Entity) { evpnRouteDistinguisher.parent = parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetParent() types.Entity { return evpnRouteDistinguisher.parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteDistinguisher) GetParentYangName() string { return "evpnev-ibgp-auto-discovery" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets
// Route Target
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs.
    EvpnRouteTargetAs []Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone.
    EvpnRouteTargetNone []Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address.
    EvpnRouteTargetIpv4Address []Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetFilter() yfilter.YFilter { return evpnRouteTargets.YFilter }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) SetFilter(yf yfilter.YFilter) { evpnRouteTargets.YFilter = yf }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetGoName(yname string) string {
    if yname == "evpn-route-target-as" { return "EvpnRouteTargetAs" }
    if yname == "evpn-route-target-none" { return "EvpnRouteTargetNone" }
    if yname == "evpn-route-target-ipv4-address" { return "EvpnRouteTargetIpv4Address" }
    return ""
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetSegmentPath() string {
    return "evpn-route-targets"
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-target-as" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetAs {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs{}
        evpnRouteTargets.EvpnRouteTargetAs = append(evpnRouteTargets.EvpnRouteTargetAs, child)
        return &evpnRouteTargets.EvpnRouteTargetAs[len(evpnRouteTargets.EvpnRouteTargetAs)-1]
    }
    if childYangName == "evpn-route-target-none" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetNone {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone{}
        evpnRouteTargets.EvpnRouteTargetNone = append(evpnRouteTargets.EvpnRouteTargetNone, child)
        return &evpnRouteTargets.EvpnRouteTargetNone[len(evpnRouteTargets.EvpnRouteTargetNone)-1]
    }
    if childYangName == "evpn-route-target-ipv4-address" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetIpv4Address {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address{}
        evpnRouteTargets.EvpnRouteTargetIpv4Address = append(evpnRouteTargets.EvpnRouteTargetIpv4Address, child)
        return &evpnRouteTargets.EvpnRouteTargetIpv4Address[len(evpnRouteTargets.EvpnRouteTargetIpv4Address)-1]
    }
    return nil
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnRouteTargets.EvpnRouteTargetAs {
        children[evpnRouteTargets.EvpnRouteTargetAs[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetAs[i]
    }
    for i := range evpnRouteTargets.EvpnRouteTargetNone {
        children[evpnRouteTargets.EvpnRouteTargetNone[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetNone[i]
    }
    for i := range evpnRouteTargets.EvpnRouteTargetIpv4Address {
        children[evpnRouteTargets.EvpnRouteTargetIpv4Address[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetIpv4Address[i]
    }
    return children
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetYangName() string { return "evpn-route-targets" }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) SetParent(parent types.Entity) { evpnRouteTargets.parent = parent }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetParent() types.Entity { return evpnRouteTargets.parent }

func (evpnRouteTargets *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets) GetParentYangName() string { return "evpnev-ibgp-auto-discovery" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs
// Name of the Route Target
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. Two byte or 4 byte AS number. The type is
    // interface{} with range: 1..4294967295.
    As interface{}

    // This attribute is a key. AS:nn (hex or decimal format). The type is
    // interface{} with range: 0..4294967295.
    AsIndex interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetFilter() yfilter.YFilter { return evpnRouteTargetAs.YFilter }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) SetFilter(yf yfilter.YFilter) { evpnRouteTargetAs.YFilter = yf }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetSegmentPath() string {
    return "evpn-route-target-as" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetAs.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetAs.Role) + "']" + "[as='" + fmt.Sprintf("%v", evpnRouteTargetAs.As) + "']" + "[as-index='" + fmt.Sprintf("%v", evpnRouteTargetAs.AsIndex) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetAs.Stitching) + "']"
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetAs.Format
    leafs["role"] = evpnRouteTargetAs.Role
    leafs["as"] = evpnRouteTargetAs.As
    leafs["as-index"] = evpnRouteTargetAs.AsIndex
    leafs["stitching"] = evpnRouteTargetAs.Stitching
    return leafs
}

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetYangName() string { return "evpn-route-target-as" }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) SetParent(parent types.Entity) { evpnRouteTargetAs.parent = parent }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetParent() types.Entity { return evpnRouteTargetAs.parent }

func (evpnRouteTargetAs *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone
// Name of the Route Target
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetFilter() yfilter.YFilter { return evpnRouteTargetNone.YFilter }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) SetFilter(yf yfilter.YFilter) { evpnRouteTargetNone.YFilter = yf }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetSegmentPath() string {
    return "evpn-route-target-none" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetNone.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetNone.Role) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetNone.Stitching) + "']"
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetNone.Format
    leafs["role"] = evpnRouteTargetNone.Role
    leafs["stitching"] = evpnRouteTargetNone.Stitching
    return leafs
}

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetYangName() string { return "evpn-route-target-none" }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) SetParent(parent types.Entity) { evpnRouteTargetNone.parent = parent }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetParent() types.Entity { return evpnRouteTargetNone.parent }

func (evpnRouteTargetNone *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address
// Name of the Route Target
type Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. Addr index. The type is interface{} with range:
    // 0..65535.
    AddrIndex interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetFilter() yfilter.YFilter { return evpnRouteTargetIpv4Address.YFilter }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) SetFilter(yf yfilter.YFilter) { evpnRouteTargetIpv4Address.YFilter = yf }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetSegmentPath() string {
    return "evpn-route-target-ipv4-address" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Role) + "']" + "[address='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Address) + "']" + "[addr-index='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.AddrIndex) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Stitching) + "']"
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetIpv4Address.Format
    leafs["role"] = evpnRouteTargetIpv4Address.Role
    leafs["address"] = evpnRouteTargetIpv4Address.Address
    leafs["addr-index"] = evpnRouteTargetIpv4Address.AddrIndex
    leafs["stitching"] = evpnRouteTargetIpv4Address.Stitching
    return leafs
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetYangName() string { return "evpn-route-target-ipv4-address" }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) SetParent(parent types.Entity) { evpnRouteTargetIpv4Address.parent = parent }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetParent() types.Entity { return evpnRouteTargetIpv4Address.parent }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_Evpnevis_Evpnevi_EvpnevIbgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac
// Enter Advertise local MAC-only routes
// configuration submode
type Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Advertise local MAC-only routes. The type is interface{}.
    Enable interface{}

    // Advertise local MAC-only and BVI MAC routes. The type is interface{}.
    EviAdvertiseMacBvi interface{}
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetFilter() yfilter.YFilter { return eviAdvertiseMac.YFilter }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) SetFilter(yf yfilter.YFilter) { eviAdvertiseMac.YFilter = yf }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evi-advertise-mac-bvi" { return "EviAdvertiseMacBvi" }
    return ""
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetSegmentPath() string {
    return "evi-advertise-mac"
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = eviAdvertiseMac.Enable
    leafs["evi-advertise-mac-bvi"] = eviAdvertiseMac.EviAdvertiseMacBvi
    return leafs
}

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetBundleName() string { return "cisco_ios_xr" }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetYangName() string { return "evi-advertise-mac" }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) SetParent(parent types.Entity) { eviAdvertiseMac.parent = parent }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetParent() types.Entity { return eviAdvertiseMac.parent }

func (eviAdvertiseMac *Evpn_EvpnTables_Evpnevis_Evpnevi_EviAdvertiseMac) GetParentYangName() string { return "evpnevi" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis
// Virtual Access VFI interfaces
type Evpn_EvpnTables_EvpnVirtualAccessVfis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Access VFI. The type is slice of
    // Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi.
    EvpnVirtualAccessVfi []Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetFilter() yfilter.YFilter { return evpnVirtualAccessVfis.YFilter }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessVfis.YFilter = yf }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetGoName(yname string) string {
    if yname == "evpn-virtual-access-vfi" { return "EvpnVirtualAccessVfi" }
    return ""
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetSegmentPath() string {
    return "evpn-virtual-access-vfis"
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-virtual-access-vfi" {
        for _, c := range evpnVirtualAccessVfis.EvpnVirtualAccessVfi {
            if evpnVirtualAccessVfis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi{}
        evpnVirtualAccessVfis.EvpnVirtualAccessVfi = append(evpnVirtualAccessVfis.EvpnVirtualAccessVfi, child)
        return &evpnVirtualAccessVfis.EvpnVirtualAccessVfi[len(evpnVirtualAccessVfis.EvpnVirtualAccessVfi)-1]
    }
    return nil
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnVirtualAccessVfis.EvpnVirtualAccessVfi {
        children[evpnVirtualAccessVfis.EvpnVirtualAccessVfi[i].GetSegmentPath()] = &evpnVirtualAccessVfis.EvpnVirtualAccessVfi[i]
    }
    return children
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetYangName() string { return "evpn-virtual-access-vfis" }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) SetParent(parent types.Entity) { evpnVirtualAccessVfis.parent = parent }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetParent() types.Entity { return evpnVirtualAccessVfis.parent }

func (evpnVirtualAccessVfis *Evpn_EvpnTables_EvpnVirtualAccessVfis) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi
// Virtual Access VFI
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the Virtual Access VFI. The type is string
    // with length: 1..32.
    Name interface{}

    // Enter Virtual Forwarding Interface timers configuration submode.
    EvpnVirtualAccessVfiTimers Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers

    // Enter Ethernet Segment configuration submode.
    EvpnVirtualEthernetSegment Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetFilter() yfilter.YFilter { return evpnVirtualAccessVfi.YFilter }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessVfi.YFilter = yf }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "evpn-virtual-access-vfi-timers" { return "EvpnVirtualAccessVfiTimers" }
    if yname == "evpn-virtual-ethernet-segment" { return "EvpnVirtualEthernetSegment" }
    return ""
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetSegmentPath() string {
    return "evpn-virtual-access-vfi" + "[name='" + fmt.Sprintf("%v", evpnVirtualAccessVfi.Name) + "']"
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-virtual-access-vfi-timers" {
        return &evpnVirtualAccessVfi.EvpnVirtualAccessVfiTimers
    }
    if childYangName == "evpn-virtual-ethernet-segment" {
        return &evpnVirtualAccessVfi.EvpnVirtualEthernetSegment
    }
    return nil
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-virtual-access-vfi-timers"] = &evpnVirtualAccessVfi.EvpnVirtualAccessVfiTimers
    children["evpn-virtual-ethernet-segment"] = &evpnVirtualAccessVfi.EvpnVirtualEthernetSegment
    return children
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = evpnVirtualAccessVfi.Name
    return leafs
}

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetYangName() string { return "evpn-virtual-access-vfi" }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) SetParent(parent types.Entity) { evpnVirtualAccessVfi.parent = parent }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetParent() types.Entity { return evpnVirtualAccessVfi.parent }

func (evpnVirtualAccessVfi *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi) GetParentYangName() string { return "evpn-virtual-access-vfis" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers
// Enter Virtual Forwarding Interface timers
// configuration submode
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Forwarding Interface-specific Recovery timer. The type is
    // interface{} with range: 20..3600. The default value is 30.
    EvpnVirtualAccessVfiRecovery interface{}

    // Virtual Forwarding Interface-specific Peering timer. The type is
    // interface{} with range: 0..300. The default value is 3.
    EvpnVirtualAccessVfiPeering interface{}

    // Enable Virtual Forwarding Interface timers. The type is interface{}.
    Enable interface{}
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetFilter() yfilter.YFilter { return evpnVirtualAccessVfiTimers.YFilter }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessVfiTimers.YFilter = yf }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetGoName(yname string) string {
    if yname == "evpn-virtual-access-vfi-recovery" { return "EvpnVirtualAccessVfiRecovery" }
    if yname == "evpn-virtual-access-vfi-peering" { return "EvpnVirtualAccessVfiPeering" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetSegmentPath() string {
    return "evpn-virtual-access-vfi-timers"
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-virtual-access-vfi-recovery"] = evpnVirtualAccessVfiTimers.EvpnVirtualAccessVfiRecovery
    leafs["evpn-virtual-access-vfi-peering"] = evpnVirtualAccessVfiTimers.EvpnVirtualAccessVfiPeering
    leafs["enable"] = evpnVirtualAccessVfiTimers.Enable
    return leafs
}

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetYangName() string { return "evpn-virtual-access-vfi-timers" }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) SetParent(parent types.Entity) { evpnVirtualAccessVfiTimers.parent = parent }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetParent() types.Entity { return evpnVirtualAccessVfiTimers.parent }

func (evpnVirtualAccessVfiTimers *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualAccessVfiTimers) GetParentYangName() string { return "evpn-virtual-access-vfi" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment
// Enter Ethernet Segment configuration submode
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Ethernet Segment. The type is interface{}.
    Enable interface{}

    // ES-Import Route Target. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    EsImportRouteTarget interface{}

    // Ethernet segment identifier.
    Identifier Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier

    // Enter Manual service carving configuration submode.
    ManualServiceCarving Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetFilter() yfilter.YFilter { return evpnVirtualEthernetSegment.YFilter }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) SetFilter(yf yfilter.YFilter) { evpnVirtualEthernetSegment.YFilter = yf }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "es-import-route-target" { return "EsImportRouteTarget" }
    if yname == "identifier" { return "Identifier" }
    if yname == "manual-service-carving" { return "ManualServiceCarving" }
    return ""
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetSegmentPath() string {
    return "evpn-virtual-ethernet-segment"
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "identifier" {
        return &evpnVirtualEthernetSegment.Identifier
    }
    if childYangName == "manual-service-carving" {
        return &evpnVirtualEthernetSegment.ManualServiceCarving
    }
    return nil
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["identifier"] = &evpnVirtualEthernetSegment.Identifier
    children["manual-service-carving"] = &evpnVirtualEthernetSegment.ManualServiceCarving
    return children
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnVirtualEthernetSegment.Enable
    leafs["es-import-route-target"] = evpnVirtualEthernetSegment.EsImportRouteTarget
    return leafs
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetYangName() string { return "evpn-virtual-ethernet-segment" }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) SetParent(parent types.Entity) { evpnVirtualEthernetSegment.parent = parent }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetParent() types.Entity { return evpnVirtualEthernetSegment.parent }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment) GetParentYangName() string { return "evpn-virtual-access-vfi" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier
// Ethernet segment identifier
// This type is a presence type.
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type 0's 1st Byte or Type Byte and 1st Byte. The type is string with
    // pattern: [0-9a-fA-F]{1,8}. This attribute is mandatory.
    Bytes01 interface{}

    // 2nd and 3rd Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes23 interface{}

    // 4th and 5th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes45 interface{}

    // 6th and 7th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes67 interface{}

    // 8th and 9th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes89 interface{}

    // Ethernet segment identifier type. The type is EthernetSegmentIdentifier.
    // This attribute is mandatory.
    Type interface{}
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetFilter() yfilter.YFilter { return identifier.YFilter }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) SetFilter(yf yfilter.YFilter) { identifier.YFilter = yf }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetGoName(yname string) string {
    if yname == "bytes01" { return "Bytes01" }
    if yname == "bytes23" { return "Bytes23" }
    if yname == "bytes45" { return "Bytes45" }
    if yname == "bytes67" { return "Bytes67" }
    if yname == "bytes89" { return "Bytes89" }
    if yname == "type" { return "Type" }
    return ""
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetSegmentPath() string {
    return "identifier"
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bytes01"] = identifier.Bytes01
    leafs["bytes23"] = identifier.Bytes23
    leafs["bytes45"] = identifier.Bytes45
    leafs["bytes67"] = identifier.Bytes67
    leafs["bytes89"] = identifier.Bytes89
    leafs["type"] = identifier.Type
    return leafs
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetBundleName() string { return "cisco_ios_xr" }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetYangName() string { return "identifier" }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) SetParent(parent types.Entity) { identifier.parent = parent }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetParent() types.Entity { return identifier.parent }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_Identifier) GetParentYangName() string { return "evpn-virtual-ethernet-segment" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving
// Enter Manual service carving configuration
// submode
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Manual service carving. The type is interface{}.
    Enable interface{}

    // Manual service carving primary,secondary lists.
    ServiceList Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetFilter() yfilter.YFilter { return manualServiceCarving.YFilter }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) SetFilter(yf yfilter.YFilter) { manualServiceCarving.YFilter = yf }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "service-list" { return "ServiceList" }
    return ""
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetSegmentPath() string {
    return "manual-service-carving"
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-list" {
        return &manualServiceCarving.ServiceList
    }
    return nil
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["service-list"] = &manualServiceCarving.ServiceList
    return children
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = manualServiceCarving.Enable
    return leafs
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetBundleName() string { return "cisco_ios_xr" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetYangName() string { return "manual-service-carving" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) SetParent(parent types.Entity) { manualServiceCarving.parent = parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetParent() types.Entity { return manualServiceCarving.parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving) GetParentYangName() string { return "evpn-virtual-ethernet-segment" }

// Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList
// Manual service carving primary,secondary lists
type Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary services list. The type is string with length: 1..150.
    Primary interface{}

    // Secondary services list. The type is string with length: 1..150.
    Secondary interface{}
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetFilter() yfilter.YFilter { return serviceList.YFilter }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) SetFilter(yf yfilter.YFilter) { serviceList.YFilter = yf }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetGoName(yname string) string {
    if yname == "primary" { return "Primary" }
    if yname == "secondary" { return "Secondary" }
    return ""
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetSegmentPath() string {
    return "service-list"
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["primary"] = serviceList.Primary
    leafs["secondary"] = serviceList.Secondary
    return leafs
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetBundleName() string { return "cisco_ios_xr" }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetYangName() string { return "service-list" }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) SetParent(parent types.Entity) { serviceList.parent = parent }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetParent() types.Entity { return serviceList.parent }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessVfis_EvpnVirtualAccessVfi_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetParentYangName() string { return "manual-service-carving" }

// Evpn_EvpnTables_EvpnLoadBalancing
// Enter EVPN Loadbalancing configuration submode
type Evpn_EvpnTables_EvpnLoadBalancing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Flow Label based load balancing. The type is interface{}.
    EvpnFlowLabel interface{}

    // Enable EVPN Loadbalancing. The type is interface{}.
    Enable interface{}
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetFilter() yfilter.YFilter { return evpnLoadBalancing.YFilter }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) SetFilter(yf yfilter.YFilter) { evpnLoadBalancing.YFilter = yf }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetGoName(yname string) string {
    if yname == "evpn-flow-label" { return "EvpnFlowLabel" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetSegmentPath() string {
    return "evpn-load-balancing"
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-flow-label"] = evpnLoadBalancing.EvpnFlowLabel
    leafs["enable"] = evpnLoadBalancing.Enable
    return leafs
}

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetBundleName() string { return "cisco_ios_xr" }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetYangName() string { return "evpn-load-balancing" }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) SetParent(parent types.Entity) { evpnLoadBalancing.parent = parent }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetParent() types.Entity { return evpnLoadBalancing.parent }

func (evpnLoadBalancing *Evpn_EvpnTables_EvpnLoadBalancing) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnBgpAutoDiscovery
// Enable Autodiscovery BGP in EVPN
type Evpn_EvpnTables_EvpnBgpAutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Autodiscovery BGP. The type is interface{}.
    Enable interface{}

    // Route Distinguisher.
    EvpnRouteDistinguisher Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetFilter() yfilter.YFilter { return evpnBgpAutoDiscovery.YFilter }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) SetFilter(yf yfilter.YFilter) { evpnBgpAutoDiscovery.YFilter = yf }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evpn-route-distinguisher" { return "EvpnRouteDistinguisher" }
    return ""
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetSegmentPath() string {
    return "evpn-bgp-auto-discovery"
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-distinguisher" {
        return &evpnBgpAutoDiscovery.EvpnRouteDistinguisher
    }
    return nil
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-route-distinguisher"] = &evpnBgpAutoDiscovery.EvpnRouteDistinguisher
    return children
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnBgpAutoDiscovery.Enable
    return leafs
}

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetYangName() string { return "evpn-bgp-auto-discovery" }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) SetParent(parent types.Entity) { evpnBgpAutoDiscovery.parent = parent }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetParent() types.Entity { return evpnBgpAutoDiscovery.parent }

func (evpnBgpAutoDiscovery *Evpn_EvpnTables_EvpnBgpAutoDiscovery) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher
// Route Distinguisher
type Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router Distinguisher Type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetFilter() yfilter.YFilter { return evpnRouteDistinguisher.YFilter }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) SetFilter(yf yfilter.YFilter) { evpnRouteDistinguisher.YFilter = yf }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetSegmentPath() string {
    return "evpn-route-distinguisher"
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = evpnRouteDistinguisher.Type
    leafs["as"] = evpnRouteDistinguisher.As
    leafs["as-index"] = evpnRouteDistinguisher.AsIndex
    leafs["address"] = evpnRouteDistinguisher.Address
    leafs["addr-index"] = evpnRouteDistinguisher.AddrIndex
    return leafs
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetYangName() string { return "evpn-route-distinguisher" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) SetParent(parent types.Entity) { evpnRouteDistinguisher.parent = parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetParent() types.Entity { return evpnRouteDistinguisher.parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnBgpAutoDiscovery_EvpnRouteDistinguisher) GetParentYangName() string { return "evpn-bgp-auto-discovery" }

// Evpn_EvpnTables_EvpnInstances
// Enter EVPN Instance configuration submode
type Evpn_EvpnTables_EvpnInstances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter EVPN Instance configuration submode. The type is slice of
    // Evpn_EvpnTables_EvpnInstances_EvpnInstance.
    EvpnInstance []Evpn_EvpnTables_EvpnInstances_EvpnInstance
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetFilter() yfilter.YFilter { return evpnInstances.YFilter }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) SetFilter(yf yfilter.YFilter) { evpnInstances.YFilter = yf }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetGoName(yname string) string {
    if yname == "evpn-instance" { return "EvpnInstance" }
    return ""
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetSegmentPath() string {
    return "evpn-instances"
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-instance" {
        for _, c := range evpnInstances.EvpnInstance {
            if evpnInstances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnInstances_EvpnInstance{}
        evpnInstances.EvpnInstance = append(evpnInstances.EvpnInstance, child)
        return &evpnInstances.EvpnInstance[len(evpnInstances.EvpnInstance)-1]
    }
    return nil
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnInstances.EvpnInstance {
        children[evpnInstances.EvpnInstance[i].GetSegmentPath()] = &evpnInstances.EvpnInstance[i]
    }
    return children
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetYangName() string { return "evpn-instances" }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) SetParent(parent types.Entity) { evpnInstances.parent = parent }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetParent() types.Entity { return evpnInstances.parent }

func (evpnInstances *Evpn_EvpnTables_EvpnInstances) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance
// Enter EVPN Instance configuration submode
type Evpn_EvpnTables_EvpnInstances_EvpnInstance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. EVPN Instance ID. The type is interface{} with
    // range: 1..65534.
    Eviid interface{}

    // This attribute is a key. EVPN Instance Encapsulation. The type is
    // EvpnEncapsulation.
    Encapsulation interface{}

    // This attribute is a key. EVPN Instance Side. The type is EvpnSide.
    Side interface{}

    // Disable route re-origination. The type is interface{}.
    EviReorigDisable interface{}

    // DEPRECATED: Advertise local MAC-only and BVI MAC routes. The type is
    // interface{}.
    EviAdvertiseMacDeprecated interface{}

    // EVPN Instance description. The type is string with length: 1..64.
    EvpneviDescription interface{}

    // Disable Unknown Unicast Flooding on this EVI. The type is interface{}.
    EviUnknownUnicastFloodingDisable interface{}

    // CW disable for EVPN EVI. The type is interface{}.
    EvpnEviCwDisable interface{}

    // Enable Autodiscovery BGP in EVPN Instance.
    EvpnInstanceBgpAutoDiscovery Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery

    // Enter Advertise local MAC-only routes configuration submode.
    EvpnInstanceAdvertiseMac Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac

    // Enter Loadbalancing configuration submode.
    EvpnInstanceLoadBalancing Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetFilter() yfilter.YFilter { return evpnInstance.YFilter }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) SetFilter(yf yfilter.YFilter) { evpnInstance.YFilter = yf }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetGoName(yname string) string {
    if yname == "eviid" { return "Eviid" }
    if yname == "encapsulation" { return "Encapsulation" }
    if yname == "side" { return "Side" }
    if yname == "evi-reorig-disable" { return "EviReorigDisable" }
    if yname == "evi-advertise-mac-deprecated" { return "EviAdvertiseMacDeprecated" }
    if yname == "evpnevi-description" { return "EvpneviDescription" }
    if yname == "evi-unknown-unicast-flooding-disable" { return "EviUnknownUnicastFloodingDisable" }
    if yname == "evpn-evi-cw-disable" { return "EvpnEviCwDisable" }
    if yname == "evpn-instance-bgp-auto-discovery" { return "EvpnInstanceBgpAutoDiscovery" }
    if yname == "evpn-instance-advertise-mac" { return "EvpnInstanceAdvertiseMac" }
    if yname == "evpn-instance-load-balancing" { return "EvpnInstanceLoadBalancing" }
    return ""
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetSegmentPath() string {
    return "evpn-instance" + "[eviid='" + fmt.Sprintf("%v", evpnInstance.Eviid) + "']" + "[encapsulation='" + fmt.Sprintf("%v", evpnInstance.Encapsulation) + "']" + "[side='" + fmt.Sprintf("%v", evpnInstance.Side) + "']"
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-instance-bgp-auto-discovery" {
        return &evpnInstance.EvpnInstanceBgpAutoDiscovery
    }
    if childYangName == "evpn-instance-advertise-mac" {
        return &evpnInstance.EvpnInstanceAdvertiseMac
    }
    if childYangName == "evpn-instance-load-balancing" {
        return &evpnInstance.EvpnInstanceLoadBalancing
    }
    return nil
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-instance-bgp-auto-discovery"] = &evpnInstance.EvpnInstanceBgpAutoDiscovery
    children["evpn-instance-advertise-mac"] = &evpnInstance.EvpnInstanceAdvertiseMac
    children["evpn-instance-load-balancing"] = &evpnInstance.EvpnInstanceLoadBalancing
    return children
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["eviid"] = evpnInstance.Eviid
    leafs["encapsulation"] = evpnInstance.Encapsulation
    leafs["side"] = evpnInstance.Side
    leafs["evi-reorig-disable"] = evpnInstance.EviReorigDisable
    leafs["evi-advertise-mac-deprecated"] = evpnInstance.EviAdvertiseMacDeprecated
    leafs["evpnevi-description"] = evpnInstance.EvpneviDescription
    leafs["evi-unknown-unicast-flooding-disable"] = evpnInstance.EviUnknownUnicastFloodingDisable
    leafs["evpn-evi-cw-disable"] = evpnInstance.EvpnEviCwDisable
    return leafs
}

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetYangName() string { return "evpn-instance" }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) SetParent(parent types.Entity) { evpnInstance.parent = parent }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetParent() types.Entity { return evpnInstance.parent }

func (evpnInstance *Evpn_EvpnTables_EvpnInstances_EvpnInstance) GetParentYangName() string { return "evpn-instances" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery
// Enable Autodiscovery BGP in EVPN Instance
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Autodiscovery BGP. The type is interface{}.
    Enable interface{}

    // Table Policy for installation of forwarding data to L2FIB. The type is
    // string.
    TablePolicy interface{}

    // Route Distinguisher.
    EvpnRouteDistinguisher Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher

    // Route Target.
    EvpnRouteTargets Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetFilter() yfilter.YFilter { return evpnInstanceBgpAutoDiscovery.YFilter }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) SetFilter(yf yfilter.YFilter) { evpnInstanceBgpAutoDiscovery.YFilter = yf }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "evpn-route-distinguisher" { return "EvpnRouteDistinguisher" }
    if yname == "evpn-route-targets" { return "EvpnRouteTargets" }
    return ""
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetSegmentPath() string {
    return "evpn-instance-bgp-auto-discovery"
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-distinguisher" {
        return &evpnInstanceBgpAutoDiscovery.EvpnRouteDistinguisher
    }
    if childYangName == "evpn-route-targets" {
        return &evpnInstanceBgpAutoDiscovery.EvpnRouteTargets
    }
    return nil
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-route-distinguisher"] = &evpnInstanceBgpAutoDiscovery.EvpnRouteDistinguisher
    children["evpn-route-targets"] = &evpnInstanceBgpAutoDiscovery.EvpnRouteTargets
    return children
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnInstanceBgpAutoDiscovery.Enable
    leafs["table-policy"] = evpnInstanceBgpAutoDiscovery.TablePolicy
    return leafs
}

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetYangName() string { return "evpn-instance-bgp-auto-discovery" }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) SetParent(parent types.Entity) { evpnInstanceBgpAutoDiscovery.parent = parent }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetParent() types.Entity { return evpnInstanceBgpAutoDiscovery.parent }

func (evpnInstanceBgpAutoDiscovery *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery) GetParentYangName() string { return "evpn-instance" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher
// Route Distinguisher
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router Distinguisher Type. The type is BgpRouteDistinguisher.
    Type interface{}

    // Two byte or 4 byte AS number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}

    // AS:nn (hex or decimal format). The type is interface{} with range:
    // 0..4294967295.
    AsIndex interface{}

    // IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Addr index. The type is interface{} with range: 0..65535.
    AddrIndex interface{}
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetFilter() yfilter.YFilter { return evpnRouteDistinguisher.YFilter }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) SetFilter(yf yfilter.YFilter) { evpnRouteDistinguisher.YFilter = yf }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    return ""
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetSegmentPath() string {
    return "evpn-route-distinguisher"
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = evpnRouteDistinguisher.Type
    leafs["as"] = evpnRouteDistinguisher.As
    leafs["as-index"] = evpnRouteDistinguisher.AsIndex
    leafs["address"] = evpnRouteDistinguisher.Address
    leafs["addr-index"] = evpnRouteDistinguisher.AddrIndex
    return leafs
}

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetYangName() string { return "evpn-route-distinguisher" }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) SetParent(parent types.Entity) { evpnRouteDistinguisher.parent = parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetParent() types.Entity { return evpnRouteDistinguisher.parent }

func (evpnRouteDistinguisher *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteDistinguisher) GetParentYangName() string { return "evpn-instance-bgp-auto-discovery" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets
// Route Target
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs.
    EvpnRouteTargetAs []Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone.
    EvpnRouteTargetNone []Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone

    // Name of the Route Target. The type is slice of
    // Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address.
    EvpnRouteTargetIpv4Address []Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetFilter() yfilter.YFilter { return evpnRouteTargets.YFilter }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) SetFilter(yf yfilter.YFilter) { evpnRouteTargets.YFilter = yf }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetGoName(yname string) string {
    if yname == "evpn-route-target-as" { return "EvpnRouteTargetAs" }
    if yname == "evpn-route-target-none" { return "EvpnRouteTargetNone" }
    if yname == "evpn-route-target-ipv4-address" { return "EvpnRouteTargetIpv4Address" }
    return ""
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetSegmentPath() string {
    return "evpn-route-targets"
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-route-target-as" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetAs {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs{}
        evpnRouteTargets.EvpnRouteTargetAs = append(evpnRouteTargets.EvpnRouteTargetAs, child)
        return &evpnRouteTargets.EvpnRouteTargetAs[len(evpnRouteTargets.EvpnRouteTargetAs)-1]
    }
    if childYangName == "evpn-route-target-none" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetNone {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone{}
        evpnRouteTargets.EvpnRouteTargetNone = append(evpnRouteTargets.EvpnRouteTargetNone, child)
        return &evpnRouteTargets.EvpnRouteTargetNone[len(evpnRouteTargets.EvpnRouteTargetNone)-1]
    }
    if childYangName == "evpn-route-target-ipv4-address" {
        for _, c := range evpnRouteTargets.EvpnRouteTargetIpv4Address {
            if evpnRouteTargets.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address{}
        evpnRouteTargets.EvpnRouteTargetIpv4Address = append(evpnRouteTargets.EvpnRouteTargetIpv4Address, child)
        return &evpnRouteTargets.EvpnRouteTargetIpv4Address[len(evpnRouteTargets.EvpnRouteTargetIpv4Address)-1]
    }
    return nil
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnRouteTargets.EvpnRouteTargetAs {
        children[evpnRouteTargets.EvpnRouteTargetAs[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetAs[i]
    }
    for i := range evpnRouteTargets.EvpnRouteTargetNone {
        children[evpnRouteTargets.EvpnRouteTargetNone[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetNone[i]
    }
    for i := range evpnRouteTargets.EvpnRouteTargetIpv4Address {
        children[evpnRouteTargets.EvpnRouteTargetIpv4Address[i].GetSegmentPath()] = &evpnRouteTargets.EvpnRouteTargetIpv4Address[i]
    }
    return children
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetYangName() string { return "evpn-route-targets" }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) SetParent(parent types.Entity) { evpnRouteTargets.parent = parent }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetParent() types.Entity { return evpnRouteTargets.parent }

func (evpnRouteTargets *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets) GetParentYangName() string { return "evpn-instance-bgp-auto-discovery" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs
// Name of the Route Target
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. Two byte or 4 byte AS number. The type is
    // interface{} with range: 1..4294967295.
    As interface{}

    // This attribute is a key. AS:nn (hex or decimal format). The type is
    // interface{} with range: 0..4294967295.
    AsIndex interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetFilter() yfilter.YFilter { return evpnRouteTargetAs.YFilter }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) SetFilter(yf yfilter.YFilter) { evpnRouteTargetAs.YFilter = yf }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetSegmentPath() string {
    return "evpn-route-target-as" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetAs.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetAs.Role) + "']" + "[as='" + fmt.Sprintf("%v", evpnRouteTargetAs.As) + "']" + "[as-index='" + fmt.Sprintf("%v", evpnRouteTargetAs.AsIndex) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetAs.Stitching) + "']"
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetAs.Format
    leafs["role"] = evpnRouteTargetAs.Role
    leafs["as"] = evpnRouteTargetAs.As
    leafs["as-index"] = evpnRouteTargetAs.AsIndex
    leafs["stitching"] = evpnRouteTargetAs.Stitching
    return leafs
}

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetYangName() string { return "evpn-route-target-as" }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) SetParent(parent types.Entity) { evpnRouteTargetAs.parent = parent }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetParent() types.Entity { return evpnRouteTargetAs.parent }

func (evpnRouteTargetAs *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetAs) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone
// Name of the Route Target
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetFilter() yfilter.YFilter { return evpnRouteTargetNone.YFilter }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) SetFilter(yf yfilter.YFilter) { evpnRouteTargetNone.YFilter = yf }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetSegmentPath() string {
    return "evpn-route-target-none" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetNone.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetNone.Role) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetNone.Stitching) + "']"
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetNone.Format
    leafs["role"] = evpnRouteTargetNone.Role
    leafs["stitching"] = evpnRouteTargetNone.Stitching
    return leafs
}

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetYangName() string { return "evpn-route-target-none" }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) SetParent(parent types.Entity) { evpnRouteTargetNone.parent = parent }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetParent() types.Entity { return evpnRouteTargetNone.parent }

func (evpnRouteTargetNone *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetNone) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address
// Name of the Route Target
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Format of the route target. The type is
    // BgpRouteTargetFormat.
    Format interface{}

    // This attribute is a key. Role of the router target type. The type is
    // BgpRouteTargetRole.
    Role interface{}

    // This attribute is a key. IPV4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. Addr index. The type is interface{} with range:
    // 0..65535.
    AddrIndex interface{}

    // This attribute is a key. whether RT is Stitching RT. The type is
    // BgpRouteTarget.
    Stitching interface{}
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetFilter() yfilter.YFilter { return evpnRouteTargetIpv4Address.YFilter }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) SetFilter(yf yfilter.YFilter) { evpnRouteTargetIpv4Address.YFilter = yf }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetGoName(yname string) string {
    if yname == "format" { return "Format" }
    if yname == "role" { return "Role" }
    if yname == "address" { return "Address" }
    if yname == "addr-index" { return "AddrIndex" }
    if yname == "stitching" { return "Stitching" }
    return ""
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetSegmentPath() string {
    return "evpn-route-target-ipv4-address" + "[format='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Format) + "']" + "[role='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Role) + "']" + "[address='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Address) + "']" + "[addr-index='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.AddrIndex) + "']" + "[stitching='" + fmt.Sprintf("%v", evpnRouteTargetIpv4Address.Stitching) + "']"
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["format"] = evpnRouteTargetIpv4Address.Format
    leafs["role"] = evpnRouteTargetIpv4Address.Role
    leafs["address"] = evpnRouteTargetIpv4Address.Address
    leafs["addr-index"] = evpnRouteTargetIpv4Address.AddrIndex
    leafs["stitching"] = evpnRouteTargetIpv4Address.Stitching
    return leafs
}

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetYangName() string { return "evpn-route-target-ipv4-address" }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) SetParent(parent types.Entity) { evpnRouteTargetIpv4Address.parent = parent }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetParent() types.Entity { return evpnRouteTargetIpv4Address.parent }

func (evpnRouteTargetIpv4Address *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceBgpAutoDiscovery_EvpnRouteTargets_EvpnRouteTargetIpv4Address) GetParentYangName() string { return "evpn-route-targets" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac
// Enter Advertise local MAC-only routes
// configuration submode
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Advertise local MAC-only routes. The type is interface{}.
    Enable interface{}

    // Advertise local MAC-only and BVI MAC routes. The type is interface{}.
    EviAdvertiseMacBvi interface{}
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetFilter() yfilter.YFilter { return evpnInstanceAdvertiseMac.YFilter }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) SetFilter(yf yfilter.YFilter) { evpnInstanceAdvertiseMac.YFilter = yf }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evi-advertise-mac-bvi" { return "EviAdvertiseMacBvi" }
    return ""
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetSegmentPath() string {
    return "evpn-instance-advertise-mac"
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnInstanceAdvertiseMac.Enable
    leafs["evi-advertise-mac-bvi"] = evpnInstanceAdvertiseMac.EviAdvertiseMacBvi
    return leafs
}

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetYangName() string { return "evpn-instance-advertise-mac" }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) SetParent(parent types.Entity) { evpnInstanceAdvertiseMac.parent = parent }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetParent() types.Entity { return evpnInstanceAdvertiseMac.parent }

func (evpnInstanceAdvertiseMac *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceAdvertiseMac) GetParentYangName() string { return "evpn-instance" }

// Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing
// Enter Loadbalancing configuration submode
type Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Loadbalancing. The type is interface{}.
    Enable interface{}

    // Enable Flow Label based load balancing. The type is interface{}.
    EviFlowLabel interface{}
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetFilter() yfilter.YFilter { return evpnInstanceLoadBalancing.YFilter }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) SetFilter(yf yfilter.YFilter) { evpnInstanceLoadBalancing.YFilter = yf }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evi-flow-label" { return "EviFlowLabel" }
    return ""
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetSegmentPath() string {
    return "evpn-instance-load-balancing"
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnInstanceLoadBalancing.Enable
    leafs["evi-flow-label"] = evpnInstanceLoadBalancing.EviFlowLabel
    return leafs
}

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetYangName() string { return "evpn-instance-load-balancing" }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) SetParent(parent types.Entity) { evpnInstanceLoadBalancing.parent = parent }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetParent() types.Entity { return evpnInstanceLoadBalancing.parent }

func (evpnInstanceLoadBalancing *Evpn_EvpnTables_EvpnInstances_EvpnInstance_EvpnInstanceLoadBalancing) GetParentYangName() string { return "evpn-instance" }

// Evpn_EvpnTables_EvpnLogging
// Enter EVPN Logging configuration submode
type Evpn_EvpnTables_EvpnLogging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Designated Forwarder election logging. The type is interface{}.
    EvpnDfElection interface{}

    // Enable EVPN Logging. The type is interface{}.
    Enable interface{}
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetFilter() yfilter.YFilter { return evpnLogging.YFilter }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) SetFilter(yf yfilter.YFilter) { evpnLogging.YFilter = yf }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetGoName(yname string) string {
    if yname == "evpn-df-election" { return "EvpnDfElection" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetSegmentPath() string {
    return "evpn-logging"
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-df-election"] = evpnLogging.EvpnDfElection
    leafs["enable"] = evpnLogging.Enable
    return leafs
}

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetBundleName() string { return "cisco_ios_xr" }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetYangName() string { return "evpn-logging" }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) SetParent(parent types.Entity) { evpnLogging.parent = parent }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetParent() types.Entity { return evpnLogging.parent }

func (evpnLogging *Evpn_EvpnTables_EvpnLogging) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnInterfaces
// Attachment Circuit interfaces
type Evpn_EvpnTables_EvpnInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attachment circuit interface. The type is slice of
    // Evpn_EvpnTables_EvpnInterfaces_EvpnInterface.
    EvpnInterface []Evpn_EvpnTables_EvpnInterfaces_EvpnInterface
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetFilter() yfilter.YFilter { return evpnInterfaces.YFilter }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) SetFilter(yf yfilter.YFilter) { evpnInterfaces.YFilter = yf }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetGoName(yname string) string {
    if yname == "evpn-interface" { return "EvpnInterface" }
    return ""
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetSegmentPath() string {
    return "evpn-interfaces"
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-interface" {
        for _, c := range evpnInterfaces.EvpnInterface {
            if evpnInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnInterfaces_EvpnInterface{}
        evpnInterfaces.EvpnInterface = append(evpnInterfaces.EvpnInterface, child)
        return &evpnInterfaces.EvpnInterface[len(evpnInterfaces.EvpnInterface)-1]
    }
    return nil
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnInterfaces.EvpnInterface {
        children[evpnInterfaces.EvpnInterface[i].GetSegmentPath()] = &evpnInterfaces.EvpnInterface[i]
    }
    return children
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetYangName() string { return "evpn-interfaces" }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) SetParent(parent types.Entity) { evpnInterfaces.parent = parent }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetParent() types.Entity { return evpnInterfaces.parent }

func (evpnInterfaces *Evpn_EvpnTables_EvpnInterfaces) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface
// Attachment circuit interface
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of the attachment circuit interface. The type
    // is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable MVRP MAC Flush mode. The type is interface{}.
    MacFlush interface{}

    // Enter Interface-specific timers configuration submode.
    EvpnacTimers Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers

    // Enter Ethernet Segment configuration submode.
    EthernetSegment Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetFilter() yfilter.YFilter { return evpnInterface.YFilter }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) SetFilter(yf yfilter.YFilter) { evpnInterface.YFilter = yf }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "mac-flush" { return "MacFlush" }
    if yname == "evpnac-timers" { return "EvpnacTimers" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetSegmentPath() string {
    return "evpn-interface" + "[interface-name='" + fmt.Sprintf("%v", evpnInterface.InterfaceName) + "']"
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpnac-timers" {
        return &evpnInterface.EvpnacTimers
    }
    if childYangName == "ethernet-segment" {
        return &evpnInterface.EthernetSegment
    }
    return nil
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpnac-timers"] = &evpnInterface.EvpnacTimers
    children["ethernet-segment"] = &evpnInterface.EthernetSegment
    return children
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = evpnInterface.InterfaceName
    leafs["mac-flush"] = evpnInterface.MacFlush
    return leafs
}

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetBundleName() string { return "cisco_ios_xr" }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetYangName() string { return "evpn-interface" }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) SetParent(parent types.Entity) { evpnInterface.parent = parent }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetParent() types.Entity { return evpnInterface.parent }

func (evpnInterface *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface) GetParentYangName() string { return "evpn-interfaces" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers
// Enter Interface-specific timers configuration
// submode
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface-specific Peering timer. The type is interface{} with range:
    // 0..300. The default value is 3.
    EvpnacPeering interface{}

    // Enable Interface-specific timers. The type is interface{}.
    Enable interface{}

    // Interface-specific Recovery timer. The type is interface{} with range:
    // 20..3600. The default value is 30.
    EvpnacRecovery interface{}
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetFilter() yfilter.YFilter { return evpnacTimers.YFilter }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) SetFilter(yf yfilter.YFilter) { evpnacTimers.YFilter = yf }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetGoName(yname string) string {
    if yname == "evpnac-peering" { return "EvpnacPeering" }
    if yname == "enable" { return "Enable" }
    if yname == "evpnac-recovery" { return "EvpnacRecovery" }
    return ""
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetSegmentPath() string {
    return "evpnac-timers"
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpnac-peering"] = evpnacTimers.EvpnacPeering
    leafs["enable"] = evpnacTimers.Enable
    leafs["evpnac-recovery"] = evpnacTimers.EvpnacRecovery
    return leafs
}

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetBundleName() string { return "cisco_ios_xr" }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetYangName() string { return "evpnac-timers" }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) SetParent(parent types.Entity) { evpnacTimers.parent = parent }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetParent() types.Entity { return evpnacTimers.parent }

func (evpnacTimers *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EvpnacTimers) GetParentYangName() string { return "evpn-interface" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment
// Enter Ethernet Segment configuration submode
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Force ethernet segment to remain single-homed. The type is interface{}.
    ForceSingleHomed interface{}

    // Enable single-active load balancing mode. The type is interface{}.
    LoadBalancingSingleActive interface{}

    // Enable Ethernet Segment. The type is interface{}.
    Enable interface{}

    // Backbone Source MAC. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    BackboneSourceMac interface{}

    // ES-Import Route Target. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    EsImportRouteTarget interface{}

    // Ethernet segment identifier.
    Identifier Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier

    // Enter Manual service carving configuration submode.
    ManualServiceCarving Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetFilter() yfilter.YFilter { return ethernetSegment.YFilter }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) SetFilter(yf yfilter.YFilter) { ethernetSegment.YFilter = yf }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetGoName(yname string) string {
    if yname == "force-single-homed" { return "ForceSingleHomed" }
    if yname == "load-balancing-single-active" { return "LoadBalancingSingleActive" }
    if yname == "enable" { return "Enable" }
    if yname == "backbone-source-mac" { return "BackboneSourceMac" }
    if yname == "es-import-route-target" { return "EsImportRouteTarget" }
    if yname == "identifier" { return "Identifier" }
    if yname == "manual-service-carving" { return "ManualServiceCarving" }
    return ""
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetSegmentPath() string {
    return "ethernet-segment"
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "identifier" {
        return &ethernetSegment.Identifier
    }
    if childYangName == "manual-service-carving" {
        return &ethernetSegment.ManualServiceCarving
    }
    return nil
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["identifier"] = &ethernetSegment.Identifier
    children["manual-service-carving"] = &ethernetSegment.ManualServiceCarving
    return children
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["force-single-homed"] = ethernetSegment.ForceSingleHomed
    leafs["load-balancing-single-active"] = ethernetSegment.LoadBalancingSingleActive
    leafs["enable"] = ethernetSegment.Enable
    leafs["backbone-source-mac"] = ethernetSegment.BackboneSourceMac
    leafs["es-import-route-target"] = ethernetSegment.EsImportRouteTarget
    return leafs
}

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetBundleName() string { return "cisco_ios_xr" }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetYangName() string { return "ethernet-segment" }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) SetParent(parent types.Entity) { ethernetSegment.parent = parent }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetParent() types.Entity { return ethernetSegment.parent }

func (ethernetSegment *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment) GetParentYangName() string { return "evpn-interface" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier
// Ethernet segment identifier
// This type is a presence type.
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type 0's 1st Byte or Type Byte and 1st Byte. The type is string with
    // pattern: [0-9a-fA-F]{1,8}. This attribute is mandatory.
    Bytes01 interface{}

    // 2nd and 3rd Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes23 interface{}

    // 4th and 5th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes45 interface{}

    // 6th and 7th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes67 interface{}

    // 8th and 9th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes89 interface{}

    // Ethernet segment identifier type. The type is EthernetSegmentIdentifier.
    // This attribute is mandatory.
    Type interface{}
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetFilter() yfilter.YFilter { return identifier.YFilter }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) SetFilter(yf yfilter.YFilter) { identifier.YFilter = yf }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetGoName(yname string) string {
    if yname == "bytes01" { return "Bytes01" }
    if yname == "bytes23" { return "Bytes23" }
    if yname == "bytes45" { return "Bytes45" }
    if yname == "bytes67" { return "Bytes67" }
    if yname == "bytes89" { return "Bytes89" }
    if yname == "type" { return "Type" }
    return ""
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetSegmentPath() string {
    return "identifier"
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bytes01"] = identifier.Bytes01
    leafs["bytes23"] = identifier.Bytes23
    leafs["bytes45"] = identifier.Bytes45
    leafs["bytes67"] = identifier.Bytes67
    leafs["bytes89"] = identifier.Bytes89
    leafs["type"] = identifier.Type
    return leafs
}

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetBundleName() string { return "cisco_ios_xr" }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetYangName() string { return "identifier" }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) SetParent(parent types.Entity) { identifier.parent = parent }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetParent() types.Entity { return identifier.parent }

func (identifier *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_Identifier) GetParentYangName() string { return "ethernet-segment" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving
// Enter Manual service carving configuration
// submode
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Manual service carving. The type is interface{}.
    Enable interface{}

    // Manual service carving primary,secondary lists.
    ServiceList Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetFilter() yfilter.YFilter { return manualServiceCarving.YFilter }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) SetFilter(yf yfilter.YFilter) { manualServiceCarving.YFilter = yf }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "service-list" { return "ServiceList" }
    return ""
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetSegmentPath() string {
    return "manual-service-carving"
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-list" {
        return &manualServiceCarving.ServiceList
    }
    return nil
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["service-list"] = &manualServiceCarving.ServiceList
    return children
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = manualServiceCarving.Enable
    return leafs
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetBundleName() string { return "cisco_ios_xr" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetYangName() string { return "manual-service-carving" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) SetParent(parent types.Entity) { manualServiceCarving.parent = parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetParent() types.Entity { return manualServiceCarving.parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving) GetParentYangName() string { return "ethernet-segment" }

// Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList
// Manual service carving primary,secondary lists
type Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary services list. The type is string with length: 1..150.
    Primary interface{}

    // Secondary services list. The type is string with length: 1..150.
    Secondary interface{}
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetFilter() yfilter.YFilter { return serviceList.YFilter }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) SetFilter(yf yfilter.YFilter) { serviceList.YFilter = yf }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetGoName(yname string) string {
    if yname == "primary" { return "Primary" }
    if yname == "secondary" { return "Secondary" }
    return ""
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetSegmentPath() string {
    return "service-list"
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["primary"] = serviceList.Primary
    leafs["secondary"] = serviceList.Secondary
    return leafs
}

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetBundleName() string { return "cisco_ios_xr" }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetYangName() string { return "service-list" }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) SetParent(parent types.Entity) { serviceList.parent = parent }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetParent() types.Entity { return serviceList.parent }

func (serviceList *Evpn_EvpnTables_EvpnInterfaces_EvpnInterface_EthernetSegment_ManualServiceCarving_ServiceList) GetParentYangName() string { return "manual-service-carving" }

// Evpn_EvpnTables_EvpnVirtualAccessPws
// Virtual Access Pseudowire interfaces
type Evpn_EvpnTables_EvpnVirtualAccessPws struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Access Pseudowire. The type is slice of
    // Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw.
    EvpnVirtualAccessPw []Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetFilter() yfilter.YFilter { return evpnVirtualAccessPws.YFilter }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessPws.YFilter = yf }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetGoName(yname string) string {
    if yname == "evpn-virtual-access-pw" { return "EvpnVirtualAccessPw" }
    return ""
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetSegmentPath() string {
    return "evpn-virtual-access-pws"
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-virtual-access-pw" {
        for _, c := range evpnVirtualAccessPws.EvpnVirtualAccessPw {
            if evpnVirtualAccessPws.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw{}
        evpnVirtualAccessPws.EvpnVirtualAccessPw = append(evpnVirtualAccessPws.EvpnVirtualAccessPw, child)
        return &evpnVirtualAccessPws.EvpnVirtualAccessPw[len(evpnVirtualAccessPws.EvpnVirtualAccessPw)-1]
    }
    return nil
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnVirtualAccessPws.EvpnVirtualAccessPw {
        children[evpnVirtualAccessPws.EvpnVirtualAccessPw[i].GetSegmentPath()] = &evpnVirtualAccessPws.EvpnVirtualAccessPw[i]
    }
    return children
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetYangName() string { return "evpn-virtual-access-pws" }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) SetParent(parent types.Entity) { evpnVirtualAccessPws.parent = parent }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetParent() types.Entity { return evpnVirtualAccessPws.parent }

func (evpnVirtualAccessPws *Evpn_EvpnTables_EvpnVirtualAccessPws) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw
// Virtual Access Pseudowire
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor IP address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Neighbor interface{}

    // This attribute is a key. Pseudowire ID. The type is interface{} with range:
    // 1..4294967295.
    PseudowireId interface{}

    // Enter Virtual Access Pseudowire-specific timers configuration submode.
    EvpnVirtualAccessPwTimers Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers

    // Enter Ethernet Segment configuration submode.
    EvpnVirtualEthernetSegment Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetFilter() yfilter.YFilter { return evpnVirtualAccessPw.YFilter }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessPw.YFilter = yf }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "evpn-virtual-access-pw-timers" { return "EvpnVirtualAccessPwTimers" }
    if yname == "evpn-virtual-ethernet-segment" { return "EvpnVirtualEthernetSegment" }
    return ""
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetSegmentPath() string {
    return "evpn-virtual-access-pw" + "[neighbor='" + fmt.Sprintf("%v", evpnVirtualAccessPw.Neighbor) + "']" + "[pseudowire-id='" + fmt.Sprintf("%v", evpnVirtualAccessPw.PseudowireId) + "']"
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-virtual-access-pw-timers" {
        return &evpnVirtualAccessPw.EvpnVirtualAccessPwTimers
    }
    if childYangName == "evpn-virtual-ethernet-segment" {
        return &evpnVirtualAccessPw.EvpnVirtualEthernetSegment
    }
    return nil
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-virtual-access-pw-timers"] = &evpnVirtualAccessPw.EvpnVirtualAccessPwTimers
    children["evpn-virtual-ethernet-segment"] = &evpnVirtualAccessPw.EvpnVirtualEthernetSegment
    return children
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor"] = evpnVirtualAccessPw.Neighbor
    leafs["pseudowire-id"] = evpnVirtualAccessPw.PseudowireId
    return leafs
}

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetYangName() string { return "evpn-virtual-access-pw" }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) SetParent(parent types.Entity) { evpnVirtualAccessPw.parent = parent }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetParent() types.Entity { return evpnVirtualAccessPw.parent }

func (evpnVirtualAccessPw *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw) GetParentYangName() string { return "evpn-virtual-access-pws" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers
// Enter Virtual Access Pseudowire-specific
// timers configuration submode
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Virtual Access Pseudowire-specific Recovery timer. The type is interface{}
    // with range: 20..3600. The default value is 30.
    EvpnVirtualAccessPwRecovery interface{}

    // Virtual Access Pseudowire-specific Peering timer. The type is interface{}
    // with range: 0..300. The default value is 3.
    EvpnVirtualAccessPwPeering interface{}

    // Enable Virtual Access Pseudowire-specific timers. The type is interface{}.
    Enable interface{}
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetFilter() yfilter.YFilter { return evpnVirtualAccessPwTimers.YFilter }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) SetFilter(yf yfilter.YFilter) { evpnVirtualAccessPwTimers.YFilter = yf }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetGoName(yname string) string {
    if yname == "evpn-virtual-access-pw-recovery" { return "EvpnVirtualAccessPwRecovery" }
    if yname == "evpn-virtual-access-pw-peering" { return "EvpnVirtualAccessPwPeering" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetSegmentPath() string {
    return "evpn-virtual-access-pw-timers"
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-virtual-access-pw-recovery"] = evpnVirtualAccessPwTimers.EvpnVirtualAccessPwRecovery
    leafs["evpn-virtual-access-pw-peering"] = evpnVirtualAccessPwTimers.EvpnVirtualAccessPwPeering
    leafs["enable"] = evpnVirtualAccessPwTimers.Enable
    return leafs
}

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetYangName() string { return "evpn-virtual-access-pw-timers" }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) SetParent(parent types.Entity) { evpnVirtualAccessPwTimers.parent = parent }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetParent() types.Entity { return evpnVirtualAccessPwTimers.parent }

func (evpnVirtualAccessPwTimers *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualAccessPwTimers) GetParentYangName() string { return "evpn-virtual-access-pw" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment
// Enter Ethernet Segment configuration submode
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Ethernet Segment. The type is interface{}.
    Enable interface{}

    // ES-Import Route Target. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    EsImportRouteTarget interface{}

    // Ethernet segment identifier.
    Identifier Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier

    // Enter Manual service carving configuration submode.
    ManualServiceCarving Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetFilter() yfilter.YFilter { return evpnVirtualEthernetSegment.YFilter }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) SetFilter(yf yfilter.YFilter) { evpnVirtualEthernetSegment.YFilter = yf }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "es-import-route-target" { return "EsImportRouteTarget" }
    if yname == "identifier" { return "Identifier" }
    if yname == "manual-service-carving" { return "ManualServiceCarving" }
    return ""
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetSegmentPath() string {
    return "evpn-virtual-ethernet-segment"
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "identifier" {
        return &evpnVirtualEthernetSegment.Identifier
    }
    if childYangName == "manual-service-carving" {
        return &evpnVirtualEthernetSegment.ManualServiceCarving
    }
    return nil
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["identifier"] = &evpnVirtualEthernetSegment.Identifier
    children["manual-service-carving"] = &evpnVirtualEthernetSegment.ManualServiceCarving
    return children
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnVirtualEthernetSegment.Enable
    leafs["es-import-route-target"] = evpnVirtualEthernetSegment.EsImportRouteTarget
    return leafs
}

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetBundleName() string { return "cisco_ios_xr" }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetYangName() string { return "evpn-virtual-ethernet-segment" }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) SetParent(parent types.Entity) { evpnVirtualEthernetSegment.parent = parent }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetParent() types.Entity { return evpnVirtualEthernetSegment.parent }

func (evpnVirtualEthernetSegment *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment) GetParentYangName() string { return "evpn-virtual-access-pw" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier
// Ethernet segment identifier
// This type is a presence type.
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type 0's 1st Byte or Type Byte and 1st Byte. The type is string with
    // pattern: [0-9a-fA-F]{1,8}. This attribute is mandatory.
    Bytes01 interface{}

    // 2nd and 3rd Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes23 interface{}

    // 4th and 5th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes45 interface{}

    // 6th and 7th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes67 interface{}

    // 8th and 9th Bytes. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory. Units are byte.
    Bytes89 interface{}

    // Ethernet segment identifier type. The type is EthernetSegmentIdentifier.
    // This attribute is mandatory.
    Type interface{}
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetFilter() yfilter.YFilter { return identifier.YFilter }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) SetFilter(yf yfilter.YFilter) { identifier.YFilter = yf }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetGoName(yname string) string {
    if yname == "bytes01" { return "Bytes01" }
    if yname == "bytes23" { return "Bytes23" }
    if yname == "bytes45" { return "Bytes45" }
    if yname == "bytes67" { return "Bytes67" }
    if yname == "bytes89" { return "Bytes89" }
    if yname == "type" { return "Type" }
    return ""
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetSegmentPath() string {
    return "identifier"
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bytes01"] = identifier.Bytes01
    leafs["bytes23"] = identifier.Bytes23
    leafs["bytes45"] = identifier.Bytes45
    leafs["bytes67"] = identifier.Bytes67
    leafs["bytes89"] = identifier.Bytes89
    leafs["type"] = identifier.Type
    return leafs
}

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetBundleName() string { return "cisco_ios_xr" }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetYangName() string { return "identifier" }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) SetParent(parent types.Entity) { identifier.parent = parent }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetParent() types.Entity { return identifier.parent }

func (identifier *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_Identifier) GetParentYangName() string { return "evpn-virtual-ethernet-segment" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving
// Enter Manual service carving configuration
// submode
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Manual service carving. The type is interface{}.
    Enable interface{}

    // Manual service carving primary,secondary lists.
    ServiceList Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetFilter() yfilter.YFilter { return manualServiceCarving.YFilter }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) SetFilter(yf yfilter.YFilter) { manualServiceCarving.YFilter = yf }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "service-list" { return "ServiceList" }
    return ""
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetSegmentPath() string {
    return "manual-service-carving"
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "service-list" {
        return &manualServiceCarving.ServiceList
    }
    return nil
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["service-list"] = &manualServiceCarving.ServiceList
    return children
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = manualServiceCarving.Enable
    return leafs
}

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetBundleName() string { return "cisco_ios_xr" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetYangName() string { return "manual-service-carving" }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) SetParent(parent types.Entity) { manualServiceCarving.parent = parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetParent() types.Entity { return manualServiceCarving.parent }

func (manualServiceCarving *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving) GetParentYangName() string { return "evpn-virtual-ethernet-segment" }

// Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList
// Manual service carving primary,secondary lists
type Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary services list. The type is string with length: 1..150.
    Primary interface{}

    // Secondary services list. The type is string with length: 1..150.
    Secondary interface{}
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetFilter() yfilter.YFilter { return serviceList.YFilter }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) SetFilter(yf yfilter.YFilter) { serviceList.YFilter = yf }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetGoName(yname string) string {
    if yname == "primary" { return "Primary" }
    if yname == "secondary" { return "Secondary" }
    return ""
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetSegmentPath() string {
    return "service-list"
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["primary"] = serviceList.Primary
    leafs["secondary"] = serviceList.Secondary
    return leafs
}

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetBundleName() string { return "cisco_ios_xr" }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetYangName() string { return "service-list" }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) SetParent(parent types.Entity) { serviceList.parent = parent }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetParent() types.Entity { return serviceList.parent }

func (serviceList *Evpn_EvpnTables_EvpnVirtualAccessPws_EvpnVirtualAccessPw_EvpnVirtualEthernetSegment_ManualServiceCarving_ServiceList) GetParentYangName() string { return "manual-service-carving" }

// Evpn_EvpnTables_EvpnEthernetSegment
// EVPN Global Ethernet Segment submode
type Evpn_EvpnTables_EvpnEthernetSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable EVPN Global Ethernet Segment submode. The type is interface{}.
    Enable interface{}

    // EVPN ESI type table.
    EvpnEsiTypes Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetFilter() yfilter.YFilter { return evpnEthernetSegment.YFilter }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) SetFilter(yf yfilter.YFilter) { evpnEthernetSegment.YFilter = yf }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "evpn-esi-types" { return "EvpnEsiTypes" }
    return ""
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetSegmentPath() string {
    return "evpn-ethernet-segment"
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-esi-types" {
        return &evpnEthernetSegment.EvpnEsiTypes
    }
    return nil
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["evpn-esi-types"] = &evpnEthernetSegment.EvpnEsiTypes
    return children
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = evpnEthernetSegment.Enable
    return leafs
}

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetBundleName() string { return "cisco_ios_xr" }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetYangName() string { return "evpn-ethernet-segment" }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) SetParent(parent types.Entity) { evpnEthernetSegment.parent = parent }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetParent() types.Entity { return evpnEthernetSegment.parent }

func (evpnEthernetSegment *Evpn_EvpnTables_EvpnEthernetSegment) GetParentYangName() string { return "evpn-tables" }

// Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes
// EVPN ESI type table
type Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ESI type. The type is slice of
    // Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType.
    EvpnEsiType []Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetFilter() yfilter.YFilter { return evpnEsiTypes.YFilter }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) SetFilter(yf yfilter.YFilter) { evpnEsiTypes.YFilter = yf }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetGoName(yname string) string {
    if yname == "evpn-esi-type" { return "EvpnEsiType" }
    return ""
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetSegmentPath() string {
    return "evpn-esi-types"
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "evpn-esi-type" {
        for _, c := range evpnEsiTypes.EvpnEsiType {
            if evpnEsiTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType{}
        evpnEsiTypes.EvpnEsiType = append(evpnEsiTypes.EvpnEsiType, child)
        return &evpnEsiTypes.EvpnEsiType[len(evpnEsiTypes.EvpnEsiType)-1]
    }
    return nil
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range evpnEsiTypes.EvpnEsiType {
        children[evpnEsiTypes.EvpnEsiType[i].GetSegmentPath()] = &evpnEsiTypes.EvpnEsiType[i]
    }
    return children
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetBundleName() string { return "cisco_ios_xr" }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetYangName() string { return "evpn-esi-types" }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) SetParent(parent types.Entity) { evpnEsiTypes.parent = parent }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetParent() types.Entity { return evpnEsiTypes.parent }

func (evpnEsiTypes *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes) GetParentYangName() string { return "evpn-ethernet-segment" }

// Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType
// ESI type
type Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ESI type. The type is interface{} with range:
    // 0..4294967295.
    EsiType interface{}

    // Disable ESI Autogeneration. The type is interface{}.
    DisableAutoGeneration interface{}
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetFilter() yfilter.YFilter { return evpnEsiType.YFilter }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) SetFilter(yf yfilter.YFilter) { evpnEsiType.YFilter = yf }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetGoName(yname string) string {
    if yname == "esi-type" { return "EsiType" }
    if yname == "disable-auto-generation" { return "DisableAutoGeneration" }
    return ""
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetSegmentPath() string {
    return "evpn-esi-type" + "[esi-type='" + fmt.Sprintf("%v", evpnEsiType.EsiType) + "']"
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["esi-type"] = evpnEsiType.EsiType
    leafs["disable-auto-generation"] = evpnEsiType.DisableAutoGeneration
    return leafs
}

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetBundleName() string { return "cisco_ios_xr" }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetYangName() string { return "evpn-esi-type" }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) SetParent(parent types.Entity) { evpnEsiType.parent = parent }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetParent() types.Entity { return evpnEsiType.parent }

func (evpnEsiType *Evpn_EvpnTables_EvpnEthernetSegment_EvpnEsiTypes_EvpnEsiType) GetParentYangName() string { return "evpn-esi-types" }

