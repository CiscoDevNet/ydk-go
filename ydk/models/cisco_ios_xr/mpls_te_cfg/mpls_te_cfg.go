// This module contains a collection of YANG definitions
// for Cisco IOS-XR mpls-te package configuration.
// 
// This module contains definitions
// for the following management objects:
//   mpls-te: The root of MPLS TE configuration
// 
// This YANG module augments the
//   Cisco-IOS-XR-ifmgr-cfg,
//   Cisco-IOS-XR-snmp-agent-cfg
// modules with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package mpls_te_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package mpls_te_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-te-cfg mpls-te}", reflect.TypeOf(MplsTe{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-te-cfg:mpls-te", reflect.TypeOf(MplsTe{}))
}

// MplsTeBackupBandwidthClass represents Mpls te backup bandwidth class
type MplsTeBackupBandwidthClass string

const (
    // Class 0
    MplsTeBackupBandwidthClass_class0 MplsTeBackupBandwidthClass = "class0"

    // Class 1
    MplsTeBackupBandwidthClass_class1 MplsTeBackupBandwidthClass = "class1"

    // Any Class
    MplsTeBackupBandwidthClass_any_class MplsTeBackupBandwidthClass = "any-class"
)

// SrPrepend represents Sr prepend
type SrPrepend string

const (
    // NoneType
    SrPrepend_none_type SrPrepend = "none-type"

    // Next Label
    SrPrepend_next_label SrPrepend = "next-label"

    // BGP NHOP
    SrPrepend_bgp_n_hop SrPrepend = "bgp-n-hop"
)

// MplsTePathComputationMethod represents Mpls te path computation method
type MplsTePathComputationMethod string

const (
    // NotSet
    MplsTePathComputationMethod_not_set MplsTePathComputationMethod = "not-set"

    // Dynamic
    MplsTePathComputationMethod_dynamic MplsTePathComputationMethod = "dynamic"

    // PCE
    MplsTePathComputationMethod_pce MplsTePathComputationMethod = "pce"

    // Explicit
    MplsTePathComputationMethod_explicit MplsTePathComputationMethod = "explicit"
)

// OtnDestination represents Otn destination
type OtnDestination string

const (
    // Destination numbered
    OtnDestination_number_ed OtnDestination = "number-ed"

    // Destination unnumbered
    OtnDestination_un_number_ed OtnDestination = "un-number-ed"
)

// MplsTeSwitchingCap represents Mpls te switching cap
type MplsTeSwitchingCap string

const (
    // PSC1
    MplsTeSwitchingCap_psc1 MplsTeSwitchingCap = "psc1"

    // LSC
    MplsTeSwitchingCap_lsc MplsTeSwitchingCap = "lsc"

    // FSC
    MplsTeSwitchingCap_fsc MplsTeSwitchingCap = "fsc"
)

// MplsTeBfdSessionDownAction represents Mpls te bfd session down action
type MplsTeBfdSessionDownAction string

const (
    // Tear down and resetup
    MplsTeBfdSessionDownAction_re_setup MplsTeBfdSessionDownAction = "re-setup"
)

// RoutePriorityRole represents Route priority role
type RoutePriorityRole string

const (
    // TE Route Priority Role Head Backup
    RoutePriorityRole_route_priority_role_head_back_up RoutePriorityRole = "route-priority-role-head-back-up"

    // TE Route Priority Role Head Primary
    RoutePriorityRole_route_priority_role_head_primary RoutePriorityRole = "route-priority-role-head-primary"

    // TE Route Priority Role Middle
    RoutePriorityRole_route_priority_role_middle RoutePriorityRole = "route-priority-role-middle"
)

// MplsTebfdSession represents Mpls tebfd session
type MplsTebfdSession string

const (
    // Regular BFD
    MplsTebfdSession_regular_bfd MplsTebfdSession = "regular-bfd"

    // Seamless BFD
    MplsTebfdSession_sbfd MplsTebfdSession = "sbfd"

    // Redundant SBFD
    MplsTebfdSession_redundant_sbfd MplsTebfdSession = "redundant-sbfd"
)

// MplsTeLogFrrProtection represents Mpls te log frr protection
type MplsTeLogFrrProtection string

const (
    // Track only FRR active on primary LSP
    MplsTeLogFrrProtection_frr_active_primary MplsTeLogFrrProtection = "frr-active-primary"

    // backup tunnel
    MplsTeLogFrrProtection_backup MplsTeLogFrrProtection = "backup"

    // Track only FRR ready on primary LSP
    MplsTeLogFrrProtection_frr_ready_primary MplsTeLogFrrProtection = "frr-ready-primary"

    // primary LSP
    MplsTeLogFrrProtection_primary MplsTeLogFrrProtection = "primary"

    // all
    MplsTeLogFrrProtection_all MplsTeLogFrrProtection = "all"
)

// MplsTeTunnelAffinity represents Mpls te tunnel affinity
type MplsTeTunnelAffinity string

const (
    // Include Affinity
    MplsTeTunnelAffinity_include MplsTeTunnelAffinity = "include"

    // Strictly Include Affinity
    MplsTeTunnelAffinity_include_strict MplsTeTunnelAffinity = "include-strict"

    // Exclude Affinity
    MplsTeTunnelAffinity_exclude MplsTeTunnelAffinity = "exclude"

    // Exclude All Affinities
    MplsTeTunnelAffinity_exclude_all MplsTeTunnelAffinity = "exclude-all"

    // Ignore Affinity
    MplsTeTunnelAffinity_ignore MplsTeTunnelAffinity = "ignore"
)

// IetfMode represents Ietf mode
type IetfMode string

const (
    // IETF Standard
    IetfMode_standard IetfMode = "standard"
)

// MplsTePathOptionProperty represents Mpls te path option property
type MplsTePathOptionProperty string

const (
    // No property
    MplsTePathOptionProperty_none MplsTePathOptionProperty = "none"

    // Path is not a canditate forreoptimization
    MplsTePathOptionProperty_lockdown MplsTePathOptionProperty = "lockdown"

    // Explicit path does not require topology
    // database
    MplsTePathOptionProperty_verbatim MplsTePathOptionProperty = "verbatim"

    // Dynamic path found by PCE server
    MplsTePathOptionProperty_pce MplsTePathOptionProperty = "pce"

    // Segment Routing path
    MplsTePathOptionProperty_segment_routing MplsTePathOptionProperty = "segment-routing"
)

// GmplsttiMode represents Gmplstti mode
type GmplsttiMode string

const (
    // Section Monitoring
    GmplsttiMode_sm GmplsttiMode = "sm"

    // Path Monitoring
    GmplsttiMode_pm GmplsttiMode = "pm"

    // Tandem Connection
    GmplsttiMode_tcm GmplsttiMode = "tcm"
)

// MplsTePathSelectionInvalidationTimerExpire represents Mpls te path selection invalidation timer expire
type MplsTePathSelectionInvalidationTimerExpire string

const (
    // Tear down tunnel.
    MplsTePathSelectionInvalidationTimerExpire_tunnel_action_tear MplsTePathSelectionInvalidationTimerExpire = "tunnel-action-tear"

    // Drop tunnel traffic.
    MplsTePathSelectionInvalidationTimerExpire_tunnel_action_drop MplsTePathSelectionInvalidationTimerExpire = "tunnel-action-drop"
)

// MplsTeOtnApsProtection represents Mpls te otn aps protection
type MplsTeOtnApsProtection string

const (
    // 1PLUS1 UNIDIR NO APS
    MplsTeOtnApsProtection_Y_1plus1_unidir_no_aps MplsTeOtnApsProtection = "1plus1-unidir-no-aps"

    // 1PLUS1 UNIDIR APS
    MplsTeOtnApsProtection_Y_1plus1_unidir_aps MplsTeOtnApsProtection = "1plus1-unidir-aps"

    // 1PLUS1 BIDIR APS
    MplsTeOtnApsProtection_Y_1plus1_bdir_aps MplsTeOtnApsProtection = "1plus1-bdir-aps"
)

// MplsTeSwitchingEncoding represents Mpls te switching encoding
type MplsTeSwitchingEncoding string

const (
    // Packet
    MplsTeSwitchingEncoding_packet MplsTeSwitchingEncoding = "packet"

    // Ethernet
    MplsTeSwitchingEncoding_ethernet MplsTeSwitchingEncoding = "ethernet"

    // SONET SDH
    MplsTeSwitchingEncoding_sondet_sdh MplsTeSwitchingEncoding = "sondet-sdh"
)

// MplsTeSigNameOption represents Mpls te sig name option
type MplsTeSigNameOption string

const (
    // None
    MplsTeSigNameOption_none MplsTeSigNameOption = "none"

    // Address
    MplsTeSigNameOption_address MplsTeSigNameOption = "address"

    // Name
    MplsTeSigNameOption_name MplsTeSigNameOption = "name"
)

// OtnProtectionSwitchLockout represents Otn protection switch lockout
type OtnProtectionSwitchLockout string

const (
    // No Lockout
    OtnProtectionSwitchLockout_none OtnProtectionSwitchLockout = "none"

    // Lockout Working
    OtnProtectionSwitchLockout_working OtnProtectionSwitchLockout = "working"
)

// MplsTeTunnelId represents Mpls te tunnel id
type MplsTeTunnelId string

const (
    // Auto
    MplsTeTunnelId_auto MplsTeTunnelId = "auto"

    // Explicit
    MplsTeTunnelId_explicit MplsTeTunnelId = "explicit"
)

// MplsTeAffinityValue represents Mpls te affinity value
type MplsTeAffinityValue string

const (
    // Affinity value in Hex number
    MplsTeAffinityValue_hex_value MplsTeAffinityValue = "hex-value"

    // Affinity value by Bit-Position
    MplsTeAffinityValue_bit_position MplsTeAffinityValue = "bit-position"
)

// OtnStaticUni represents Otn static uni
type OtnStaticUni string

const (
    // Uni-Type None
    OtnStaticUni_unknown OtnStaticUni = "unknown"

    // Uni-Type XC
    OtnStaticUni_xc OtnStaticUni = "xc"

    // Uni-Type Termination
    OtnStaticUni_termination OtnStaticUni = "termination"
)

// MplsTeOtnSncMode represents Mpls te otn snc mode
type MplsTeOtnSncMode string

const (
    // SNC N
    MplsTeOtnSncMode_snc_n MplsTeOtnSncMode = "snc-n"

    // SNC I
    MplsTeOtnSncMode_snc_i MplsTeOtnSncMode = "snc-i"

    // SNC S
    MplsTeOtnSncMode_snc_s MplsTeOtnSncMode = "snc-s"
)

// OtnPayload represents Otn payload
type OtnPayload string

const (
    // Payload unknown
    OtnPayload_unknown OtnPayload = "unknown"

    // Bmp Payload
    OtnPayload_bmp OtnPayload = "bmp"

    // Gfp_F Payload
    OtnPayload_gfp_f OtnPayload = "gfp-f"

    // GMP Payload
    OtnPayload_gmp OtnPayload = "gmp"

    // Gfp_F_EXT Payload
    OtnPayload_gfp_f_ext OtnPayload = "gfp-f-ext"
)

// OspfAreaMode represents Ospf area mode
type OspfAreaMode string

const (
    // OSPF area in integer format
    OspfAreaMode_ospf_int OspfAreaMode = "ospf-int"

    // OSPF area in IP address format
    OspfAreaMode_ospfip_addr OspfAreaMode = "ospfip-addr"
)

// MplsTeIgpProtocol represents Mpls te igp protocol
type MplsTeIgpProtocol string

const (
    // Not set
    MplsTeIgpProtocol_none MplsTeIgpProtocol = "none"

    // IS IS
    MplsTeIgpProtocol_isis MplsTeIgpProtocol = "isis"

    // OSPF
    MplsTeIgpProtocol_ospf MplsTeIgpProtocol = "ospf"
)

// MplsTePathSelectionTiebreaker represents Mpls te path selection tiebreaker
type MplsTePathSelectionTiebreaker string

const (
    // Prefer the path with the least-utilized links
    MplsTePathSelectionTiebreaker_min_fill MplsTePathSelectionTiebreaker = "min-fill"

    // Prefer the path with the most-utilized links
    MplsTePathSelectionTiebreaker_max_fill MplsTePathSelectionTiebreaker = "max-fill"

    // Prefer a path with links utilized randomly
    MplsTePathSelectionTiebreaker_random MplsTePathSelectionTiebreaker = "random"
)

// MplsTePathOption represents Mpls te path option
type MplsTePathOption string

const (
    // Not Set
    MplsTePathOption_not_set MplsTePathOption = "not-set"

    // Dynamic
    MplsTePathOption_dynamic MplsTePathOption = "dynamic"

    // Explicit, identified by name
    MplsTePathOption_explicit_name MplsTePathOption = "explicit-name"

    // Explicit, identified by number
    MplsTePathOption_explicit_number MplsTePathOption = "explicit-number"

    // No ERO
    MplsTePathOption_no_ero MplsTePathOption = "no-ero"

    // Segment routing
    MplsTePathOption_sr MplsTePathOption = "sr"
)

// PathInvalidationAction represents Path invalidation action
type PathInvalidationAction string

const (
    // Tear
    PathInvalidationAction_tear PathInvalidationAction = "tear"

    // Drop
    PathInvalidationAction_drop PathInvalidationAction = "drop"
)

// OtnSignaledBandwidth represents Otn signaled bandwidth
type OtnSignaledBandwidth string

const (
    // Signalled BW for ODU1
    OtnSignaledBandwidth_odu1 OtnSignaledBandwidth = "odu1"

    // Signalled BW for ODU2
    OtnSignaledBandwidth_odu2 OtnSignaledBandwidth = "odu2"

    // Signalled BW for ODU3
    OtnSignaledBandwidth_odu3 OtnSignaledBandwidth = "odu3"

    // Signalled BW for ODU4
    OtnSignaledBandwidth_odu4 OtnSignaledBandwidth = "odu4"

    // Signalled BW for ODU0
    OtnSignaledBandwidth_odu0 OtnSignaledBandwidth = "odu0"

    // Signalled BW for ODU2e
    OtnSignaledBandwidth_odu2e OtnSignaledBandwidth = "odu2e"

    // Signalled BW for ODUflex CBR
    OtnSignaledBandwidth_od_uflex_cbr OtnSignaledBandwidth = "od-uflex-cbr"

    // Signalled BW for ODUflex GFP Resizable
    OtnSignaledBandwidth_od_uflex_gfp_resize OtnSignaledBandwidth = "od-uflex-gfp-resize"

    // Signalled BW for ODUflex GFP not Resizable
    OtnSignaledBandwidth_od_uflex_gfp_not_resize OtnSignaledBandwidth = "od-uflex-gfp-not-resize"

    // Signalled BW for ODU1e
    OtnSignaledBandwidth_odu1e OtnSignaledBandwidth = "odu1e"

    // Signalled BW for ODU1f
    OtnSignaledBandwidth_odu1f OtnSignaledBandwidth = "odu1f"

    // Signalled BW for ODU2f
    OtnSignaledBandwidth_odu2f OtnSignaledBandwidth = "odu2f"

    // Signalled BW for ODU3e1
    OtnSignaledBandwidth_odu3e1 OtnSignaledBandwidth = "odu3e1"

    // Signalled BW for ODU3e2
    OtnSignaledBandwidth_odu3e2 OtnSignaledBandwidth = "odu3e2"
)

// MplsTeAutorouteMetric represents Mpls te autoroute metric
type MplsTeAutorouteMetric string

const (
    // Relative
    MplsTeAutorouteMetric_relative MplsTeAutorouteMetric = "relative"

    // Absolute
    MplsTeAutorouteMetric_absolute MplsTeAutorouteMetric = "absolute"

    // Constant
    MplsTeAutorouteMetric_constant MplsTeAutorouteMetric = "constant"
)

// BindingSegmentId represents Binding segment id
type BindingSegmentId string

const (
    // AnyLabel
    BindingSegmentId_any_label BindingSegmentId = "any-label"

    // SpecifiedLabel
    BindingSegmentId_specified_label BindingSegmentId = "specified-label"
)

// MplsTesrlgExclude represents Mpls tesrlg exclude
type MplsTesrlgExclude string

const (
    // SRLG Mandatory Exclude
    MplsTesrlgExclude_mandatory MplsTesrlgExclude = "mandatory"

    // SRLG Preferred Exclude
    MplsTesrlgExclude_preferred MplsTesrlgExclude = "preferred"

    // SRLG Weighted Exclude
    MplsTesrlgExclude_weighted MplsTesrlgExclude = "weighted"
)

// MplsTeSignaledLabel represents Mpls te signaled label
type MplsTeSignaledLabel string

const (
    // Not Set
    MplsTeSignaledLabel_not_set MplsTeSignaledLabel = "not-set"

    // DWDM Label (RFC 6205), 50GHz channel spacing
    MplsTeSignaledLabel_dwdm MplsTeSignaledLabel = "dwdm"
)

// BandwidthConstraint represents Bandwidth constraint
type BandwidthConstraint string

const (
    // Maximum Allocation Bandwidth Constaints Model
    BandwidthConstraint_bandwidth_constraint_maximum_allocation_model BandwidthConstraint = "bandwidth-constraint-maximum-allocation-model"
)

// MplsTeSwitchingEncode represents Mpls te switching encode
type MplsTeSwitchingEncode string

const (
    // None
    MplsTeSwitchingEncode_none MplsTeSwitchingEncode = "none"

    // Packet
    MplsTeSwitchingEncode_packet MplsTeSwitchingEncode = "packet"

    // Ethernet
    MplsTeSwitchingEncode_ethernet MplsTeSwitchingEncode = "ethernet"

    // SONET SDH
    MplsTeSwitchingEncode_sondet_sdh MplsTeSwitchingEncode = "sondet-sdh"
)

// MplsTePathSelectionMetric represents Mpls te path selection metric
type MplsTePathSelectionMetric string

const (
    // IGP Metric
    MplsTePathSelectionMetric_igp MplsTePathSelectionMetric = "igp"

    // TE Metric
    MplsTePathSelectionMetric_te MplsTePathSelectionMetric = "te"

    // DELAY Metric
    MplsTePathSelectionMetric_delay MplsTePathSelectionMetric = "delay"
)

// MplsTePathOptionProtection represents Mpls te path option protection
type MplsTePathOptionProtection string

const (
    // Active path
    MplsTePathOptionProtection_active MplsTePathOptionProtection = "active"

    // Protecting Path
    MplsTePathOptionProtection_protecting MplsTePathOptionProtection = "protecting"
)

// OtnSignaledBandwidthFlexFraming represents Otn signaled bandwidth flex framing
type OtnSignaledBandwidthFlexFraming string

const (
    // CBR
    OtnSignaledBandwidthFlexFraming_cbr OtnSignaledBandwidthFlexFraming = "cbr"

    // GFP fixed framing type
    OtnSignaledBandwidthFlexFraming_framed_gfp_fixed OtnSignaledBandwidthFlexFraming = "framed-gfp-fixed"

    // GFP resizeable framing type
    OtnSignaledBandwidthFlexFraming_framed_gfp_resize OtnSignaledBandwidthFlexFraming = "framed-gfp-resize"
)

// MplsTeBandwidthLimit represents Mpls te bandwidth limit
type MplsTeBandwidthLimit string

const (
    // Unlimited
    MplsTeBandwidthLimit_unlimited MplsTeBandwidthLimit = "unlimited"

    // Limited
    MplsTeBandwidthLimit_limited MplsTeBandwidthLimit = "limited"
)

// MplsTePathSelectionSegmentRoutingAdjacencyProtection represents protection
type MplsTePathSelectionSegmentRoutingAdjacencyProtection string

const (
    // Any segment can be used in a path.
    MplsTePathSelectionSegmentRoutingAdjacencyProtection_not_set MplsTePathSelectionSegmentRoutingAdjacencyProtection = "not-set"

    // Only unprotected adjacency segments can be used
    // in a path.
    MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_unprotected MplsTePathSelectionSegmentRoutingAdjacencyProtection = "adj-unprotected"

    // Only protected adjacency segments can be used
    // in a path.
    MplsTePathSelectionSegmentRoutingAdjacencyProtection_adj_protected MplsTePathSelectionSegmentRoutingAdjacencyProtection = "adj-protected"
)

// LinkNextHop represents Link next hop
type LinkNextHop string

const (
    // No next hop
    LinkNextHop_none LinkNextHop = "none"

    // IPv4 next-hop address
    LinkNextHop_ipv4_address LinkNextHop = "ipv4-address"
)

// MplsLcacFloodingIgp represents Mpls lcac flooding igp
type MplsLcacFloodingIgp string

const (
    // OSPF
    MplsLcacFloodingIgp_ospf MplsLcacFloodingIgp = "ospf"
)

// BfdReversePath represents Bfd reverse path
type BfdReversePath string

const (
    // BindingLabel
    BfdReversePath_bfd_reverse_path_binding_label BfdReversePath = "bfd-reverse-path-binding-label"
)

// MplsTeOtnApsRestorationStyle represents Mpls te otn aps restoration style
type MplsTeOtnApsRestorationStyle string

const (
    // Keep Failed Lsp
    MplsTeOtnApsRestorationStyle_keep_failed_lsp MplsTeOtnApsRestorationStyle = "keep-failed-lsp"

    // Delete Failed Lsp
    MplsTeOtnApsRestorationStyle_delete_failed_lsp MplsTeOtnApsRestorationStyle = "delete-failed-lsp"
)

// MplsTeBandwidthDste represents Mpls te bandwidth dste
type MplsTeBandwidthDste string

const (
    // IETF-Standard DSTE
    MplsTeBandwidthDste_standard_dste MplsTeBandwidthDste = "standard-dste"

    // Pre-Standard DSTE
    MplsTeBandwidthDste_pre_standard_dste MplsTeBandwidthDste = "pre-standard-dste"
)

// MplsTePathDiversityConformance represents Mpls te path diversity conformance
type MplsTePathDiversityConformance string

const (
    // Strict
    MplsTePathDiversityConformance_strict MplsTePathDiversityConformance = "strict"

    // Best effort
    MplsTePathDiversityConformance_best_effort MplsTePathDiversityConformance = "best-effort"
)

// MplsTeBackupBandwidthPool represents Mpls te backup bandwidth pool
type MplsTeBackupBandwidthPool string

const (
    // Any Pool
    MplsTeBackupBandwidthPool_any_pool MplsTeBackupBandwidthPool = "any-pool"

    // Global Pool
    MplsTeBackupBandwidthPool_global_pool MplsTeBackupBandwidthPool = "global-pool"

    // Sub Pool
    MplsTeBackupBandwidthPool_sub_pool MplsTeBackupBandwidthPool = "sub-pool"
)

// MplsTeOtnApsProtectionMode represents Mpls te otn aps protection mode
type MplsTeOtnApsProtectionMode string

const (
    // Revertive
    MplsTeOtnApsProtectionMode_revertive MplsTeOtnApsProtectionMode = "revertive"

    // Non Revertive
    MplsTeOtnApsProtectionMode_non_revertive MplsTeOtnApsProtectionMode = "non-revertive"
)

// MplsTeSwitchingIndex represents Mpls te switching index
type MplsTeSwitchingIndex string

const (
    // Link
    MplsTeSwitchingIndex_link MplsTeSwitchingIndex = "link"
)

// MplsTeConfigTunnel represents Mpls te config tunnel
type MplsTeConfigTunnel string

const (
    // P2P
    MplsTeConfigTunnel_p2p MplsTeConfigTunnel = "p2p"

    // P2MP
    MplsTeConfigTunnel_p2mp MplsTeConfigTunnel = "p2mp"
)

// MplsTe
// The root of MPLS TE configuration
type MplsTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable MPLS Traffic Engineering. The type is interface{}.
    EnableTrafficEngineering interface{}

    // Configure Diff-Serv Traffic-Engineering.
    DiffServTrafficEngineering MplsTe_DiffServTrafficEngineering

    // Configure MPLS TE tunnel.
    NamedTunnels MplsTe_NamedTunnels

    // GMPLS-UNI configuration.
    GmplsUni MplsTe_GmplsUni

    // Configure MPLS TE global attributes.
    GlobalAttributes MplsTe_GlobalAttributes

    // MPLS transport profile configuration data.
    TransportProfile MplsTe_TransportProfile

    // Configure MPLS TE interfaces.
    Interfaces MplsTe_Interfaces

    // GMPLS-NNI configuration.
    GmplsNni MplsTe_GmplsNni

    // LCAC specific MPLS global configuration.
    Lcac MplsTe_Lcac
}

func (mplsTe *MplsTe) GetFilter() yfilter.YFilter { return mplsTe.YFilter }

func (mplsTe *MplsTe) SetFilter(yf yfilter.YFilter) { mplsTe.YFilter = yf }

func (mplsTe *MplsTe) GetGoName(yname string) string {
    if yname == "enable-traffic-engineering" { return "EnableTrafficEngineering" }
    if yname == "diff-serv-traffic-engineering" { return "DiffServTrafficEngineering" }
    if yname == "named-tunnels" { return "NamedTunnels" }
    if yname == "gmpls-uni" { return "GmplsUni" }
    if yname == "global-attributes" { return "GlobalAttributes" }
    if yname == "transport-profile" { return "TransportProfile" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "gmpls-nni" { return "GmplsNni" }
    if yname == "lcac" { return "Lcac" }
    return ""
}

func (mplsTe *MplsTe) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-te-cfg:mpls-te"
}

func (mplsTe *MplsTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "diff-serv-traffic-engineering" {
        return &mplsTe.DiffServTrafficEngineering
    }
    if childYangName == "named-tunnels" {
        return &mplsTe.NamedTunnels
    }
    if childYangName == "gmpls-uni" {
        return &mplsTe.GmplsUni
    }
    if childYangName == "global-attributes" {
        return &mplsTe.GlobalAttributes
    }
    if childYangName == "transport-profile" {
        return &mplsTe.TransportProfile
    }
    if childYangName == "interfaces" {
        return &mplsTe.Interfaces
    }
    if childYangName == "gmpls-nni" {
        return &mplsTe.GmplsNni
    }
    if childYangName == "lcac" {
        return &mplsTe.Lcac
    }
    return nil
}

func (mplsTe *MplsTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["diff-serv-traffic-engineering"] = &mplsTe.DiffServTrafficEngineering
    children["named-tunnels"] = &mplsTe.NamedTunnels
    children["gmpls-uni"] = &mplsTe.GmplsUni
    children["global-attributes"] = &mplsTe.GlobalAttributes
    children["transport-profile"] = &mplsTe.TransportProfile
    children["interfaces"] = &mplsTe.Interfaces
    children["gmpls-nni"] = &mplsTe.GmplsNni
    children["lcac"] = &mplsTe.Lcac
    return children
}

func (mplsTe *MplsTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable-traffic-engineering"] = mplsTe.EnableTrafficEngineering
    return leafs
}

func (mplsTe *MplsTe) GetBundleName() string { return "cisco_ios_xr" }

func (mplsTe *MplsTe) GetYangName() string { return "mpls-te" }

func (mplsTe *MplsTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsTe *MplsTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsTe *MplsTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsTe *MplsTe) SetParent(parent types.Entity) { mplsTe.parent = parent }

func (mplsTe *MplsTe) GetParent() types.Entity { return mplsTe.parent }

func (mplsTe *MplsTe) GetParentYangName() string { return "Cisco-IOS-XR-mpls-te-cfg" }

// MplsTe_DiffServTrafficEngineering
// Configure Diff-Serv Traffic-Engineering
type MplsTe_DiffServTrafficEngineering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Diff-Serv Traffic-Engineering Bandwidth Constraint Model. The type is
    // BandwidthConstraint.
    BandwidthConstraintModel interface{}

    // Diff-Serv Traffic-Engineering IETF mode. The type is IetfMode.
    ModeIetf interface{}

    // Configure Diff-Serv Traffic-Engineering Classes.
    Classes MplsTe_DiffServTrafficEngineering_Classes
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetFilter() yfilter.YFilter { return diffServTrafficEngineering.YFilter }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) SetFilter(yf yfilter.YFilter) { diffServTrafficEngineering.YFilter = yf }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetGoName(yname string) string {
    if yname == "bandwidth-constraint-model" { return "BandwidthConstraintModel" }
    if yname == "mode-ietf" { return "ModeIetf" }
    if yname == "classes" { return "Classes" }
    return ""
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetSegmentPath() string {
    return "diff-serv-traffic-engineering"
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "classes" {
        return &diffServTrafficEngineering.Classes
    }
    return nil
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["classes"] = &diffServTrafficEngineering.Classes
    return children
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-constraint-model"] = diffServTrafficEngineering.BandwidthConstraintModel
    leafs["mode-ietf"] = diffServTrafficEngineering.ModeIetf
    return leafs
}

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetBundleName() string { return "cisco_ios_xr" }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetYangName() string { return "diff-serv-traffic-engineering" }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) SetParent(parent types.Entity) { diffServTrafficEngineering.parent = parent }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetParent() types.Entity { return diffServTrafficEngineering.parent }

func (diffServTrafficEngineering *MplsTe_DiffServTrafficEngineering) GetParentYangName() string { return "mpls-te" }

// MplsTe_DiffServTrafficEngineering_Classes
// Configure Diff-Serv Traffic-Engineering Classes
type MplsTe_DiffServTrafficEngineering_Classes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE class number. The type is slice of
    // MplsTe_DiffServTrafficEngineering_Classes_Class.
    Class []MplsTe_DiffServTrafficEngineering_Classes_Class
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetFilter() yfilter.YFilter { return classes.YFilter }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) SetFilter(yf yfilter.YFilter) { classes.YFilter = yf }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetGoName(yname string) string {
    if yname == "class" { return "Class" }
    return ""
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetSegmentPath() string {
    return "classes"
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "class" {
        for _, c := range classes.Class {
            if classes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_DiffServTrafficEngineering_Classes_Class{}
        classes.Class = append(classes.Class, child)
        return &classes.Class[len(classes.Class)-1]
    }
    return nil
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range classes.Class {
        children[classes.Class[i].GetSegmentPath()] = &classes.Class[i]
    }
    return children
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetBundleName() string { return "cisco_ios_xr" }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetYangName() string { return "classes" }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) SetParent(parent types.Entity) { classes.parent = parent }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetParent() types.Entity { return classes.parent }

func (classes *MplsTe_DiffServTrafficEngineering_Classes) GetParentYangName() string { return "diff-serv-traffic-engineering" }

// MplsTe_DiffServTrafficEngineering_Classes_Class
// DSTE class number
type MplsTe_DiffServTrafficEngineering_Classes_Class struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. DS-TE class number. The type is interface{} with
    // range: 0..7.
    ClassNumber interface{}

    // Class type number. The type is interface{} with range: 0..1.
    ClassType interface{}

    // Class-type priority. The type is interface{} with range: 0..7.
    ClassPriority interface{}

    // TRUE to skip classtype and class priority provisioning FALSE to provision
    // them. The type is bool.
    Unused interface{}
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetFilter() yfilter.YFilter { return class.YFilter }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) SetFilter(yf yfilter.YFilter) { class.YFilter = yf }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetGoName(yname string) string {
    if yname == "class-number" { return "ClassNumber" }
    if yname == "class-type" { return "ClassType" }
    if yname == "class-priority" { return "ClassPriority" }
    if yname == "unused" { return "Unused" }
    return ""
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetSegmentPath() string {
    return "class" + "[class-number='" + fmt.Sprintf("%v", class.ClassNumber) + "']"
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-number"] = class.ClassNumber
    leafs["class-type"] = class.ClassType
    leafs["class-priority"] = class.ClassPriority
    leafs["unused"] = class.Unused
    return leafs
}

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetBundleName() string { return "cisco_ios_xr" }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetYangName() string { return "class" }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) SetParent(parent types.Entity) { class.parent = parent }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetParent() types.Entity { return class.parent }

func (class *MplsTe_DiffServTrafficEngineering_Classes_Class) GetParentYangName() string { return "classes" }

// MplsTe_NamedTunnels
// Configure MPLS TE tunnel
type MplsTe_NamedTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable Named Tunnels. The type is interface{}.
    Enable interface{}

    // Configure MPLS TE tunnel.
    Tunnels MplsTe_NamedTunnels_Tunnels
}

func (namedTunnels *MplsTe_NamedTunnels) GetFilter() yfilter.YFilter { return namedTunnels.YFilter }

func (namedTunnels *MplsTe_NamedTunnels) SetFilter(yf yfilter.YFilter) { namedTunnels.YFilter = yf }

func (namedTunnels *MplsTe_NamedTunnels) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "tunnels" { return "Tunnels" }
    return ""
}

func (namedTunnels *MplsTe_NamedTunnels) GetSegmentPath() string {
    return "named-tunnels"
}

func (namedTunnels *MplsTe_NamedTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnels" {
        return &namedTunnels.Tunnels
    }
    return nil
}

func (namedTunnels *MplsTe_NamedTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnels"] = &namedTunnels.Tunnels
    return children
}

func (namedTunnels *MplsTe_NamedTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = namedTunnels.Enable
    return leafs
}

func (namedTunnels *MplsTe_NamedTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (namedTunnels *MplsTe_NamedTunnels) GetYangName() string { return "named-tunnels" }

func (namedTunnels *MplsTe_NamedTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (namedTunnels *MplsTe_NamedTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (namedTunnels *MplsTe_NamedTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (namedTunnels *MplsTe_NamedTunnels) SetParent(parent types.Entity) { namedTunnels.parent = parent }

func (namedTunnels *MplsTe_NamedTunnels) GetParent() types.Entity { return namedTunnels.parent }

func (namedTunnels *MplsTe_NamedTunnels) GetParentYangName() string { return "mpls-te" }

// MplsTe_NamedTunnels_Tunnels
// Configure MPLS TE tunnel
type MplsTe_NamedTunnels_Tunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a MPLS TE tunnel. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel.
    Tunnel []MplsTe_NamedTunnels_Tunnels_Tunnel
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetFilter() yfilter.YFilter { return tunnels.YFilter }

func (tunnels *MplsTe_NamedTunnels_Tunnels) SetFilter(yf yfilter.YFilter) { tunnels.YFilter = yf }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetGoName(yname string) string {
    if yname == "tunnel" { return "Tunnel" }
    return ""
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetSegmentPath() string {
    return "tunnels"
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel" {
        for _, c := range tunnels.Tunnel {
            if tunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel{}
        tunnels.Tunnel = append(tunnels.Tunnel, child)
        return &tunnels.Tunnel[len(tunnels.Tunnel)-1]
    }
    return nil
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnels.Tunnel {
        children[tunnels.Tunnel[i].GetSegmentPath()] = &tunnels.Tunnel[i]
    }
    return children
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetBundleName() string { return "cisco_ios_xr" }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetYangName() string { return "tunnels" }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnels *MplsTe_NamedTunnels_Tunnels) SetParent(parent types.Entity) { tunnels.parent = parent }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetParent() types.Entity { return tunnels.parent }

func (tunnels *MplsTe_NamedTunnels_Tunnels) GetParentYangName() string { return "named-tunnels" }

// MplsTe_NamedTunnels_Tunnels_Tunnel
// Configure a MPLS TE tunnel
type MplsTe_NamedTunnels_Tunnels_Tunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel name. The type is string with length:
    // 1..59.
    TunnelName interface{}

    // This attribute is a key. Tunnel Type. The type is MplsTeConfigTunnel.
    TunnelType interface{}

    // Always set to true. The type is interface{}.
    Enable interface{}

    // MPLS tunnel attributes.
    TunnelAttributes MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes

    // Set the tunnel ID.
    TunnelId MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetFilter() yfilter.YFilter { return tunnel.YFilter }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) SetFilter(yf yfilter.YFilter) { tunnel.YFilter = yf }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetGoName(yname string) string {
    if yname == "tunnel-name" { return "TunnelName" }
    if yname == "tunnel-type" { return "TunnelType" }
    if yname == "enable" { return "Enable" }
    if yname == "tunnel-attributes" { return "TunnelAttributes" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetSegmentPath() string {
    return "tunnel" + "[tunnel-name='" + fmt.Sprintf("%v", tunnel.TunnelName) + "']" + "[tunnel-type='" + fmt.Sprintf("%v", tunnel.TunnelType) + "']"
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-attributes" {
        return &tunnel.TunnelAttributes
    }
    if childYangName == "tunnel-id" {
        return &tunnel.TunnelId
    }
    return nil
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-attributes"] = &tunnel.TunnelAttributes
    children["tunnel-id"] = &tunnel.TunnelId
    return children
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-name"] = tunnel.TunnelName
    leafs["tunnel-type"] = tunnel.TunnelType
    leafs["enable"] = tunnel.Enable
    return leafs
}

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetBundleName() string { return "cisco_ios_xr" }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetYangName() string { return "tunnel" }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) SetParent(parent types.Entity) { tunnel.parent = parent }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetParent() types.Entity { return tunnel.parent }

func (tunnel *MplsTe_NamedTunnels_Tunnels_Tunnel) GetParentYangName() string { return "tunnels" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes
// MPLS tunnel attributes
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // shutdown the tunnel. The type is interface{}.
    Shutdown interface{}

    // Forward class value. The type is interface{} with range: 1..7.
    ForwardClass interface{}

    // Set the destination of the tunnel. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Destination interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Path selection metric to use in path calculation. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Enable the soft-preemption feature on the tunnel. The type is interface{}.
    SoftPreemption interface{}

    // Tunnel loadsharing metric. The type is interface{} with range:
    // 1..4294967295.
    LoadShare interface{}

    // Tunnel path setup table.
    PathSetups MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups

    // Configure path selection properties.
    TunnelPathSelection MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection

    // Tunnel Interface Auto-bandwidth configuration data.
    AutoBandwidth MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth

    // Tunnel Setup and Hold Priorities.
    Priority MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority

    // Log tunnel LSP messages.
    Logging MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging

    // Tunnel bandwidth requirement.
    Bandwidth MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth

    // Parameters for IGP routing over tunnel.
    Autoroute MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetFilter() yfilter.YFilter { return tunnelAttributes.YFilter }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) SetFilter(yf yfilter.YFilter) { tunnelAttributes.YFilter = yf }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetGoName(yname string) string {
    if yname == "shutdown" { return "Shutdown" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "destination" { return "Destination" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "soft-preemption" { return "SoftPreemption" }
    if yname == "load-share" { return "LoadShare" }
    if yname == "path-setups" { return "PathSetups" }
    if yname == "tunnel-path-selection" { return "TunnelPathSelection" }
    if yname == "auto-bandwidth" { return "AutoBandwidth" }
    if yname == "priority" { return "Priority" }
    if yname == "logging" { return "Logging" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "autoroute" { return "Autoroute" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetSegmentPath() string {
    return "tunnel-attributes"
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-setups" {
        return &tunnelAttributes.PathSetups
    }
    if childYangName == "tunnel-path-selection" {
        return &tunnelAttributes.TunnelPathSelection
    }
    if childYangName == "auto-bandwidth" {
        return &tunnelAttributes.AutoBandwidth
    }
    if childYangName == "priority" {
        return &tunnelAttributes.Priority
    }
    if childYangName == "logging" {
        return &tunnelAttributes.Logging
    }
    if childYangName == "bandwidth" {
        return &tunnelAttributes.Bandwidth
    }
    if childYangName == "autoroute" {
        return &tunnelAttributes.Autoroute
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &tunnelAttributes.NewStyleAffinityAffinityTypes
    }
    if childYangName == "fast-reroute" {
        return &tunnelAttributes.FastReroute
    }
    return nil
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-setups"] = &tunnelAttributes.PathSetups
    children["tunnel-path-selection"] = &tunnelAttributes.TunnelPathSelection
    children["auto-bandwidth"] = &tunnelAttributes.AutoBandwidth
    children["priority"] = &tunnelAttributes.Priority
    children["logging"] = &tunnelAttributes.Logging
    children["bandwidth"] = &tunnelAttributes.Bandwidth
    children["autoroute"] = &tunnelAttributes.Autoroute
    children["new-style-affinity-affinity-types"] = &tunnelAttributes.NewStyleAffinityAffinityTypes
    children["fast-reroute"] = &tunnelAttributes.FastReroute
    return children
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["shutdown"] = tunnelAttributes.Shutdown
    leafs["forward-class"] = tunnelAttributes.ForwardClass
    leafs["destination"] = tunnelAttributes.Destination
    leafs["record-route"] = tunnelAttributes.RecordRoute
    leafs["path-selection-metric"] = tunnelAttributes.PathSelectionMetric
    leafs["soft-preemption"] = tunnelAttributes.SoftPreemption
    leafs["load-share"] = tunnelAttributes.LoadShare
    return leafs
}

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetYangName() string { return "tunnel-attributes" }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) SetParent(parent types.Entity) { tunnelAttributes.parent = parent }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetParent() types.Entity { return tunnelAttributes.parent }

func (tunnelAttributes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes) GetParentYangName() string { return "tunnel" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups
// Tunnel path setup table
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel path setup. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup.
    PathSetup []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetFilter() yfilter.YFilter { return pathSetups.YFilter }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) SetFilter(yf yfilter.YFilter) { pathSetups.YFilter = yf }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetGoName(yname string) string {
    if yname == "path-setup" { return "PathSetup" }
    return ""
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetSegmentPath() string {
    return "path-setups"
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-setup" {
        for _, c := range pathSetups.PathSetup {
            if pathSetups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup{}
        pathSetups.PathSetup = append(pathSetups.PathSetup, child)
        return &pathSetups.PathSetup[len(pathSetups.PathSetup)-1]
    }
    return nil
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathSetups.PathSetup {
        children[pathSetups.PathSetup[i].GetSegmentPath()] = &pathSetups.PathSetup[i]
    }
    return children
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetBundleName() string { return "cisco_ios_xr" }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetYangName() string { return "path-setups" }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) SetParent(parent types.Entity) { pathSetups.parent = parent }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetParent() types.Entity { return pathSetups.parent }

func (pathSetups *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup
// Tunnel path setup
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    PathSetupName interface{}

    // Path preference level. The type is interface{} with range:
    // -2147483648..2147483647.
    Preference interface{}

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Path computation method.
    PathComputation MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetFilter() yfilter.YFilter { return pathSetup.YFilter }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) SetFilter(yf yfilter.YFilter) { pathSetup.YFilter = yf }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetGoName(yname string) string {
    if yname == "path-setup-name" { return "PathSetupName" }
    if yname == "preference" { return "Preference" }
    if yname == "enable" { return "Enable" }
    if yname == "path-computation" { return "PathComputation" }
    return ""
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetSegmentPath() string {
    return "path-setup" + "[path-setup-name='" + fmt.Sprintf("%v", pathSetup.PathSetupName) + "']"
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-computation" {
        return &pathSetup.PathComputation
    }
    return nil
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-computation"] = &pathSetup.PathComputation
    return children
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-setup-name"] = pathSetup.PathSetupName
    leafs["preference"] = pathSetup.Preference
    leafs["enable"] = pathSetup.Enable
    return leafs
}

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetBundleName() string { return "cisco_ios_xr" }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetYangName() string { return "path-setup" }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) SetParent(parent types.Entity) { pathSetup.parent = parent }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetParent() types.Entity { return pathSetup.parent }

func (pathSetup *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup) GetParentYangName() string { return "path-setups" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation
// Path computation method
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path computation method. The type is MplsTePathComputationMethod. This
    // attribute is mandatory.
    PathComputationMethod interface{}

    // Explicit Path Name. The type is string.
    ExplicitPathName interface{}

    // Path Computation Server Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    PathComputationServer interface{}
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetFilter() yfilter.YFilter { return pathComputation.YFilter }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) SetFilter(yf yfilter.YFilter) { pathComputation.YFilter = yf }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetGoName(yname string) string {
    if yname == "path-computation-method" { return "PathComputationMethod" }
    if yname == "explicit-path-name" { return "ExplicitPathName" }
    if yname == "path-computation-server" { return "PathComputationServer" }
    return ""
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetSegmentPath() string {
    return "path-computation"
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-computation-method"] = pathComputation.PathComputationMethod
    leafs["explicit-path-name"] = pathComputation.ExplicitPathName
    leafs["path-computation-server"] = pathComputation.PathComputationServer
    return leafs
}

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetBundleName() string { return "cisco_ios_xr" }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetYangName() string { return "path-computation" }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) SetParent(parent types.Entity) { pathComputation.parent = parent }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetParent() types.Entity { return pathComputation.parent }

func (pathComputation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_PathSetups_PathSetup_PathComputation) GetParentYangName() string { return "path-setup" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection
// Configure path selection properties
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // CSPF tiebreaker to use in path calculation. The type is
    // MplsTePathSelectionTiebreaker.
    Tiebreaker interface{}

    // Path selection hop limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..255.
    PathSelectionHopLimit interface{}

    // Path selection cost limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..4294967295.
    PathSelectionCostLimit interface{}

    // Path invalidation configuration for this specific tunnel.
    Invalidation MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetFilter() yfilter.YFilter { return tunnelPathSelection.YFilter }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) SetFilter(yf yfilter.YFilter) { tunnelPathSelection.YFilter = yf }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    if yname == "path-selection-hop-limit" { return "PathSelectionHopLimit" }
    if yname == "path-selection-cost-limit" { return "PathSelectionCostLimit" }
    if yname == "invalidation" { return "Invalidation" }
    return ""
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetSegmentPath() string {
    return "tunnel-path-selection"
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalidation" {
        return &tunnelPathSelection.Invalidation
    }
    return nil
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalidation"] = &tunnelPathSelection.Invalidation
    return children
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker"] = tunnelPathSelection.Tiebreaker
    leafs["path-selection-hop-limit"] = tunnelPathSelection.PathSelectionHopLimit
    leafs["path-selection-cost-limit"] = tunnelPathSelection.PathSelectionCostLimit
    return leafs
}

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetYangName() string { return "tunnel-path-selection" }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) SetParent(parent types.Entity) { tunnelPathSelection.parent = parent }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetParent() types.Entity { return tunnelPathSelection.parent }

func (tunnelPathSelection *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation
// Path invalidation configuration for this
// specific tunnel
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetFilter() yfilter.YFilter { return invalidation.YFilter }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) SetFilter(yf yfilter.YFilter) { invalidation.YFilter = yf }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetGoName(yname string) string {
    if yname == "path-invalidation-timeout" { return "PathInvalidationTimeout" }
    if yname == "path-invalidation-action" { return "PathInvalidationAction" }
    return ""
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetSegmentPath() string {
    return "invalidation"
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-invalidation-timeout"] = invalidation.PathInvalidationTimeout
    leafs["path-invalidation-action"] = invalidation.PathInvalidationAction
    return leafs
}

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetBundleName() string { return "cisco_ios_xr" }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetYangName() string { return "invalidation" }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) SetParent(parent types.Entity) { invalidation.parent = parent }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetParent() types.Entity { return invalidation.parent }

func (invalidation *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_TunnelPathSelection_Invalidation) GetParentYangName() string { return "tunnel-path-selection" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth
// Tunnel Interface Auto-bandwidth configuration
// data
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable auto bandwidth underflow detection. The type is bool.
    UnderflowEnable interface{}

    // This object is only valid for tunnel interfaces and it controls whether
    // that interface has auto-bw enabled on it or not.The object must be set
    // before any other auto-bw configuration is supplied for the interface, and
    // must be the last auto-bw configuration object to be removed . The type is
    // bool.
    Enabled interface{}

    // Set the tunnel auto-bw application frequency in minutes. The type is
    // interface{} with range: 5..10080. Units are minute.
    ApplicationFrequency interface{}

    // Enable auto bandwidth overflow detection. The type is bool.
    OverflowEnable interface{}

    // Enable bandwidth collection only, no auto-bw adjustment. The type is
    // interface{}.
    CollectionOnly interface{}

    // Configuring the tunnel underflow detection.
    Underflow MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow

    // Configuring the tunnel overflow detection.
    Overflow MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow

    // Set min/max bandwidth auto-bw can apply on a tunnel.
    BandwidthLimits MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits

    // Set the bandwidth change threshold to trigger adjustment.
    AdjustmentThreshold MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetFilter() yfilter.YFilter { return autoBandwidth.YFilter }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) SetFilter(yf yfilter.YFilter) { autoBandwidth.YFilter = yf }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetGoName(yname string) string {
    if yname == "underflow-enable" { return "UnderflowEnable" }
    if yname == "enabled" { return "Enabled" }
    if yname == "application-frequency" { return "ApplicationFrequency" }
    if yname == "overflow-enable" { return "OverflowEnable" }
    if yname == "collection-only" { return "CollectionOnly" }
    if yname == "underflow" { return "Underflow" }
    if yname == "overflow" { return "Overflow" }
    if yname == "bandwidth-limits" { return "BandwidthLimits" }
    if yname == "adjustment-threshold" { return "AdjustmentThreshold" }
    return ""
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetSegmentPath() string {
    return "auto-bandwidth"
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "underflow" {
        return &autoBandwidth.Underflow
    }
    if childYangName == "overflow" {
        return &autoBandwidth.Overflow
    }
    if childYangName == "bandwidth-limits" {
        return &autoBandwidth.BandwidthLimits
    }
    if childYangName == "adjustment-threshold" {
        return &autoBandwidth.AdjustmentThreshold
    }
    return nil
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["underflow"] = &autoBandwidth.Underflow
    children["overflow"] = &autoBandwidth.Overflow
    children["bandwidth-limits"] = &autoBandwidth.BandwidthLimits
    children["adjustment-threshold"] = &autoBandwidth.AdjustmentThreshold
    return children
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["underflow-enable"] = autoBandwidth.UnderflowEnable
    leafs["enabled"] = autoBandwidth.Enabled
    leafs["application-frequency"] = autoBandwidth.ApplicationFrequency
    leafs["overflow-enable"] = autoBandwidth.OverflowEnable
    leafs["collection-only"] = autoBandwidth.CollectionOnly
    return leafs
}

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetYangName() string { return "auto-bandwidth" }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) SetParent(parent types.Entity) { autoBandwidth.parent = parent }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetParent() types.Entity { return autoBandwidth.parent }

func (autoBandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow
// Configuring the tunnel underflow detection
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an underflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    UnderflowThresholdPercent interface{}

    // Bandwidth change value to trigger an underflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    UnderflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    UnderflowThresholdLimit interface{}
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetFilter() yfilter.YFilter { return underflow.YFilter }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) SetFilter(yf yfilter.YFilter) { underflow.YFilter = yf }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetGoName(yname string) string {
    if yname == "underflow-threshold-percent" { return "UnderflowThresholdPercent" }
    if yname == "underflow-threshold-value" { return "UnderflowThresholdValue" }
    if yname == "underflow-threshold-limit" { return "UnderflowThresholdLimit" }
    return ""
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetSegmentPath() string {
    return "underflow"
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["underflow-threshold-percent"] = underflow.UnderflowThresholdPercent
    leafs["underflow-threshold-value"] = underflow.UnderflowThresholdValue
    leafs["underflow-threshold-limit"] = underflow.UnderflowThresholdLimit
    return leafs
}

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetBundleName() string { return "cisco_ios_xr" }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetYangName() string { return "underflow" }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) SetParent(parent types.Entity) { underflow.parent = parent }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetParent() types.Entity { return underflow.parent }

func (underflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Underflow) GetParentYangName() string { return "auto-bandwidth" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow
// Configuring the tunnel overflow detection
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger an overflow. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    OverflowThresholdPercent interface{}

    // Bandwidth change value to trigger an overflow (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    OverflowThresholdValue interface{}

    // Number of consecutive collections exceeding threshold. The type is
    // interface{} with range: 1..10. This attribute is mandatory.
    OverflowThresholdLimit interface{}
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetFilter() yfilter.YFilter { return overflow.YFilter }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) SetFilter(yf yfilter.YFilter) { overflow.YFilter = yf }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetGoName(yname string) string {
    if yname == "overflow-threshold-percent" { return "OverflowThresholdPercent" }
    if yname == "overflow-threshold-value" { return "OverflowThresholdValue" }
    if yname == "overflow-threshold-limit" { return "OverflowThresholdLimit" }
    return ""
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetSegmentPath() string {
    return "overflow"
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["overflow-threshold-percent"] = overflow.OverflowThresholdPercent
    leafs["overflow-threshold-value"] = overflow.OverflowThresholdValue
    leafs["overflow-threshold-limit"] = overflow.OverflowThresholdLimit
    return leafs
}

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetBundleName() string { return "cisco_ios_xr" }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetYangName() string { return "overflow" }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) SetParent(parent types.Entity) { overflow.parent = parent }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetParent() types.Entity { return overflow.parent }

func (overflow *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_Overflow) GetParentYangName() string { return "auto-bandwidth" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits
// Set min/max bandwidth auto-bw can apply on a
// tunnel
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set minimum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMinLimit interface{}

    // Set maximum bandwidth auto-bw can apply on a tunnel. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory.
    BandwidthMaxLimit interface{}
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetFilter() yfilter.YFilter { return bandwidthLimits.YFilter }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) SetFilter(yf yfilter.YFilter) { bandwidthLimits.YFilter = yf }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetGoName(yname string) string {
    if yname == "bandwidth-min-limit" { return "BandwidthMinLimit" }
    if yname == "bandwidth-max-limit" { return "BandwidthMaxLimit" }
    return ""
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetSegmentPath() string {
    return "bandwidth-limits"
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-min-limit"] = bandwidthLimits.BandwidthMinLimit
    leafs["bandwidth-max-limit"] = bandwidthLimits.BandwidthMaxLimit
    return leafs
}

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetYangName() string { return "bandwidth-limits" }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) SetParent(parent types.Entity) { bandwidthLimits.parent = parent }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetParent() types.Entity { return bandwidthLimits.parent }

func (bandwidthLimits *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_BandwidthLimits) GetParentYangName() string { return "auto-bandwidth" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold
// Set the bandwidth change threshold to trigger
// adjustment
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth change percent to trigger adjustment. The type is interface{}
    // with range: 1..100. This attribute is mandatory. Units are percentage.
    AdjustmentThresholdPercent interface{}

    // Bandwidth change value to trigger adjustment (kbps). The type is
    // interface{} with range: 10..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    AdjustmentThresholdValue interface{}
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetFilter() yfilter.YFilter { return adjustmentThreshold.YFilter }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) SetFilter(yf yfilter.YFilter) { adjustmentThreshold.YFilter = yf }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetGoName(yname string) string {
    if yname == "adjustment-threshold-percent" { return "AdjustmentThresholdPercent" }
    if yname == "adjustment-threshold-value" { return "AdjustmentThresholdValue" }
    return ""
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetSegmentPath() string {
    return "adjustment-threshold"
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adjustment-threshold-percent"] = adjustmentThreshold.AdjustmentThresholdPercent
    leafs["adjustment-threshold-value"] = adjustmentThreshold.AdjustmentThresholdValue
    return leafs
}

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetYangName() string { return "adjustment-threshold" }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) SetParent(parent types.Entity) { adjustmentThreshold.parent = parent }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetParent() types.Entity { return adjustmentThreshold.parent }

func (adjustmentThreshold *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_AutoBandwidth_AdjustmentThreshold) GetParentYangName() string { return "auto-bandwidth" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetYangName() string { return "priority" }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetParent() types.Entity { return priority.parent }

func (priority *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Priority) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging
// Log tunnel LSP messages
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    LspSwitchOverChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Log tunnel record-route messages. The type is interface{}.
    RecordRouteMesssage interface{}

    // Enable BFD session state change alarm. The type is interface{}.
    BfdStateMessage interface{}

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetGoName(yname string) string {
    if yname == "lsp-switch-over-change-message" { return "LspSwitchOverChangeMessage" }
    if yname == "all" { return "All" }
    if yname == "record-route-messsage" { return "RecordRouteMesssage" }
    if yname == "bfd-state-message" { return "BfdStateMessage" }
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    return ""
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-switch-over-change-message"] = logging.LspSwitchOverChangeMessage
    leafs["all"] = logging.All
    leafs["record-route-messsage"] = logging.RecordRouteMesssage
    leafs["bfd-state-message"] = logging.BfdStateMessage
    leafs["bandwidth-change-message"] = logging.BandwidthChangeMessage
    leafs["reoptimize-attempts-message"] = logging.ReoptimizeAttemptsMessage
    leafs["reroute-messsage"] = logging.RerouteMesssage
    leafs["state-message"] = logging.StateMessage
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    leafs["reoptimized-message"] = logging.ReoptimizedMessage
    leafs["pcalc-failure-message"] = logging.PcalcFailureMessage
    return leafs
}

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Logging) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Bandwidth) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute
// Parameters for IGP routing over tunnel
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Announce tunnel to IGP.
    AutorouteAnnounce MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce

    // Tunnel Autoroute Destination(s).
    Destinations MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetFilter() yfilter.YFilter { return autoroute.YFilter }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) SetFilter(yf yfilter.YFilter) { autoroute.YFilter = yf }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetGoName(yname string) string {
    if yname == "autoroute-announce" { return "AutorouteAnnounce" }
    if yname == "destinations" { return "Destinations" }
    return ""
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetSegmentPath() string {
    return "autoroute"
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "autoroute-announce" {
        return &autoroute.AutorouteAnnounce
    }
    if childYangName == "destinations" {
        return &autoroute.Destinations
    }
    return nil
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["autoroute-announce"] = &autoroute.AutorouteAnnounce
    children["destinations"] = &autoroute.Destinations
    return children
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetBundleName() string { return "cisco_ios_xr" }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetYangName() string { return "autoroute" }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) SetParent(parent types.Entity) { autoroute.parent = parent }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetParent() types.Entity { return autoroute.parent }

func (autoroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce
// Announce tunnel to IGP
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable autoroute announce. The type is interface{}.
    Enable interface{}

    // Specify that the tunnel should be an IPv6 autoroute announce also. The type
    // is interface{}.
    IncludeIpv6 interface{}

    // Exclude traffic on autorouted tunnel.
    ExcludeTraffic MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic

    // Specify MPLS tunnel metric.
    Metric MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetFilter() yfilter.YFilter { return autorouteAnnounce.YFilter }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) SetFilter(yf yfilter.YFilter) { autorouteAnnounce.YFilter = yf }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "include-ipv6" { return "IncludeIpv6" }
    if yname == "exclude-traffic" { return "ExcludeTraffic" }
    if yname == "metric" { return "Metric" }
    return ""
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetSegmentPath() string {
    return "autoroute-announce"
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-traffic" {
        return &autorouteAnnounce.ExcludeTraffic
    }
    if childYangName == "metric" {
        return &autorouteAnnounce.Metric
    }
    return nil
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["exclude-traffic"] = &autorouteAnnounce.ExcludeTraffic
    children["metric"] = &autorouteAnnounce.Metric
    return children
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = autorouteAnnounce.Enable
    leafs["include-ipv6"] = autorouteAnnounce.IncludeIpv6
    return leafs
}

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetBundleName() string { return "cisco_ios_xr" }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetYangName() string { return "autoroute-announce" }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) SetParent(parent types.Entity) { autorouteAnnounce.parent = parent }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetParent() types.Entity { return autorouteAnnounce.parent }

func (autorouteAnnounce *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce) GetParentYangName() string { return "autoroute" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic
// Exclude traffic on autorouted tunnel
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude tunnel in IGP for SR prefixes. The type is interface{}.
    SegmentRouting interface{}
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetFilter() yfilter.YFilter { return excludeTraffic.YFilter }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) SetFilter(yf yfilter.YFilter) { excludeTraffic.YFilter = yf }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetGoName(yname string) string {
    if yname == "segment-routing" { return "SegmentRouting" }
    return ""
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetSegmentPath() string {
    return "exclude-traffic"
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["segment-routing"] = excludeTraffic.SegmentRouting
    return leafs
}

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetBundleName() string { return "cisco_ios_xr" }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetYangName() string { return "exclude-traffic" }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) SetParent(parent types.Entity) { excludeTraffic.parent = parent }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetParent() types.Entity { return excludeTraffic.parent }

func (excludeTraffic *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_ExcludeTraffic) GetParentYangName() string { return "autoroute-announce" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric
// Specify MPLS tunnel metric
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Autoroute tunnel metric type. The type is MplsTeAutorouteMetric.
    MetricType interface{}

    // The absolute metric value. The type is interface{} with range:
    // 1..2147483647.
    AbsoluteMetric interface{}

    // The value of the adjustment. The type is interface{} with range: -10..10.
    RelativeMetric interface{}

    // The constant metric value. The type is interface{} with range:
    // 1..2147483647.
    ConstantMetric interface{}
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetFilter() yfilter.YFilter { return metric.YFilter }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) SetFilter(yf yfilter.YFilter) { metric.YFilter = yf }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetGoName(yname string) string {
    if yname == "metric-type" { return "MetricType" }
    if yname == "absolute-metric" { return "AbsoluteMetric" }
    if yname == "relative-metric" { return "RelativeMetric" }
    if yname == "constant-metric" { return "ConstantMetric" }
    return ""
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetSegmentPath() string {
    return "metric"
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["metric-type"] = metric.MetricType
    leafs["absolute-metric"] = metric.AbsoluteMetric
    leafs["relative-metric"] = metric.RelativeMetric
    leafs["constant-metric"] = metric.ConstantMetric
    return leafs
}

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetBundleName() string { return "cisco_ios_xr" }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetYangName() string { return "metric" }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) SetParent(parent types.Entity) { metric.parent = parent }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetParent() types.Entity { return metric.parent }

func (metric *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_AutorouteAnnounce_Metric) GetParentYangName() string { return "autoroute-announce" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations
// Tunnel Autoroute Destination(s)
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address to add in RIB. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination.
    Destination []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetFilter() yfilter.YFilter { return destinations.YFilter }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) SetFilter(yf yfilter.YFilter) { destinations.YFilter = yf }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetGoName(yname string) string {
    if yname == "destination" { return "Destination" }
    return ""
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetSegmentPath() string {
    return "destinations"
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination" {
        for _, c := range destinations.Destination {
            if destinations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination{}
        destinations.Destination = append(destinations.Destination, child)
        return &destinations.Destination[len(destinations.Destination)-1]
    }
    return nil
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range destinations.Destination {
        children[destinations.Destination[i].GetSegmentPath()] = &destinations.Destination[i]
    }
    return children
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetBundleName() string { return "cisco_ios_xr" }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetYangName() string { return "destinations" }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) SetParent(parent types.Entity) { destinations.parent = parent }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetParent() types.Entity { return destinations.parent }

func (destinations *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations) GetParentYangName() string { return "autoroute" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination
// Destination address to add in RIB
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IP address of destination. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetSegmentPath() string {
    return "destination" + "[destination-address='" + fmt.Sprintf("%v", destination.DestinationAddress) + "']"
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = destination.DestinationAddress
    return leafs
}

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetYangName() string { return "destination" }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetParent() types.Entity { return destination.parent }

func (destination *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_Autoroute_Destinations_Destination) GetParentYangName() string { return "destinations" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetGoName(yname string) string {
    if yname == "bandwidth-protection" { return "BandwidthProtection" }
    if yname == "node-protection" { return "NodeProtection" }
    return ""
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-protection"] = fastReroute.BandwidthProtection
    leafs["node-protection"] = fastReroute.NodeProtection
    return leafs
}

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelAttributes_FastReroute) GetParentYangName() string { return "tunnel-attributes" }

// MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId
// Set the tunnel ID
// This type is a presence type.
type MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel ID Type. The type is MplsTeTunnelId. This attribute is mandatory.
    TunnelIdType interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetFilter() yfilter.YFilter { return tunnelId.YFilter }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) SetFilter(yf yfilter.YFilter) { tunnelId.YFilter = yf }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetGoName(yname string) string {
    if yname == "tunnel-id-type" { return "TunnelIdType" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetSegmentPath() string {
    return "tunnel-id"
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-id-type"] = tunnelId.TunnelIdType
    leafs["tunnel-id"] = tunnelId.TunnelId
    return leafs
}

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetYangName() string { return "tunnel-id" }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) SetParent(parent types.Entity) { tunnelId.parent = parent }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetParent() types.Entity { return tunnelId.parent }

func (tunnelId *MplsTe_NamedTunnels_Tunnels_Tunnel_TunnelId) GetParentYangName() string { return "tunnel" }

// MplsTe_GmplsUni
// GMPLS-UNI configuration
type MplsTe_GmplsUni struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GMPLS-UNI timer configuration.
    Timers MplsTe_GmplsUni_Timers

    // GMPLS-UNI controllers.
    Controllers MplsTe_GmplsUni_Controllers
}

func (gmplsUni *MplsTe_GmplsUni) GetFilter() yfilter.YFilter { return gmplsUni.YFilter }

func (gmplsUni *MplsTe_GmplsUni) SetFilter(yf yfilter.YFilter) { gmplsUni.YFilter = yf }

func (gmplsUni *MplsTe_GmplsUni) GetGoName(yname string) string {
    if yname == "timers" { return "Timers" }
    if yname == "controllers" { return "Controllers" }
    return ""
}

func (gmplsUni *MplsTe_GmplsUni) GetSegmentPath() string {
    return "gmpls-uni"
}

func (gmplsUni *MplsTe_GmplsUni) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timers" {
        return &gmplsUni.Timers
    }
    if childYangName == "controllers" {
        return &gmplsUni.Controllers
    }
    return nil
}

func (gmplsUni *MplsTe_GmplsUni) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timers"] = &gmplsUni.Timers
    children["controllers"] = &gmplsUni.Controllers
    return children
}

func (gmplsUni *MplsTe_GmplsUni) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (gmplsUni *MplsTe_GmplsUni) GetBundleName() string { return "cisco_ios_xr" }

func (gmplsUni *MplsTe_GmplsUni) GetYangName() string { return "gmpls-uni" }

func (gmplsUni *MplsTe_GmplsUni) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gmplsUni *MplsTe_GmplsUni) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gmplsUni *MplsTe_GmplsUni) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gmplsUni *MplsTe_GmplsUni) SetParent(parent types.Entity) { gmplsUni.parent = parent }

func (gmplsUni *MplsTe_GmplsUni) GetParent() types.Entity { return gmplsUni.parent }

func (gmplsUni *MplsTe_GmplsUni) GetParentYangName() string { return "mpls-te" }

// MplsTe_GmplsUni_Timers
// GMPLS-UNI timer configuration
type MplsTe_GmplsUni_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GMPLS-UNI path-option timer configuration.
    PathOptionTimers MplsTe_GmplsUni_Timers_PathOptionTimers
}

func (timers *MplsTe_GmplsUni_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *MplsTe_GmplsUni_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *MplsTe_GmplsUni_Timers) GetGoName(yname string) string {
    if yname == "path-option-timers" { return "PathOptionTimers" }
    return ""
}

func (timers *MplsTe_GmplsUni_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *MplsTe_GmplsUni_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option-timers" {
        return &timers.PathOptionTimers
    }
    return nil
}

func (timers *MplsTe_GmplsUni_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-option-timers"] = &timers.PathOptionTimers
    return children
}

func (timers *MplsTe_GmplsUni_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timers *MplsTe_GmplsUni_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *MplsTe_GmplsUni_Timers) GetYangName() string { return "timers" }

func (timers *MplsTe_GmplsUni_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *MplsTe_GmplsUni_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *MplsTe_GmplsUni_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *MplsTe_GmplsUni_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *MplsTe_GmplsUni_Timers) GetParent() types.Entity { return timers.parent }

func (timers *MplsTe_GmplsUni_Timers) GetParentYangName() string { return "gmpls-uni" }

// MplsTe_GmplsUni_Timers_PathOptionTimers
// GMPLS-UNI path-option timer configuration
type MplsTe_GmplsUni_Timers_PathOptionTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GMPLS-UNI path-option holddown timer configuration.
    Holddown MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetFilter() yfilter.YFilter { return pathOptionTimers.YFilter }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) SetFilter(yf yfilter.YFilter) { pathOptionTimers.YFilter = yf }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetGoName(yname string) string {
    if yname == "holddown" { return "Holddown" }
    return ""
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetSegmentPath() string {
    return "path-option-timers"
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "holddown" {
        return &pathOptionTimers.Holddown
    }
    return nil
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["holddown"] = &pathOptionTimers.Holddown
    return children
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetYangName() string { return "path-option-timers" }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) SetParent(parent types.Entity) { pathOptionTimers.parent = parent }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetParent() types.Entity { return pathOptionTimers.parent }

func (pathOptionTimers *MplsTe_GmplsUni_Timers_PathOptionTimers) GetParentYangName() string { return "timers" }

// MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown
// GMPLS-UNI path-option holddown timer
// configuration
type MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum holddown (seconds). The type is interface{} with range: 5..3600.
    // Units are second.
    Minimum interface{}

    // Maximum holddown (seconds). The type is interface{} with range: 5..3600.
    // Units are second.
    Maximum interface{}
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetFilter() yfilter.YFilter { return holddown.YFilter }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) SetFilter(yf yfilter.YFilter) { holddown.YFilter = yf }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetGoName(yname string) string {
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    return ""
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetSegmentPath() string {
    return "holddown"
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum"] = holddown.Minimum
    leafs["maximum"] = holddown.Maximum
    return leafs
}

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetBundleName() string { return "cisco_ios_xr" }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetYangName() string { return "holddown" }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) SetParent(parent types.Entity) { holddown.parent = parent }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetParent() types.Entity { return holddown.parent }

func (holddown *MplsTe_GmplsUni_Timers_PathOptionTimers_Holddown) GetParentYangName() string { return "path-option-timers" }

// MplsTe_GmplsUni_Controllers
// GMPLS-UNI controllers
type MplsTe_GmplsUni_Controllers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a GMPLS controller. The type is slice of
    // MplsTe_GmplsUni_Controllers_Controller.
    Controller []MplsTe_GmplsUni_Controllers_Controller
}

func (controllers *MplsTe_GmplsUni_Controllers) GetFilter() yfilter.YFilter { return controllers.YFilter }

func (controllers *MplsTe_GmplsUni_Controllers) SetFilter(yf yfilter.YFilter) { controllers.YFilter = yf }

func (controllers *MplsTe_GmplsUni_Controllers) GetGoName(yname string) string {
    if yname == "controller" { return "Controller" }
    return ""
}

func (controllers *MplsTe_GmplsUni_Controllers) GetSegmentPath() string {
    return "controllers"
}

func (controllers *MplsTe_GmplsUni_Controllers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller" {
        for _, c := range controllers.Controller {
            if controllers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsUni_Controllers_Controller{}
        controllers.Controller = append(controllers.Controller, child)
        return &controllers.Controller[len(controllers.Controller)-1]
    }
    return nil
}

func (controllers *MplsTe_GmplsUni_Controllers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllers.Controller {
        children[controllers.Controller[i].GetSegmentPath()] = &controllers.Controller[i]
    }
    return children
}

func (controllers *MplsTe_GmplsUni_Controllers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllers *MplsTe_GmplsUni_Controllers) GetBundleName() string { return "cisco_ios_xr" }

func (controllers *MplsTe_GmplsUni_Controllers) GetYangName() string { return "controllers" }

func (controllers *MplsTe_GmplsUni_Controllers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllers *MplsTe_GmplsUni_Controllers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllers *MplsTe_GmplsUni_Controllers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllers *MplsTe_GmplsUni_Controllers) SetParent(parent types.Entity) { controllers.parent = parent }

func (controllers *MplsTe_GmplsUni_Controllers) GetParent() types.Entity { return controllers.parent }

func (controllers *MplsTe_GmplsUni_Controllers) GetParentYangName() string { return "gmpls-uni" }

// MplsTe_GmplsUni_Controllers_Controller
// Configure a GMPLS controller
type MplsTe_GmplsUni_Controllers_Controller struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Enable GMPLS-UNI on the link. The type is interface{}.
    Enable interface{}

    // Announce discovered tunnel properties to system.
    Announce MplsTe_GmplsUni_Controllers_Controller_Announce

    // Controller logging.
    ControllerLogging MplsTe_GmplsUni_Controllers_Controller_ControllerLogging

    // GMPLS-UNI tunnel-head properties.
    GmplsUnitunnelHead MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetFilter() yfilter.YFilter { return controller.YFilter }

func (controller *MplsTe_GmplsUni_Controllers_Controller) SetFilter(yf yfilter.YFilter) { controller.YFilter = yf }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "enable" { return "Enable" }
    if yname == "announce" { return "Announce" }
    if yname == "controller-logging" { return "ControllerLogging" }
    if yname == "gmpls-unitunnel-head" { return "GmplsUnitunnelHead" }
    return ""
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetSegmentPath() string {
    return "controller" + "[controller-name='" + fmt.Sprintf("%v", controller.ControllerName) + "']"
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "announce" {
        return &controller.Announce
    }
    if childYangName == "controller-logging" {
        return &controller.ControllerLogging
    }
    if childYangName == "gmpls-unitunnel-head" {
        return &controller.GmplsUnitunnelHead
    }
    return nil
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["announce"] = &controller.Announce
    children["controller-logging"] = &controller.ControllerLogging
    children["gmpls-unitunnel-head"] = &controller.GmplsUnitunnelHead
    return children
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controller.ControllerName
    leafs["enable"] = controller.Enable
    return leafs
}

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetBundleName() string { return "cisco_ios_xr" }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetYangName() string { return "controller" }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controller *MplsTe_GmplsUni_Controllers_Controller) SetParent(parent types.Entity) { controller.parent = parent }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetParent() types.Entity { return controller.parent }

func (controller *MplsTe_GmplsUni_Controllers_Controller) GetParentYangName() string { return "controllers" }

// MplsTe_GmplsUni_Controllers_Controller_Announce
// Announce discovered tunnel properties to
// system
type MplsTe_GmplsUni_Controllers_Controller_Announce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable announcement of discovered SRLGs. The type is interface{}.
    SrlGs interface{}
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetFilter() yfilter.YFilter { return announce.YFilter }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) SetFilter(yf yfilter.YFilter) { announce.YFilter = yf }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetGoName(yname string) string {
    if yname == "srl-gs" { return "SrlGs" }
    return ""
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetSegmentPath() string {
    return "announce"
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srl-gs"] = announce.SrlGs
    return leafs
}

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetBundleName() string { return "cisco_ios_xr" }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetYangName() string { return "announce" }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) SetParent(parent types.Entity) { announce.parent = parent }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetParent() types.Entity { return announce.parent }

func (announce *MplsTe_GmplsUni_Controllers_Controller_Announce) GetParentYangName() string { return "controller" }

// MplsTe_GmplsUni_Controllers_Controller_ControllerLogging
// Controller logging
type MplsTe_GmplsUni_Controllers_Controller_ControllerLogging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable logging of changes to of discovered SRLGs. The type is interface{}.
    DiscoveredSrlgChangeLogging interface{}
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetFilter() yfilter.YFilter { return controllerLogging.YFilter }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) SetFilter(yf yfilter.YFilter) { controllerLogging.YFilter = yf }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetGoName(yname string) string {
    if yname == "discovered-srlg-change-logging" { return "DiscoveredSrlgChangeLogging" }
    return ""
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetSegmentPath() string {
    return "controller-logging"
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["discovered-srlg-change-logging"] = controllerLogging.DiscoveredSrlgChangeLogging
    return leafs
}

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetBundleName() string { return "cisco_ios_xr" }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetYangName() string { return "controller-logging" }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) SetParent(parent types.Entity) { controllerLogging.parent = parent }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetParent() types.Entity { return controllerLogging.parent }

func (controllerLogging *MplsTe_GmplsUni_Controllers_Controller_ControllerLogging) GetParentYangName() string { return "controller" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead
// GMPLS-UNI tunnel-head properties
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GMPLS-UNI head tunnel-id. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Set link as a GMPLS tunnel head. The type is interface{}.
    Enable interface{}

    // Set the destination of the tunnel. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Destination interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // The name of the tunnel to be included in signalling messages. The type is
    // string with length: 1..254.
    SignalledName interface{}

    // Path-option configuration.
    PathOptions MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions

    // Tunnel property recording.
    Recording MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording

    // Tunnel event logging.
    Logging MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging

    // Tunnel Setup and Hold Priorities.
    Priority MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetFilter() yfilter.YFilter { return gmplsUnitunnelHead.YFilter }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) SetFilter(yf yfilter.YFilter) { gmplsUnitunnelHead.YFilter = yf }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetGoName(yname string) string {
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "enable" { return "Enable" }
    if yname == "destination" { return "Destination" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "signalled-name" { return "SignalledName" }
    if yname == "path-options" { return "PathOptions" }
    if yname == "recording" { return "Recording" }
    if yname == "logging" { return "Logging" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetSegmentPath() string {
    return "gmpls-unitunnel-head"
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-options" {
        return &gmplsUnitunnelHead.PathOptions
    }
    if childYangName == "recording" {
        return &gmplsUnitunnelHead.Recording
    }
    if childYangName == "logging" {
        return &gmplsUnitunnelHead.Logging
    }
    if childYangName == "priority" {
        return &gmplsUnitunnelHead.Priority
    }
    return nil
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-options"] = &gmplsUnitunnelHead.PathOptions
    children["recording"] = &gmplsUnitunnelHead.Recording
    children["logging"] = &gmplsUnitunnelHead.Logging
    children["priority"] = &gmplsUnitunnelHead.Priority
    return children
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-id"] = gmplsUnitunnelHead.TunnelId
    leafs["enable"] = gmplsUnitunnelHead.Enable
    leafs["destination"] = gmplsUnitunnelHead.Destination
    leafs["record-route"] = gmplsUnitunnelHead.RecordRoute
    leafs["signalled-name"] = gmplsUnitunnelHead.SignalledName
    return leafs
}

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetBundleName() string { return "cisco_ios_xr" }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetYangName() string { return "gmpls-unitunnel-head" }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) SetParent(parent types.Entity) { gmplsUnitunnelHead.parent = parent }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetParent() types.Entity { return gmplsUnitunnelHead.parent }

func (gmplsUnitunnelHead *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead) GetParentYangName() string { return "controller" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions
// Path-option configuration
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A Path-option. The type is slice of
    // MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption.
    PathOption []MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetFilter() yfilter.YFilter { return pathOptions.YFilter }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) SetFilter(yf yfilter.YFilter) { pathOptions.YFilter = yf }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetGoName(yname string) string {
    if yname == "path-option" { return "PathOption" }
    return ""
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetSegmentPath() string {
    return "path-options"
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option" {
        for _, c := range pathOptions.PathOption {
            if pathOptions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption{}
        pathOptions.PathOption = append(pathOptions.PathOption, child)
        return &pathOptions.PathOption[len(pathOptions.PathOption)-1]
    }
    return nil
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptions.PathOption {
        children[pathOptions.PathOption[i].GetSegmentPath()] = &pathOptions.PathOption[i]
    }
    return children
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetYangName() string { return "path-options" }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) SetParent(parent types.Entity) { pathOptions.parent = parent }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetParent() types.Entity { return pathOptions.parent }

func (pathOptions *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions) GetParentYangName() string { return "gmpls-unitunnel-head" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption
// A Path-option
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption. This attribute
    // is mandatory.
    PathType interface{}

    // The ID of the explicit path associated with this option. The type is
    // interface{} with range: 1..65535. The default value is 1.
    PathId interface{}

    // The name of the explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // The route-exclusion type. The type is interface{}. This attribute is
    // mandatory.
    XroType interface{}

    // The name of the XRO attribute set to be used for this path-option. The type
    // is string with length: 1..64.
    XroAttributeSetName interface{}

    // Path option properties: must be Lockdown. The type is
    // MplsTePathOptionProperty. This attribute is mandatory.
    Lockdown interface{}

    // Path option properties: must be verbatim if set. The type is
    // MplsTePathOptionProperty. The default value is none.
    Verbatim interface{}

    // Signaled label type. The type is MplsTeSignaledLabel. The default value is
    // not-set.
    SignaledLabel interface{}

    // DWDM channel number. The type is interface{} with range: 1..89. The default
    // value is 1.
    DwdmChannel interface{}
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetFilter() yfilter.YFilter { return pathOption.YFilter }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) SetFilter(yf yfilter.YFilter) { pathOption.YFilter = yf }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetGoName(yname string) string {
    if yname == "preference-level" { return "PreferenceLevel" }
    if yname == "path-type" { return "PathType" }
    if yname == "path-id" { return "PathId" }
    if yname == "path-name" { return "PathName" }
    if yname == "xro-type" { return "XroType" }
    if yname == "xro-attribute-set-name" { return "XroAttributeSetName" }
    if yname == "lockdown" { return "Lockdown" }
    if yname == "verbatim" { return "Verbatim" }
    if yname == "signaled-label" { return "SignaledLabel" }
    if yname == "dwdm-channel" { return "DwdmChannel" }
    return ""
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetSegmentPath() string {
    return "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["preference-level"] = pathOption.PreferenceLevel
    leafs["path-type"] = pathOption.PathType
    leafs["path-id"] = pathOption.PathId
    leafs["path-name"] = pathOption.PathName
    leafs["xro-type"] = pathOption.XroType
    leafs["xro-attribute-set-name"] = pathOption.XroAttributeSetName
    leafs["lockdown"] = pathOption.Lockdown
    leafs["verbatim"] = pathOption.Verbatim
    leafs["signaled-label"] = pathOption.SignaledLabel
    leafs["dwdm-channel"] = pathOption.DwdmChannel
    return leafs
}

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetBundleName() string { return "cisco_ios_xr" }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetYangName() string { return "path-option" }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) SetParent(parent types.Entity) { pathOption.parent = parent }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetParent() types.Entity { return pathOption.parent }

func (pathOption *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_PathOptions_PathOption) GetParentYangName() string { return "path-options" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording
// Tunnel property recording
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable SRLG-recording during signaling. The type is interface{}.
    Srlg interface{}
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetFilter() yfilter.YFilter { return recording.YFilter }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) SetFilter(yf yfilter.YFilter) { recording.YFilter = yf }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetGoName(yname string) string {
    if yname == "srlg" { return "Srlg" }
    return ""
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetSegmentPath() string {
    return "recording"
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srlg"] = recording.Srlg
    return leafs
}

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetBundleName() string { return "cisco_ios_xr" }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetYangName() string { return "recording" }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) SetParent(parent types.Entity) { recording.parent = parent }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetParent() types.Entity { return recording.parent }

func (recording *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Recording) GetParentYangName() string { return "gmpls-unitunnel-head" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging
// Tunnel event logging
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetGoName(yname string) string {
    if yname == "state-message" { return "StateMessage" }
    return ""
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-message"] = logging.StateMessage
    return leafs
}

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Logging) GetParentYangName() string { return "gmpls-unitunnel-head" }

// MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetYangName() string { return "priority" }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetParent() types.Entity { return priority.parent }

func (priority *MplsTe_GmplsUni_Controllers_Controller_GmplsUnitunnelHead_Priority) GetParentYangName() string { return "gmpls-unitunnel-head" }

// MplsTe_GlobalAttributes
// Configure MPLS TE global attributes
type MplsTe_GlobalAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log NSR status messages. The type is interface{}.
    LogNsrStatus interface{}

    // Log ISSU status messages. The type is interface{}.
    LogIssuStatus interface{}

    // Enable reoptimization based on link-up events. The type is interface{}.
    ReoptimizeLinkUp interface{}

    // Reoptimization Delay Cleanup Value (seconds). The type is interface{} with
    // range: 0..300. Units are second.
    ReoptimizeDelayCleanupTimer interface{}

    // Disable reoptimization after affinity failures. The type is interface{}.
    DisableReoptimizeAffinityFailure interface{}

    // The maximum number of tunnel heads that will be allowed. The type is
    // interface{} with range: 1..65536. The default value is 4096.
    MaximumTunnels interface{}

    // Holddown time for links which had Path Errors in seconds. The type is
    // interface{} with range: 0..300. Units are second. The default value is 10.
    LinkHolddownTimer interface{}

    // Enable Fault-OAM functionality for bidirectional tunnels. The type is
    // interface{}.
    FaultOam interface{}

    // Enable unequal load-balancing over tunnels to the same destination. The
    // type is interface{}.
    EnableUnequalLoadBalancing interface{}

    // Log all tail tunnel events. The type is interface{}.
    LogTail interface{}

    // Reoptimization Delay After FRR Value (seconds). The type is interface{}
    // with range: 0..120. Units are second.
    ReoptimizeDelayAfterFrrTimer interface{}

    // Auto-bandwidth global collection frequency in minutes. The type is
    // interface{} with range: 1..10080. Units are minute. The default value is 5.
    AutoBandwidthCollectFrequency interface{}

    // Seconds between path protect switchover and tunnel re-optimization. Set to
    // 0 to disable. The type is interface{} with range: 0..604800. Units are
    // second. The default value is 180.
    ReoptDelayPathProtectSwitchoverTimer interface{}

    // Always set to true. The type is interface{}.
    LogAll interface{}

    // Signalling retry for tunnels terminating outside the headend area. The type
    // is interface{} with range: 30..600. The default value is 120.
    LoosePathRetryPeriod interface{}

    // Load balance bandwidth during reoptimization. The type is interface{}.
    ReoptimizeLoadBalancing interface{}

    // Log all head tunnel events. The type is interface{}.
    LogHead interface{}

    // Deprecated - do not use. The type is interface{}.
    PathSelectionIgnoreOverload interface{}

    // Enable graceful preemption when there is a bandwidth reduction. The type is
    // interface{}.
    GracefulPreemptionOnBandwidthReduction interface{}

    // Enable explicit-null advertising to PHOP. The type is interface{}.
    AdvertiseExplicitNulls interface{}

    // Reoptimization Delay Install Value (seconds). The type is interface{} with
    // range: 0..3600. Units are second.
    ReoptimizeDelayInstallTimer interface{}

    // Delay reoptimizing current LSP after affinity failures. The type is
    // interface{} with range: 1..604800. Units are second.
    ReoptimizeDelayAfterAffinityFailureTimer interface{}

    // Log FRR Protection messages. The type is MplsTeLogFrrProtection.
    LogFrrProtection interface{}

    // Reoptimize timers period in seconds. The type is interface{} with range:
    // 0..604800. Units are second. The default value is 3600.
    ReoptimizeTimerFrequency interface{}

    // Log all mid tunnel events. The type is interface{}.
    LogMid interface{}

    // Log tunnel preemption messages. The type is interface{}.
    LogPreemption interface{}

    // Configure auto-tunnels feature.
    AutoTunnel MplsTe_GlobalAttributes_AutoTunnel

    // Configure HW OOR processing in MPLS-TE.
    HardwareOutOfResource MplsTe_GlobalAttributes_HardwareOutOfResource

    // Configure MPLS TE Secondary Router ID.
    SecondaryRouterIds MplsTe_GlobalAttributes_SecondaryRouterIds

    // Configure SRLG values and MPLS-TE properties.
    Srlg MplsTe_GlobalAttributes_Srlg

    // Configure MPLS TE route priority.
    Queues MplsTe_GlobalAttributes_Queues

    // MPLS-TE MIB properties.
    Mib MplsTe_GlobalAttributes_Mib

    // Attribute AttributeSets.
    AttributeSet MplsTe_GlobalAttributes_AttributeSet

    // BFD over MPLS TE Global Configurations.
    BfdOverLsp MplsTe_GlobalAttributes_BfdOverLsp

    // Bandwidth accounting configuration data.
    BandwidthAccounting MplsTe_GlobalAttributes_BandwidthAccounting

    // Configuration MPLS TE PCE attributes.
    PceAttributes MplsTe_GlobalAttributes_PceAttributes

    // Configure LSP OOR attributes in MPLS-TE.
    LspOutOfResource MplsTe_GlobalAttributes_LspOutOfResource

    // Soft preemption configuration data.
    SoftPreemption MplsTe_GlobalAttributes_SoftPreemption

    // Configure fast reroute attributes.
    FastReroute MplsTe_GlobalAttributes_FastReroute

    // Path selection configuration.
    PathSelection MplsTe_GlobalAttributes_PathSelection

    // Affinity Mapping Table configuration.
    AffinityMappings MplsTe_GlobalAttributes_AffinityMappings
}

func (globalAttributes *MplsTe_GlobalAttributes) GetFilter() yfilter.YFilter { return globalAttributes.YFilter }

func (globalAttributes *MplsTe_GlobalAttributes) SetFilter(yf yfilter.YFilter) { globalAttributes.YFilter = yf }

func (globalAttributes *MplsTe_GlobalAttributes) GetGoName(yname string) string {
    if yname == "log-nsr-status" { return "LogNsrStatus" }
    if yname == "log-issu-status" { return "LogIssuStatus" }
    if yname == "reoptimize-link-up" { return "ReoptimizeLinkUp" }
    if yname == "reoptimize-delay-cleanup-timer" { return "ReoptimizeDelayCleanupTimer" }
    if yname == "disable-reoptimize-affinity-failure" { return "DisableReoptimizeAffinityFailure" }
    if yname == "maximum-tunnels" { return "MaximumTunnels" }
    if yname == "link-holddown-timer" { return "LinkHolddownTimer" }
    if yname == "fault-oam" { return "FaultOam" }
    if yname == "enable-unequal-load-balancing" { return "EnableUnequalLoadBalancing" }
    if yname == "log-tail" { return "LogTail" }
    if yname == "reoptimize-delay-after-frr-timer" { return "ReoptimizeDelayAfterFrrTimer" }
    if yname == "auto-bandwidth-collect-frequency" { return "AutoBandwidthCollectFrequency" }
    if yname == "reopt-delay-path-protect-switchover-timer" { return "ReoptDelayPathProtectSwitchoverTimer" }
    if yname == "log-all" { return "LogAll" }
    if yname == "loose-path-retry-period" { return "LoosePathRetryPeriod" }
    if yname == "reoptimize-load-balancing" { return "ReoptimizeLoadBalancing" }
    if yname == "log-head" { return "LogHead" }
    if yname == "path-selection-ignore-overload" { return "PathSelectionIgnoreOverload" }
    if yname == "graceful-preemption-on-bandwidth-reduction" { return "GracefulPreemptionOnBandwidthReduction" }
    if yname == "advertise-explicit-nulls" { return "AdvertiseExplicitNulls" }
    if yname == "reoptimize-delay-install-timer" { return "ReoptimizeDelayInstallTimer" }
    if yname == "reoptimize-delay-after-affinity-failure-timer" { return "ReoptimizeDelayAfterAffinityFailureTimer" }
    if yname == "log-frr-protection" { return "LogFrrProtection" }
    if yname == "reoptimize-timer-frequency" { return "ReoptimizeTimerFrequency" }
    if yname == "log-mid" { return "LogMid" }
    if yname == "log-preemption" { return "LogPreemption" }
    if yname == "auto-tunnel" { return "AutoTunnel" }
    if yname == "hardware-out-of-resource" { return "HardwareOutOfResource" }
    if yname == "secondary-router-ids" { return "SecondaryRouterIds" }
    if yname == "srlg" { return "Srlg" }
    if yname == "queues" { return "Queues" }
    if yname == "mib" { return "Mib" }
    if yname == "attribute-set" { return "AttributeSet" }
    if yname == "bfd-over-lsp" { return "BfdOverLsp" }
    if yname == "bandwidth-accounting" { return "BandwidthAccounting" }
    if yname == "pce-attributes" { return "PceAttributes" }
    if yname == "lsp-out-of-resource" { return "LspOutOfResource" }
    if yname == "soft-preemption" { return "SoftPreemption" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "path-selection" { return "PathSelection" }
    if yname == "affinity-mappings" { return "AffinityMappings" }
    return ""
}

func (globalAttributes *MplsTe_GlobalAttributes) GetSegmentPath() string {
    return "global-attributes"
}

func (globalAttributes *MplsTe_GlobalAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auto-tunnel" {
        return &globalAttributes.AutoTunnel
    }
    if childYangName == "hardware-out-of-resource" {
        return &globalAttributes.HardwareOutOfResource
    }
    if childYangName == "secondary-router-ids" {
        return &globalAttributes.SecondaryRouterIds
    }
    if childYangName == "srlg" {
        return &globalAttributes.Srlg
    }
    if childYangName == "queues" {
        return &globalAttributes.Queues
    }
    if childYangName == "mib" {
        return &globalAttributes.Mib
    }
    if childYangName == "attribute-set" {
        return &globalAttributes.AttributeSet
    }
    if childYangName == "bfd-over-lsp" {
        return &globalAttributes.BfdOverLsp
    }
    if childYangName == "bandwidth-accounting" {
        return &globalAttributes.BandwidthAccounting
    }
    if childYangName == "pce-attributes" {
        return &globalAttributes.PceAttributes
    }
    if childYangName == "lsp-out-of-resource" {
        return &globalAttributes.LspOutOfResource
    }
    if childYangName == "soft-preemption" {
        return &globalAttributes.SoftPreemption
    }
    if childYangName == "fast-reroute" {
        return &globalAttributes.FastReroute
    }
    if childYangName == "path-selection" {
        return &globalAttributes.PathSelection
    }
    if childYangName == "affinity-mappings" {
        return &globalAttributes.AffinityMappings
    }
    return nil
}

func (globalAttributes *MplsTe_GlobalAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["auto-tunnel"] = &globalAttributes.AutoTunnel
    children["hardware-out-of-resource"] = &globalAttributes.HardwareOutOfResource
    children["secondary-router-ids"] = &globalAttributes.SecondaryRouterIds
    children["srlg"] = &globalAttributes.Srlg
    children["queues"] = &globalAttributes.Queues
    children["mib"] = &globalAttributes.Mib
    children["attribute-set"] = &globalAttributes.AttributeSet
    children["bfd-over-lsp"] = &globalAttributes.BfdOverLsp
    children["bandwidth-accounting"] = &globalAttributes.BandwidthAccounting
    children["pce-attributes"] = &globalAttributes.PceAttributes
    children["lsp-out-of-resource"] = &globalAttributes.LspOutOfResource
    children["soft-preemption"] = &globalAttributes.SoftPreemption
    children["fast-reroute"] = &globalAttributes.FastReroute
    children["path-selection"] = &globalAttributes.PathSelection
    children["affinity-mappings"] = &globalAttributes.AffinityMappings
    return children
}

func (globalAttributes *MplsTe_GlobalAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["log-nsr-status"] = globalAttributes.LogNsrStatus
    leafs["log-issu-status"] = globalAttributes.LogIssuStatus
    leafs["reoptimize-link-up"] = globalAttributes.ReoptimizeLinkUp
    leafs["reoptimize-delay-cleanup-timer"] = globalAttributes.ReoptimizeDelayCleanupTimer
    leafs["disable-reoptimize-affinity-failure"] = globalAttributes.DisableReoptimizeAffinityFailure
    leafs["maximum-tunnels"] = globalAttributes.MaximumTunnels
    leafs["link-holddown-timer"] = globalAttributes.LinkHolddownTimer
    leafs["fault-oam"] = globalAttributes.FaultOam
    leafs["enable-unequal-load-balancing"] = globalAttributes.EnableUnequalLoadBalancing
    leafs["log-tail"] = globalAttributes.LogTail
    leafs["reoptimize-delay-after-frr-timer"] = globalAttributes.ReoptimizeDelayAfterFrrTimer
    leafs["auto-bandwidth-collect-frequency"] = globalAttributes.AutoBandwidthCollectFrequency
    leafs["reopt-delay-path-protect-switchover-timer"] = globalAttributes.ReoptDelayPathProtectSwitchoverTimer
    leafs["log-all"] = globalAttributes.LogAll
    leafs["loose-path-retry-period"] = globalAttributes.LoosePathRetryPeriod
    leafs["reoptimize-load-balancing"] = globalAttributes.ReoptimizeLoadBalancing
    leafs["log-head"] = globalAttributes.LogHead
    leafs["path-selection-ignore-overload"] = globalAttributes.PathSelectionIgnoreOverload
    leafs["graceful-preemption-on-bandwidth-reduction"] = globalAttributes.GracefulPreemptionOnBandwidthReduction
    leafs["advertise-explicit-nulls"] = globalAttributes.AdvertiseExplicitNulls
    leafs["reoptimize-delay-install-timer"] = globalAttributes.ReoptimizeDelayInstallTimer
    leafs["reoptimize-delay-after-affinity-failure-timer"] = globalAttributes.ReoptimizeDelayAfterAffinityFailureTimer
    leafs["log-frr-protection"] = globalAttributes.LogFrrProtection
    leafs["reoptimize-timer-frequency"] = globalAttributes.ReoptimizeTimerFrequency
    leafs["log-mid"] = globalAttributes.LogMid
    leafs["log-preemption"] = globalAttributes.LogPreemption
    return leafs
}

func (globalAttributes *MplsTe_GlobalAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (globalAttributes *MplsTe_GlobalAttributes) GetYangName() string { return "global-attributes" }

func (globalAttributes *MplsTe_GlobalAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalAttributes *MplsTe_GlobalAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalAttributes *MplsTe_GlobalAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalAttributes *MplsTe_GlobalAttributes) SetParent(parent types.Entity) { globalAttributes.parent = parent }

func (globalAttributes *MplsTe_GlobalAttributes) GetParent() types.Entity { return globalAttributes.parent }

func (globalAttributes *MplsTe_GlobalAttributes) GetParentYangName() string { return "mpls-te" }

// MplsTe_GlobalAttributes_AutoTunnel
// Configure auto-tunnels feature
type MplsTe_GlobalAttributes_AutoTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure auto-tunnel PCC (Path Computation Client) feature.
    Pcc MplsTe_GlobalAttributes_AutoTunnel_Pcc

    // Configure P2P auto-tunnel feature.
    P2PAutoTunnel MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel

    // Configure auto-tunnel backup feature.
    Backup MplsTe_GlobalAttributes_AutoTunnel_Backup

    // Configure auto-tunnel mesh feature.
    Mesh MplsTe_GlobalAttributes_AutoTunnel_Mesh

    // Configure P2MP auto-tunnel feature.
    P2MpAutoTunnel MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetFilter() yfilter.YFilter { return autoTunnel.YFilter }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) SetFilter(yf yfilter.YFilter) { autoTunnel.YFilter = yf }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetGoName(yname string) string {
    if yname == "pcc" { return "Pcc" }
    if yname == "p2p-auto-tunnel" { return "P2PAutoTunnel" }
    if yname == "backup" { return "Backup" }
    if yname == "mesh" { return "Mesh" }
    if yname == "p2mp-auto-tunnel" { return "P2MpAutoTunnel" }
    return ""
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetSegmentPath() string {
    return "auto-tunnel"
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pcc" {
        return &autoTunnel.Pcc
    }
    if childYangName == "p2p-auto-tunnel" {
        return &autoTunnel.P2PAutoTunnel
    }
    if childYangName == "backup" {
        return &autoTunnel.Backup
    }
    if childYangName == "mesh" {
        return &autoTunnel.Mesh
    }
    if childYangName == "p2mp-auto-tunnel" {
        return &autoTunnel.P2MpAutoTunnel
    }
    return nil
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pcc"] = &autoTunnel.Pcc
    children["p2p-auto-tunnel"] = &autoTunnel.P2PAutoTunnel
    children["backup"] = &autoTunnel.Backup
    children["mesh"] = &autoTunnel.Mesh
    children["p2mp-auto-tunnel"] = &autoTunnel.P2MpAutoTunnel
    return children
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetYangName() string { return "auto-tunnel" }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) SetParent(parent types.Entity) { autoTunnel.parent = parent }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetParent() types.Entity { return autoTunnel.parent }

func (autoTunnel *MplsTe_GlobalAttributes_AutoTunnel) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_AutoTunnel_Pcc
// Configure auto-tunnel PCC (Path Computation
// Client) feature
type MplsTe_GlobalAttributes_AutoTunnel_Pcc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure tunnel ID range for auto-tunnel features.
    TunnelRange MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetFilter() yfilter.YFilter { return pcc.YFilter }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) SetFilter(yf yfilter.YFilter) { pcc.YFilter = yf }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetGoName(yname string) string {
    if yname == "tunnel-range" { return "TunnelRange" }
    return ""
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetSegmentPath() string {
    return "pcc"
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-range" {
        return &pcc.TunnelRange
    }
    return nil
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-range"] = &pcc.TunnelRange
    return children
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetBundleName() string { return "cisco_ios_xr" }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetYangName() string { return "pcc" }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) SetParent(parent types.Entity) { pcc.parent = parent }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetParent() types.Entity { return pcc.parent }

func (pcc *MplsTe_GlobalAttributes_AutoTunnel_Pcc) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange
// Configure tunnel ID range for auto-tunnel
// features
type MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MinTunnelId interface{}

    // Maximum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MaxTunnelId interface{}
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetFilter() yfilter.YFilter { return tunnelRange.YFilter }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) SetFilter(yf yfilter.YFilter) { tunnelRange.YFilter = yf }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetGoName(yname string) string {
    if yname == "min-tunnel-id" { return "MinTunnelId" }
    if yname == "max-tunnel-id" { return "MaxTunnelId" }
    return ""
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetSegmentPath() string {
    return "tunnel-range"
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-tunnel-id"] = tunnelRange.MinTunnelId
    leafs["max-tunnel-id"] = tunnelRange.MaxTunnelId
    return leafs
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetYangName() string { return "tunnel-range" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) SetParent(parent types.Entity) { tunnelRange.parent = parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetParent() types.Entity { return tunnelRange.parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Pcc_TunnelRange) GetParentYangName() string { return "pcc" }

// MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel
// Configure P2P auto-tunnel feature
type MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure tunnel ID range for auto-tunnel features.
    TunnelRange MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetFilter() yfilter.YFilter { return p2PAutoTunnel.YFilter }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) SetFilter(yf yfilter.YFilter) { p2PAutoTunnel.YFilter = yf }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetGoName(yname string) string {
    if yname == "tunnel-range" { return "TunnelRange" }
    return ""
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetSegmentPath() string {
    return "p2p-auto-tunnel"
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-range" {
        return &p2PAutoTunnel.TunnelRange
    }
    return nil
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-range"] = &p2PAutoTunnel.TunnelRange
    return children
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetYangName() string { return "p2p-auto-tunnel" }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) SetParent(parent types.Entity) { p2PAutoTunnel.parent = parent }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetParent() types.Entity { return p2PAutoTunnel.parent }

func (p2PAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange
// Configure tunnel ID range for auto-tunnel
// features
type MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MinTunnelId interface{}

    // Maximum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MaxTunnelId interface{}
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetFilter() yfilter.YFilter { return tunnelRange.YFilter }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) SetFilter(yf yfilter.YFilter) { tunnelRange.YFilter = yf }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetGoName(yname string) string {
    if yname == "min-tunnel-id" { return "MinTunnelId" }
    if yname == "max-tunnel-id" { return "MaxTunnelId" }
    return ""
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetSegmentPath() string {
    return "tunnel-range"
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-tunnel-id"] = tunnelRange.MinTunnelId
    leafs["max-tunnel-id"] = tunnelRange.MaxTunnelId
    return leafs
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetYangName() string { return "tunnel-range" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) SetParent(parent types.Entity) { tunnelRange.parent = parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetParent() types.Entity { return tunnelRange.parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2PAutoTunnel_TunnelRange) GetParentYangName() string { return "p2p-auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_Backup
// Configure auto-tunnel backup feature
type MplsTe_GlobalAttributes_AutoTunnel_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Ignore affinity during CSPF for auto backup tunnels. The type is
    // interface{}.
    AffinityIgnore interface{}

    // Configure auto-tunnel backup timers value.
    Timers MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers

    // Configure tunnel ID range for auto-tunnel features.
    TunnelRange MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetGoName(yname string) string {
    if yname == "affinity-ignore" { return "AffinityIgnore" }
    if yname == "timers" { return "Timers" }
    if yname == "tunnel-range" { return "TunnelRange" }
    return ""
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timers" {
        return &backup.Timers
    }
    if childYangName == "tunnel-range" {
        return &backup.TunnelRange
    }
    return nil
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timers"] = &backup.Timers
    children["tunnel-range"] = &backup.TunnelRange
    return children
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-ignore"] = backup.AffinityIgnore
    return leafs
}

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetYangName() string { return "backup" }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetParent() types.Entity { return backup.parent }

func (backup *MplsTe_GlobalAttributes_AutoTunnel_Backup) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers
// Configure auto-tunnel backup timers value
type MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure auto-tunnel backup removal timers value.
    Removal MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetGoName(yname string) string {
    if yname == "removal" { return "Removal" }
    return ""
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "removal" {
        return &timers.Removal
    }
    return nil
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["removal"] = &timers.Removal
    return children
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetYangName() string { return "timers" }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetParent() types.Entity { return timers.parent }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers) GetParentYangName() string { return "backup" }

// MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal
// Configure auto-tunnel backup removal timers
// value
type MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto-tunnel backup unused timeout in minutes (0=never timeout). The type is
    // interface{} with range: 0..10080. Units are minute. The default value is
    // 3600.
    Unused interface{}
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetFilter() yfilter.YFilter { return removal.YFilter }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) SetFilter(yf yfilter.YFilter) { removal.YFilter = yf }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetGoName(yname string) string {
    if yname == "unused" { return "Unused" }
    return ""
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetSegmentPath() string {
    return "removal"
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unused"] = removal.Unused
    return leafs
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetBundleName() string { return "cisco_ios_xr" }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetYangName() string { return "removal" }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) SetParent(parent types.Entity) { removal.parent = parent }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetParent() types.Entity { return removal.parent }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Backup_Timers_Removal) GetParentYangName() string { return "timers" }

// MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange
// Configure tunnel ID range for auto-tunnel
// features
type MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MinTunnelId interface{}

    // Maximum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MaxTunnelId interface{}
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetFilter() yfilter.YFilter { return tunnelRange.YFilter }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) SetFilter(yf yfilter.YFilter) { tunnelRange.YFilter = yf }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetGoName(yname string) string {
    if yname == "min-tunnel-id" { return "MinTunnelId" }
    if yname == "max-tunnel-id" { return "MaxTunnelId" }
    return ""
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetSegmentPath() string {
    return "tunnel-range"
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-tunnel-id"] = tunnelRange.MinTunnelId
    leafs["max-tunnel-id"] = tunnelRange.MaxTunnelId
    return leafs
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetYangName() string { return "tunnel-range" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) SetParent(parent types.Entity) { tunnelRange.parent = parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetParent() types.Entity { return tunnelRange.parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Backup_TunnelRange) GetParentYangName() string { return "backup" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh
// Configure auto-tunnel mesh feature
type MplsTe_GlobalAttributes_AutoTunnel_Mesh struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure auto-tunnel mesh group.
    MeshGroups MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups

    // Configure auto-tunnel backup timers value.
    Timers MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers

    // Configure tunnel ID range for auto-tunnel features.
    TunnelRange MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetFilter() yfilter.YFilter { return mesh.YFilter }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) SetFilter(yf yfilter.YFilter) { mesh.YFilter = yf }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetGoName(yname string) string {
    if yname == "mesh-groups" { return "MeshGroups" }
    if yname == "timers" { return "Timers" }
    if yname == "tunnel-range" { return "TunnelRange" }
    return ""
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetSegmentPath() string {
    return "mesh"
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mesh-groups" {
        return &mesh.MeshGroups
    }
    if childYangName == "timers" {
        return &mesh.Timers
    }
    if childYangName == "tunnel-range" {
        return &mesh.TunnelRange
    }
    return nil
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mesh-groups"] = &mesh.MeshGroups
    children["timers"] = &mesh.Timers
    children["tunnel-range"] = &mesh.TunnelRange
    return children
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetBundleName() string { return "cisco_ios_xr" }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetYangName() string { return "mesh" }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) SetParent(parent types.Entity) { mesh.parent = parent }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetParent() types.Entity { return mesh.parent }

func (mesh *MplsTe_GlobalAttributes_AutoTunnel_Mesh) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups
// Configure auto-tunnel mesh group
type MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto-mesh group identifier. The type is slice of
    // MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup.
    MeshGroup []MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetFilter() yfilter.YFilter { return meshGroups.YFilter }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) SetFilter(yf yfilter.YFilter) { meshGroups.YFilter = yf }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetGoName(yname string) string {
    if yname == "mesh-group" { return "MeshGroup" }
    return ""
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetSegmentPath() string {
    return "mesh-groups"
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mesh-group" {
        for _, c := range meshGroups.MeshGroup {
            if meshGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup{}
        meshGroups.MeshGroup = append(meshGroups.MeshGroup, child)
        return &meshGroups.MeshGroup[len(meshGroups.MeshGroup)-1]
    }
    return nil
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range meshGroups.MeshGroup {
        children[meshGroups.MeshGroup[i].GetSegmentPath()] = &meshGroups.MeshGroup[i]
    }
    return children
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetBundleName() string { return "cisco_ios_xr" }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetYangName() string { return "mesh-groups" }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) SetParent(parent types.Entity) { meshGroups.parent = parent }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetParent() types.Entity { return meshGroups.parent }

func (meshGroups *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups) GetParentYangName() string { return "mesh" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup
// Auto-mesh group identifier
type MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Mesh group ID. The type is interface{} with range:
    // 0..4294967295.
    MeshGroupId interface{}

    // The name of prefix-list to be applied to this destination-list. The type is
    // string with length: 1..32.
    DestinationList interface{}

    // Disables mesh group. The type is interface{}.
    Disable interface{}

    // The name of auto-mesh attribute set to be applied to this group. The type
    // is string with length: 1..64.
    AttributeSet interface{}

    // Auto-mesh group enable object that controls whether this group is
    // configured or not .This object must be set before other configuration
    // supplied for this group. The type is interface{}.
    Create interface{}

    // Automatically create tunnel to all next-hops. The type is interface{}.
    OneHop interface{}
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetFilter() yfilter.YFilter { return meshGroup.YFilter }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) SetFilter(yf yfilter.YFilter) { meshGroup.YFilter = yf }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetGoName(yname string) string {
    if yname == "mesh-group-id" { return "MeshGroupId" }
    if yname == "destination-list" { return "DestinationList" }
    if yname == "disable" { return "Disable" }
    if yname == "attribute-set" { return "AttributeSet" }
    if yname == "create" { return "Create" }
    if yname == "one-hop" { return "OneHop" }
    return ""
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetSegmentPath() string {
    return "mesh-group" + "[mesh-group-id='" + fmt.Sprintf("%v", meshGroup.MeshGroupId) + "']"
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mesh-group-id"] = meshGroup.MeshGroupId
    leafs["destination-list"] = meshGroup.DestinationList
    leafs["disable"] = meshGroup.Disable
    leafs["attribute-set"] = meshGroup.AttributeSet
    leafs["create"] = meshGroup.Create
    leafs["one-hop"] = meshGroup.OneHop
    return leafs
}

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetBundleName() string { return "cisco_ios_xr" }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetYangName() string { return "mesh-group" }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) SetParent(parent types.Entity) { meshGroup.parent = parent }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetParent() types.Entity { return meshGroup.parent }

func (meshGroup *MplsTe_GlobalAttributes_AutoTunnel_Mesh_MeshGroups_MeshGroup) GetParentYangName() string { return "mesh-groups" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers
// Configure auto-tunnel backup timers value
type MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure auto-tunnel backup removal timers value.
    Removal MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetGoName(yname string) string {
    if yname == "removal" { return "Removal" }
    return ""
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "removal" {
        return &timers.Removal
    }
    return nil
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["removal"] = &timers.Removal
    return children
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetYangName() string { return "timers" }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetParent() types.Entity { return timers.parent }

func (timers *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers) GetParentYangName() string { return "mesh" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal
// Configure auto-tunnel backup removal timers
// value
type MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto-tunnel backup unused timeout in minutes (0=never timeout). The type is
    // interface{} with range: 0..10080. Units are minute. The default value is
    // 3600.
    Unused interface{}
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetFilter() yfilter.YFilter { return removal.YFilter }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) SetFilter(yf yfilter.YFilter) { removal.YFilter = yf }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetGoName(yname string) string {
    if yname == "unused" { return "Unused" }
    return ""
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetSegmentPath() string {
    return "removal"
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["unused"] = removal.Unused
    return leafs
}

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetBundleName() string { return "cisco_ios_xr" }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetYangName() string { return "removal" }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) SetParent(parent types.Entity) { removal.parent = parent }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetParent() types.Entity { return removal.parent }

func (removal *MplsTe_GlobalAttributes_AutoTunnel_Mesh_Timers_Removal) GetParentYangName() string { return "timers" }

// MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange
// Configure tunnel ID range for auto-tunnel
// features
type MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MinTunnelId interface{}

    // Maximum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MaxTunnelId interface{}
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetFilter() yfilter.YFilter { return tunnelRange.YFilter }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) SetFilter(yf yfilter.YFilter) { tunnelRange.YFilter = yf }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetGoName(yname string) string {
    if yname == "min-tunnel-id" { return "MinTunnelId" }
    if yname == "max-tunnel-id" { return "MaxTunnelId" }
    return ""
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetSegmentPath() string {
    return "tunnel-range"
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-tunnel-id"] = tunnelRange.MinTunnelId
    leafs["max-tunnel-id"] = tunnelRange.MaxTunnelId
    return leafs
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetYangName() string { return "tunnel-range" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) SetParent(parent types.Entity) { tunnelRange.parent = parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetParent() types.Entity { return tunnelRange.parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_Mesh_TunnelRange) GetParentYangName() string { return "mesh" }

// MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel
// Configure P2MP auto-tunnel feature
type MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure tunnel ID range for auto-tunnel features.
    TunnelRange MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetFilter() yfilter.YFilter { return p2MpAutoTunnel.YFilter }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) SetFilter(yf yfilter.YFilter) { p2MpAutoTunnel.YFilter = yf }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetGoName(yname string) string {
    if yname == "tunnel-range" { return "TunnelRange" }
    return ""
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetSegmentPath() string {
    return "p2mp-auto-tunnel"
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-range" {
        return &p2MpAutoTunnel.TunnelRange
    }
    return nil
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-range"] = &p2MpAutoTunnel.TunnelRange
    return children
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetYangName() string { return "p2mp-auto-tunnel" }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) SetParent(parent types.Entity) { p2MpAutoTunnel.parent = parent }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetParent() types.Entity { return p2MpAutoTunnel.parent }

func (p2MpAutoTunnel *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange
// Configure tunnel ID range for auto-tunnel
// features
type MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MinTunnelId interface{}

    // Maximum tunnel ID for auto-tunnels. The type is interface{} with range:
    // 0..65535.
    MaxTunnelId interface{}
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetFilter() yfilter.YFilter { return tunnelRange.YFilter }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) SetFilter(yf yfilter.YFilter) { tunnelRange.YFilter = yf }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetGoName(yname string) string {
    if yname == "min-tunnel-id" { return "MinTunnelId" }
    if yname == "max-tunnel-id" { return "MaxTunnelId" }
    return ""
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetSegmentPath() string {
    return "tunnel-range"
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-tunnel-id"] = tunnelRange.MinTunnelId
    leafs["max-tunnel-id"] = tunnelRange.MaxTunnelId
    return leafs
}

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetYangName() string { return "tunnel-range" }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) SetParent(parent types.Entity) { tunnelRange.parent = parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetParent() types.Entity { return tunnelRange.parent }

func (tunnelRange *MplsTe_GlobalAttributes_AutoTunnel_P2MpAutoTunnel_TunnelRange) GetParentYangName() string { return "p2mp-auto-tunnel" }

// MplsTe_GlobalAttributes_HardwareOutOfResource
// Configure HW OOR processing in MPLS-TE
type MplsTe_GlobalAttributes_HardwareOutOfResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for HW OOR Red State.
    OorRedState MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState

    // Configuration for HW OOR Yellow State.
    OorYellowState MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState

    // Configuration for HW OOR Green State.
    OorGreenState MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetFilter() yfilter.YFilter { return hardwareOutOfResource.YFilter }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) SetFilter(yf yfilter.YFilter) { hardwareOutOfResource.YFilter = yf }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetGoName(yname string) string {
    if yname == "oor-red-state" { return "OorRedState" }
    if yname == "oor-yellow-state" { return "OorYellowState" }
    if yname == "oor-green-state" { return "OorGreenState" }
    return ""
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetSegmentPath() string {
    return "hardware-out-of-resource"
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "oor-red-state" {
        return &hardwareOutOfResource.OorRedState
    }
    if childYangName == "oor-yellow-state" {
        return &hardwareOutOfResource.OorYellowState
    }
    if childYangName == "oor-green-state" {
        return &hardwareOutOfResource.OorGreenState
    }
    return nil
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["oor-red-state"] = &hardwareOutOfResource.OorRedState
    children["oor-yellow-state"] = &hardwareOutOfResource.OorYellowState
    children["oor-green-state"] = &hardwareOutOfResource.OorGreenState
    return children
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetBundleName() string { return "cisco_ios_xr" }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetYangName() string { return "hardware-out-of-resource" }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) SetParent(parent types.Entity) { hardwareOutOfResource.parent = parent }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetParent() types.Entity { return hardwareOutOfResource.parent }

func (hardwareOutOfResource *MplsTe_GlobalAttributes_HardwareOutOfResource) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState
// Configuration for HW OOR Red State
type MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable FRR node-protection when the link is in this OOR State. The type is
    // interface{}.
    OorNodeProtectionDisable interface{}

    // Flood a specific percentage of the available bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage. The default value is
    // 100.
    OorAvailableBandwidthPercentage interface{}

    // Only accept LSPs with at least the specified bandwidth (in kbps). The type
    // is interface{} with range: -2147483648..2147483647. Units are kbit/s. The
    // default value is 0.
    OorAcceptLspMinBandwidth interface{}

    // Allow the setup of reoptimized LSPs over the link in this OOR State. The
    // type is interface{}.
    OorAcceptReoptLsp interface{}

    // Penalty applied to the TE metric of a link in OOR state. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    OorMetricTePenalty interface{}
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetFilter() yfilter.YFilter { return oorRedState.YFilter }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) SetFilter(yf yfilter.YFilter) { oorRedState.YFilter = yf }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetGoName(yname string) string {
    if yname == "oor-node-protection-disable" { return "OorNodeProtectionDisable" }
    if yname == "oor-available-bandwidth-percentage" { return "OorAvailableBandwidthPercentage" }
    if yname == "oor-accept-lsp-min-bandwidth" { return "OorAcceptLspMinBandwidth" }
    if yname == "oor-accept-reopt-lsp" { return "OorAcceptReoptLsp" }
    if yname == "oor-metric-te-penalty" { return "OorMetricTePenalty" }
    return ""
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetSegmentPath() string {
    return "oor-red-state"
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["oor-node-protection-disable"] = oorRedState.OorNodeProtectionDisable
    leafs["oor-available-bandwidth-percentage"] = oorRedState.OorAvailableBandwidthPercentage
    leafs["oor-accept-lsp-min-bandwidth"] = oorRedState.OorAcceptLspMinBandwidth
    leafs["oor-accept-reopt-lsp"] = oorRedState.OorAcceptReoptLsp
    leafs["oor-metric-te-penalty"] = oorRedState.OorMetricTePenalty
    return leafs
}

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetBundleName() string { return "cisco_ios_xr" }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetYangName() string { return "oor-red-state" }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) SetParent(parent types.Entity) { oorRedState.parent = parent }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetParent() types.Entity { return oorRedState.parent }

func (oorRedState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorRedState) GetParentYangName() string { return "hardware-out-of-resource" }

// MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState
// Configuration for HW OOR Yellow State
type MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable FRR node-protection when the link is in this OOR State. The type is
    // interface{}.
    OorNodeProtectionDisable interface{}

    // Flood a specific percentage of the available bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage. The default value is
    // 100.
    OorAvailableBandwidthPercentage interface{}

    // Only accept LSPs with at least the specified bandwidth (in kbps). The type
    // is interface{} with range: -2147483648..2147483647. Units are kbit/s. The
    // default value is 0.
    OorAcceptLspMinBandwidth interface{}

    // Allow the setup of reoptimized LSPs over the link in this OOR State. The
    // type is interface{}.
    OorAcceptReoptLsp interface{}

    // Penalty applied to the TE metric of a link in OOR state. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    OorMetricTePenalty interface{}
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetFilter() yfilter.YFilter { return oorYellowState.YFilter }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) SetFilter(yf yfilter.YFilter) { oorYellowState.YFilter = yf }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetGoName(yname string) string {
    if yname == "oor-node-protection-disable" { return "OorNodeProtectionDisable" }
    if yname == "oor-available-bandwidth-percentage" { return "OorAvailableBandwidthPercentage" }
    if yname == "oor-accept-lsp-min-bandwidth" { return "OorAcceptLspMinBandwidth" }
    if yname == "oor-accept-reopt-lsp" { return "OorAcceptReoptLsp" }
    if yname == "oor-metric-te-penalty" { return "OorMetricTePenalty" }
    return ""
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetSegmentPath() string {
    return "oor-yellow-state"
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["oor-node-protection-disable"] = oorYellowState.OorNodeProtectionDisable
    leafs["oor-available-bandwidth-percentage"] = oorYellowState.OorAvailableBandwidthPercentage
    leafs["oor-accept-lsp-min-bandwidth"] = oorYellowState.OorAcceptLspMinBandwidth
    leafs["oor-accept-reopt-lsp"] = oorYellowState.OorAcceptReoptLsp
    leafs["oor-metric-te-penalty"] = oorYellowState.OorMetricTePenalty
    return leafs
}

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetBundleName() string { return "cisco_ios_xr" }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetYangName() string { return "oor-yellow-state" }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) SetParent(parent types.Entity) { oorYellowState.parent = parent }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetParent() types.Entity { return oorYellowState.parent }

func (oorYellowState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorYellowState) GetParentYangName() string { return "hardware-out-of-resource" }

// MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState
// Configuration for HW OOR Green State
type MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Period of time (minutes) during which the action in Green state are
    // applied. After this period, the processing in TE goes back to normal state.
    // The type is interface{} with range: 0..10080. Units are minute. The default
    // value is 0.
    OorRecoveryDuration interface{}

    // Disable FRR node-protection when the link is in this OOR State. The type is
    // interface{}.
    OorNodeProtectionDisable interface{}

    // Flood a specific percentage of the available bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage. The default value is
    // 100.
    OorAvailableBandwidthPercentage interface{}

    // Only accept LSPs with at least the specified bandwidth (in kbps). The type
    // is interface{} with range: -2147483648..2147483647. Units are kbit/s. The
    // default value is 0.
    OorAcceptLspMinBandwidth interface{}

    // Allow the setup of reoptimized LSPs over the link in this OOR State. The
    // type is interface{}.
    OorAcceptReoptLsp interface{}

    // Penalty applied to the TE metric of a link in OOR state. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 0.
    OorMetricTePenalty interface{}
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetFilter() yfilter.YFilter { return oorGreenState.YFilter }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) SetFilter(yf yfilter.YFilter) { oorGreenState.YFilter = yf }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetGoName(yname string) string {
    if yname == "oor-recovery-duration" { return "OorRecoveryDuration" }
    if yname == "oor-node-protection-disable" { return "OorNodeProtectionDisable" }
    if yname == "oor-available-bandwidth-percentage" { return "OorAvailableBandwidthPercentage" }
    if yname == "oor-accept-lsp-min-bandwidth" { return "OorAcceptLspMinBandwidth" }
    if yname == "oor-accept-reopt-lsp" { return "OorAcceptReoptLsp" }
    if yname == "oor-metric-te-penalty" { return "OorMetricTePenalty" }
    return ""
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetSegmentPath() string {
    return "oor-green-state"
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["oor-recovery-duration"] = oorGreenState.OorRecoveryDuration
    leafs["oor-node-protection-disable"] = oorGreenState.OorNodeProtectionDisable
    leafs["oor-available-bandwidth-percentage"] = oorGreenState.OorAvailableBandwidthPercentage
    leafs["oor-accept-lsp-min-bandwidth"] = oorGreenState.OorAcceptLspMinBandwidth
    leafs["oor-accept-reopt-lsp"] = oorGreenState.OorAcceptReoptLsp
    leafs["oor-metric-te-penalty"] = oorGreenState.OorMetricTePenalty
    return leafs
}

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetBundleName() string { return "cisco_ios_xr" }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetYangName() string { return "oor-green-state" }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) SetParent(parent types.Entity) { oorGreenState.parent = parent }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetParent() types.Entity { return oorGreenState.parent }

func (oorGreenState *MplsTe_GlobalAttributes_HardwareOutOfResource_OorGreenState) GetParentYangName() string { return "hardware-out-of-resource" }

// MplsTe_GlobalAttributes_SecondaryRouterIds
// Configure MPLS TE Secondary Router ID
type MplsTe_GlobalAttributes_SecondaryRouterIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Secondary Router ID. The type is slice of
    // MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId.
    SecondaryRouterId []MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetFilter() yfilter.YFilter { return secondaryRouterIds.YFilter }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) SetFilter(yf yfilter.YFilter) { secondaryRouterIds.YFilter = yf }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetGoName(yname string) string {
    if yname == "secondary-router-id" { return "SecondaryRouterId" }
    return ""
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetSegmentPath() string {
    return "secondary-router-ids"
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondary-router-id" {
        for _, c := range secondaryRouterIds.SecondaryRouterId {
            if secondaryRouterIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId{}
        secondaryRouterIds.SecondaryRouterId = append(secondaryRouterIds.SecondaryRouterId, child)
        return &secondaryRouterIds.SecondaryRouterId[len(secondaryRouterIds.SecondaryRouterId)-1]
    }
    return nil
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range secondaryRouterIds.SecondaryRouterId {
        children[secondaryRouterIds.SecondaryRouterId[i].GetSegmentPath()] = &secondaryRouterIds.SecondaryRouterId[i]
    }
    return children
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetYangName() string { return "secondary-router-ids" }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) SetParent(parent types.Entity) { secondaryRouterIds.parent = parent }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetParent() types.Entity { return secondaryRouterIds.parent }

func (secondaryRouterIds *MplsTe_GlobalAttributes_SecondaryRouterIds) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId
// Secondary Router ID
type MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary TE Router ID. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SecondaryRouterIdValue interface{}
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetFilter() yfilter.YFilter { return secondaryRouterId.YFilter }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) SetFilter(yf yfilter.YFilter) { secondaryRouterId.YFilter = yf }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetGoName(yname string) string {
    if yname == "secondary-router-id-value" { return "SecondaryRouterIdValue" }
    return ""
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetSegmentPath() string {
    return "secondary-router-id" + "[secondary-router-id-value='" + fmt.Sprintf("%v", secondaryRouterId.SecondaryRouterIdValue) + "']"
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["secondary-router-id-value"] = secondaryRouterId.SecondaryRouterIdValue
    return leafs
}

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetYangName() string { return "secondary-router-id" }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) SetParent(parent types.Entity) { secondaryRouterId.parent = parent }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetParent() types.Entity { return secondaryRouterId.parent }

func (secondaryRouterId *MplsTe_GlobalAttributes_SecondaryRouterIds_SecondaryRouterId) GetParentYangName() string { return "secondary-router-ids" }

// MplsTe_GlobalAttributes_Srlg
// Configure SRLG values and MPLS-TE properties
type MplsTe_GlobalAttributes_Srlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default Admin weight any SRLG value that does not have one. The type is
    // interface{} with range: -2147483648..2147483647. The default value is 1.
    DefaultAdminWeight interface{}

    // Enter SRLG property configuration. The type is interface{}.
    Enable interface{}

    // Configure SRLG identified by names.
    Names MplsTe_GlobalAttributes_Srlg_Names
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetFilter() yfilter.YFilter { return srlg.YFilter }

func (srlg *MplsTe_GlobalAttributes_Srlg) SetFilter(yf yfilter.YFilter) { srlg.YFilter = yf }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetGoName(yname string) string {
    if yname == "default-admin-weight" { return "DefaultAdminWeight" }
    if yname == "enable" { return "Enable" }
    if yname == "names" { return "Names" }
    return ""
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetSegmentPath() string {
    return "srlg"
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "names" {
        return &srlg.Names
    }
    return nil
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["names"] = &srlg.Names
    return children
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-admin-weight"] = srlg.DefaultAdminWeight
    leafs["enable"] = srlg.Enable
    return leafs
}

func (srlg *MplsTe_GlobalAttributes_Srlg) GetBundleName() string { return "cisco_ios_xr" }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetYangName() string { return "srlg" }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlg *MplsTe_GlobalAttributes_Srlg) SetParent(parent types.Entity) { srlg.parent = parent }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetParent() types.Entity { return srlg.parent }

func (srlg *MplsTe_GlobalAttributes_Srlg) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_Srlg_Names
// Configure SRLG identified by names
type MplsTe_GlobalAttributes_Srlg_Names struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRLG name and its MPLS-TE properties. The type is slice of
    // MplsTe_GlobalAttributes_Srlg_Names_Name.
    Name []MplsTe_GlobalAttributes_Srlg_Names_Name
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetFilter() yfilter.YFilter { return names.YFilter }

func (names *MplsTe_GlobalAttributes_Srlg_Names) SetFilter(yf yfilter.YFilter) { names.YFilter = yf }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    return ""
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetSegmentPath() string {
    return "names"
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "name" {
        for _, c := range names.Name {
            if names.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_Srlg_Names_Name{}
        names.Name = append(names.Name, child)
        return &names.Name[len(names.Name)-1]
    }
    return nil
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range names.Name {
        children[names.Name[i].GetSegmentPath()] = &names.Name[i]
    }
    return children
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetBundleName() string { return "cisco_ios_xr" }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetYangName() string { return "names" }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (names *MplsTe_GlobalAttributes_Srlg_Names) SetParent(parent types.Entity) { names.parent = parent }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetParent() types.Entity { return names.parent }

func (names *MplsTe_GlobalAttributes_Srlg_Names) GetParentYangName() string { return "srlg" }

// MplsTe_GlobalAttributes_Srlg_Names_Name
// SRLG name and its MPLS-TE properties
type MplsTe_GlobalAttributes_Srlg_Names_Name struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. SRLG membership name. The type is string with
    // length: 1..64.
    SrlgName interface{}

    // Administrative weight for the SRLG value. The type is interface{} with
    // range: -2147483648..2147483647.
    AdminWeight interface{}

    // Configure static SRLG members list.
    StaticSrlgMembers MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetFilter() yfilter.YFilter { return name.YFilter }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) SetFilter(yf yfilter.YFilter) { name.YFilter = yf }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetGoName(yname string) string {
    if yname == "srlg-name" { return "SrlgName" }
    if yname == "admin-weight" { return "AdminWeight" }
    if yname == "static-srlg-members" { return "StaticSrlgMembers" }
    return ""
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetSegmentPath() string {
    return "name" + "[srlg-name='" + fmt.Sprintf("%v", name.SrlgName) + "']"
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "static-srlg-members" {
        return &name.StaticSrlgMembers
    }
    return nil
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["static-srlg-members"] = &name.StaticSrlgMembers
    return children
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srlg-name"] = name.SrlgName
    leafs["admin-weight"] = name.AdminWeight
    return leafs
}

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetBundleName() string { return "cisco_ios_xr" }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetYangName() string { return "name" }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) SetParent(parent types.Entity) { name.parent = parent }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetParent() types.Entity { return name.parent }

func (name *MplsTe_GlobalAttributes_Srlg_Names_Name) GetParentYangName() string { return "names" }

// MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers
// Configure static SRLG members list
type MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A mapping of the local static SRLG member. The type is slice of
    // MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember.
    StaticSrlgMember []MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetFilter() yfilter.YFilter { return staticSrlgMembers.YFilter }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) SetFilter(yf yfilter.YFilter) { staticSrlgMembers.YFilter = yf }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetGoName(yname string) string {
    if yname == "static-srlg-member" { return "StaticSrlgMember" }
    return ""
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetSegmentPath() string {
    return "static-srlg-members"
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "static-srlg-member" {
        for _, c := range staticSrlgMembers.StaticSrlgMember {
            if staticSrlgMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember{}
        staticSrlgMembers.StaticSrlgMember = append(staticSrlgMembers.StaticSrlgMember, child)
        return &staticSrlgMembers.StaticSrlgMember[len(staticSrlgMembers.StaticSrlgMember)-1]
    }
    return nil
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range staticSrlgMembers.StaticSrlgMember {
        children[staticSrlgMembers.StaticSrlgMember[i].GetSegmentPath()] = &staticSrlgMembers.StaticSrlgMember[i]
    }
    return children
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetBundleName() string { return "cisco_ios_xr" }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetYangName() string { return "static-srlg-members" }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) SetParent(parent types.Entity) { staticSrlgMembers.parent = parent }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetParent() types.Entity { return staticSrlgMembers.parent }

func (staticSrlgMembers *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers) GetParentYangName() string { return "name" }

// MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember
// A mapping of the local static SRLG member
type MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. From address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FromAddress interface{}

    // To Addres. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    ToAddress interface{}
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetFilter() yfilter.YFilter { return staticSrlgMember.YFilter }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) SetFilter(yf yfilter.YFilter) { staticSrlgMember.YFilter = yf }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetGoName(yname string) string {
    if yname == "from-address" { return "FromAddress" }
    if yname == "to-address" { return "ToAddress" }
    return ""
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetSegmentPath() string {
    return "static-srlg-member" + "[from-address='" + fmt.Sprintf("%v", staticSrlgMember.FromAddress) + "']"
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["from-address"] = staticSrlgMember.FromAddress
    leafs["to-address"] = staticSrlgMember.ToAddress
    return leafs
}

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetBundleName() string { return "cisco_ios_xr" }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetYangName() string { return "static-srlg-member" }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) SetParent(parent types.Entity) { staticSrlgMember.parent = parent }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetParent() types.Entity { return staticSrlgMember.parent }

func (staticSrlgMember *MplsTe_GlobalAttributes_Srlg_Names_Name_StaticSrlgMembers_StaticSrlgMember) GetParentYangName() string { return "static-srlg-members" }

// MplsTe_GlobalAttributes_Queues
// Configure MPLS TE route priority
type MplsTe_GlobalAttributes_Queues struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure route priority queue value. The type is slice of
    // MplsTe_GlobalAttributes_Queues_Queue.
    Queue []MplsTe_GlobalAttributes_Queues_Queue
}

func (queues *MplsTe_GlobalAttributes_Queues) GetFilter() yfilter.YFilter { return queues.YFilter }

func (queues *MplsTe_GlobalAttributes_Queues) SetFilter(yf yfilter.YFilter) { queues.YFilter = yf }

func (queues *MplsTe_GlobalAttributes_Queues) GetGoName(yname string) string {
    if yname == "queue" { return "Queue" }
    return ""
}

func (queues *MplsTe_GlobalAttributes_Queues) GetSegmentPath() string {
    return "queues"
}

func (queues *MplsTe_GlobalAttributes_Queues) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "queue" {
        for _, c := range queues.Queue {
            if queues.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_Queues_Queue{}
        queues.Queue = append(queues.Queue, child)
        return &queues.Queue[len(queues.Queue)-1]
    }
    return nil
}

func (queues *MplsTe_GlobalAttributes_Queues) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range queues.Queue {
        children[queues.Queue[i].GetSegmentPath()] = &queues.Queue[i]
    }
    return children
}

func (queues *MplsTe_GlobalAttributes_Queues) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (queues *MplsTe_GlobalAttributes_Queues) GetBundleName() string { return "cisco_ios_xr" }

func (queues *MplsTe_GlobalAttributes_Queues) GetYangName() string { return "queues" }

func (queues *MplsTe_GlobalAttributes_Queues) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queues *MplsTe_GlobalAttributes_Queues) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queues *MplsTe_GlobalAttributes_Queues) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queues *MplsTe_GlobalAttributes_Queues) SetParent(parent types.Entity) { queues.parent = parent }

func (queues *MplsTe_GlobalAttributes_Queues) GetParent() types.Entity { return queues.parent }

func (queues *MplsTe_GlobalAttributes_Queues) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_Queues_Queue
// Configure route priority queue value
type MplsTe_GlobalAttributes_Queues_Queue struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Route Priority Tunnel Role. The type is
    // RoutePriorityRole.
    Role interface{}

    // Route priority queue value. The type is interface{} with range: 0..12. This
    // attribute is mandatory.
    Value interface{}
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetFilter() yfilter.YFilter { return queue.YFilter }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) SetFilter(yf yfilter.YFilter) { queue.YFilter = yf }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "value" { return "Value" }
    return ""
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetSegmentPath() string {
    return "queue" + "[role='" + fmt.Sprintf("%v", queue.Role) + "']"
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = queue.Role
    leafs["value"] = queue.Value
    return leafs
}

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetBundleName() string { return "cisco_ios_xr" }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetYangName() string { return "queue" }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) SetParent(parent types.Entity) { queue.parent = parent }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetParent() types.Entity { return queue.parent }

func (queue *MplsTe_GlobalAttributes_Queues_Queue) GetParentYangName() string { return "queues" }

// MplsTe_GlobalAttributes_Mib
// MPLS-TE MIB properties
type MplsTe_GlobalAttributes_Mib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disables mib midpoint LSP traffic stats collection. The type is
    // interface{}.
    MidpointLspStatsCollectionDisable interface{}
}

func (mib *MplsTe_GlobalAttributes_Mib) GetFilter() yfilter.YFilter { return mib.YFilter }

func (mib *MplsTe_GlobalAttributes_Mib) SetFilter(yf yfilter.YFilter) { mib.YFilter = yf }

func (mib *MplsTe_GlobalAttributes_Mib) GetGoName(yname string) string {
    if yname == "midpoint-lsp-stats-collection-disable" { return "MidpointLspStatsCollectionDisable" }
    return ""
}

func (mib *MplsTe_GlobalAttributes_Mib) GetSegmentPath() string {
    return "mib"
}

func (mib *MplsTe_GlobalAttributes_Mib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mib *MplsTe_GlobalAttributes_Mib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mib *MplsTe_GlobalAttributes_Mib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["midpoint-lsp-stats-collection-disable"] = mib.MidpointLspStatsCollectionDisable
    return leafs
}

func (mib *MplsTe_GlobalAttributes_Mib) GetBundleName() string { return "cisco_ios_xr" }

func (mib *MplsTe_GlobalAttributes_Mib) GetYangName() string { return "mib" }

func (mib *MplsTe_GlobalAttributes_Mib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mib *MplsTe_GlobalAttributes_Mib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mib *MplsTe_GlobalAttributes_Mib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mib *MplsTe_GlobalAttributes_Mib) SetParent(parent types.Entity) { mib.parent = parent }

func (mib *MplsTe_GlobalAttributes_Mib) GetParent() types.Entity { return mib.parent }

func (mib *MplsTe_GlobalAttributes_Mib) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_AttributeSet
// Attribute AttributeSets
type MplsTe_GlobalAttributes_AttributeSet struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Option Attribute-Set Table.
    PathOptionAttributes MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes

    // P2MP-TE Tunnel AttributeSets Table.
    P2MpteAttributes MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes

    // P2P-TE Tunnel AttributeSets Table.
    P2PTeAttributes MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes

    // Auto-backup Tunnel Attribute Table.
    AutoBackupAttributes MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes

    // OTN Path Protection Attributes table.
    OtnPpAttributes MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes

    // Auto-mesh Tunnel AttributeSets Table.
    AutoMeshAttributes MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes

    // XRO Tunnel Attributes table.
    XroAttributes MplsTe_GlobalAttributes_AttributeSet_XroAttributes
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetFilter() yfilter.YFilter { return attributeSet.YFilter }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) SetFilter(yf yfilter.YFilter) { attributeSet.YFilter = yf }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetGoName(yname string) string {
    if yname == "path-option-attributes" { return "PathOptionAttributes" }
    if yname == "p2mpte-attributes" { return "P2MpteAttributes" }
    if yname == "p2p-te-attributes" { return "P2PTeAttributes" }
    if yname == "auto-backup-attributes" { return "AutoBackupAttributes" }
    if yname == "otn-pp-attributes" { return "OtnPpAttributes" }
    if yname == "auto-mesh-attributes" { return "AutoMeshAttributes" }
    if yname == "xro-attributes" { return "XroAttributes" }
    return ""
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetSegmentPath() string {
    return "attribute-set"
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option-attributes" {
        return &attributeSet.PathOptionAttributes
    }
    if childYangName == "p2mpte-attributes" {
        return &attributeSet.P2MpteAttributes
    }
    if childYangName == "p2p-te-attributes" {
        return &attributeSet.P2PTeAttributes
    }
    if childYangName == "auto-backup-attributes" {
        return &attributeSet.AutoBackupAttributes
    }
    if childYangName == "otn-pp-attributes" {
        return &attributeSet.OtnPpAttributes
    }
    if childYangName == "auto-mesh-attributes" {
        return &attributeSet.AutoMeshAttributes
    }
    if childYangName == "xro-attributes" {
        return &attributeSet.XroAttributes
    }
    return nil
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-option-attributes"] = &attributeSet.PathOptionAttributes
    children["p2mpte-attributes"] = &attributeSet.P2MpteAttributes
    children["p2p-te-attributes"] = &attributeSet.P2PTeAttributes
    children["auto-backup-attributes"] = &attributeSet.AutoBackupAttributes
    children["otn-pp-attributes"] = &attributeSet.OtnPpAttributes
    children["auto-mesh-attributes"] = &attributeSet.AutoMeshAttributes
    children["xro-attributes"] = &attributeSet.XroAttributes
    return children
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetBundleName() string { return "cisco_ios_xr" }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetYangName() string { return "attribute-set" }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) SetParent(parent types.Entity) { attributeSet.parent = parent }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetParent() types.Entity { return attributeSet.parent }

func (attributeSet *MplsTe_GlobalAttributes_AttributeSet) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes
// Path Option Attribute-Set Table
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Option Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute.
    PathOptionAttribute []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetFilter() yfilter.YFilter { return pathOptionAttributes.YFilter }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) SetFilter(yf yfilter.YFilter) { pathOptionAttributes.YFilter = yf }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetGoName(yname string) string {
    if yname == "path-option-attribute" { return "PathOptionAttribute" }
    return ""
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetSegmentPath() string {
    return "path-option-attributes"
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option-attribute" {
        for _, c := range pathOptionAttributes.PathOptionAttribute {
            if pathOptionAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute{}
        pathOptionAttributes.PathOptionAttribute = append(pathOptionAttributes.PathOptionAttribute, child)
        return &pathOptionAttributes.PathOptionAttribute[len(pathOptionAttributes.PathOptionAttribute)-1]
    }
    return nil
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptionAttributes.PathOptionAttribute {
        children[pathOptionAttributes.PathOptionAttribute[i].GetSegmentPath()] = &pathOptionAttributes.PathOptionAttribute[i]
    }
    return children
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetYangName() string { return "path-option-attributes" }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) SetParent(parent types.Entity) { pathOptionAttributes.parent = parent }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetParent() types.Entity { return pathOptionAttributes.parent }

func (pathOptionAttributes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute
// Path Option Attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Configure BFD reverse path.
    BfdReversePath MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath

    // Configure path selection properties.
    AttPathOptionPathSelection MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection

    // Configure pce properties.
    Pce MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce

    // Set the affinity flags and mask.
    AffinityMask MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask

    // Tunnel bandwidth requirement.
    Bandwidth MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetFilter() yfilter.YFilter { return pathOptionAttribute.YFilter }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) SetFilter(yf yfilter.YFilter) { pathOptionAttribute.YFilter = yf }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "enable" { return "Enable" }
    if yname == "bfd-reverse-path" { return "BfdReversePath" }
    if yname == "att-path-option-path-selection" { return "AttPathOptionPathSelection" }
    if yname == "pce" { return "Pce" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    return ""
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetSegmentPath() string {
    return "path-option-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", pathOptionAttribute.AttributeSetName) + "']"
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-reverse-path" {
        return &pathOptionAttribute.BfdReversePath
    }
    if childYangName == "att-path-option-path-selection" {
        return &pathOptionAttribute.AttPathOptionPathSelection
    }
    if childYangName == "pce" {
        return &pathOptionAttribute.Pce
    }
    if childYangName == "affinity-mask" {
        return &pathOptionAttribute.AffinityMask
    }
    if childYangName == "bandwidth" {
        return &pathOptionAttribute.Bandwidth
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &pathOptionAttribute.NewStyleAffinityAffinityTypes
    }
    return nil
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd-reverse-path"] = &pathOptionAttribute.BfdReversePath
    children["att-path-option-path-selection"] = &pathOptionAttribute.AttPathOptionPathSelection
    children["pce"] = &pathOptionAttribute.Pce
    children["affinity-mask"] = &pathOptionAttribute.AffinityMask
    children["bandwidth"] = &pathOptionAttribute.Bandwidth
    children["new-style-affinity-affinity-types"] = &pathOptionAttribute.NewStyleAffinityAffinityTypes
    return children
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = pathOptionAttribute.AttributeSetName
    leafs["enable"] = pathOptionAttribute.Enable
    return leafs
}

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetYangName() string { return "path-option-attribute" }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) SetParent(parent types.Entity) { pathOptionAttribute.parent = parent }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetParent() types.Entity { return pathOptionAttribute.parent }

func (pathOptionAttribute *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute) GetParentYangName() string { return "path-option-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath
// Configure BFD reverse path
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD reverse path type. The type is BfdReversePath.
    BfdReversePathType interface{}

    // BFD reverse path binding label. The type is interface{} with range:
    // 0..1048575. This attribute is mandatory.
    BindingLabel interface{}
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetFilter() yfilter.YFilter { return bfdReversePath.YFilter }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) SetFilter(yf yfilter.YFilter) { bfdReversePath.YFilter = yf }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetGoName(yname string) string {
    if yname == "bfd-reverse-path-type" { return "BfdReversePathType" }
    if yname == "binding-label" { return "BindingLabel" }
    return ""
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetSegmentPath() string {
    return "bfd-reverse-path"
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-reverse-path-type"] = bfdReversePath.BfdReversePathType
    leafs["binding-label"] = bfdReversePath.BindingLabel
    return leafs
}

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetBundleName() string { return "cisco_ios_xr" }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetYangName() string { return "bfd-reverse-path" }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) SetParent(parent types.Entity) { bfdReversePath.parent = parent }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetParent() types.Entity { return bfdReversePath.parent }

func (bfdReversePath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_BfdReversePath) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection exclude list name configuration. The type is string with
    // length: 1..64.
    PathSelectionExcludeList interface{}

    // Enter path selection configuration. The type is interface{}.
    Enable interface{}

    // Path selection cost limit configuration for this specific tunnel. The type
    // is interface{} with range: 1..4294967295.
    PathSelectionCostLimit interface{}

    // Path invalidation configuration for this specific tunnel.
    Invalidation MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetFilter() yfilter.YFilter { return attPathOptionPathSelection.YFilter }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) SetFilter(yf yfilter.YFilter) { attPathOptionPathSelection.YFilter = yf }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetGoName(yname string) string {
    if yname == "path-selection-exclude-list" { return "PathSelectionExcludeList" }
    if yname == "enable" { return "Enable" }
    if yname == "path-selection-cost-limit" { return "PathSelectionCostLimit" }
    if yname == "invalidation" { return "Invalidation" }
    return ""
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetSegmentPath() string {
    return "att-path-option-path-selection"
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "invalidation" {
        return &attPathOptionPathSelection.Invalidation
    }
    return nil
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["invalidation"] = &attPathOptionPathSelection.Invalidation
    return children
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-selection-exclude-list"] = attPathOptionPathSelection.PathSelectionExcludeList
    leafs["enable"] = attPathOptionPathSelection.Enable
    leafs["path-selection-cost-limit"] = attPathOptionPathSelection.PathSelectionCostLimit
    return leafs
}

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetYangName() string { return "att-path-option-path-selection" }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) SetParent(parent types.Entity) { attPathOptionPathSelection.parent = parent }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetParent() types.Entity { return attPathOptionPathSelection.parent }

func (attPathOptionPathSelection *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation
// Path invalidation configuration for this
// specific tunnel
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetFilter() yfilter.YFilter { return invalidation.YFilter }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) SetFilter(yf yfilter.YFilter) { invalidation.YFilter = yf }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetGoName(yname string) string {
    if yname == "path-invalidation-timeout" { return "PathInvalidationTimeout" }
    if yname == "path-invalidation-action" { return "PathInvalidationAction" }
    return ""
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetSegmentPath() string {
    return "invalidation"
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-invalidation-timeout"] = invalidation.PathInvalidationTimeout
    leafs["path-invalidation-action"] = invalidation.PathInvalidationAction
    return leafs
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetBundleName() string { return "cisco_ios_xr" }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetYangName() string { return "invalidation" }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) SetParent(parent types.Entity) { invalidation.parent = parent }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetParent() types.Entity { return invalidation.parent }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AttPathOptionPathSelection_Invalidation) GetParentYangName() string { return "att-path-option-path-selection" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce
// Configure pce properties
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Bidirectional parameters.
    Bidirectional MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional

    // Disjoint path parameters.
    DisjointPath MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetFilter() yfilter.YFilter { return pce.YFilter }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) SetFilter(yf yfilter.YFilter) { pce.YFilter = yf }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "bidirectional" { return "Bidirectional" }
    if yname == "disjoint-path" { return "DisjointPath" }
    return ""
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetSegmentPath() string {
    return "pce"
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bidirectional" {
        return &pce.Bidirectional
    }
    if childYangName == "disjoint-path" {
        return &pce.DisjointPath
    }
    return nil
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bidirectional"] = &pce.Bidirectional
    children["disjoint-path"] = &pce.DisjointPath
    return children
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pce.Enable
    return leafs
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetBundleName() string { return "cisco_ios_xr" }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetYangName() string { return "pce" }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) SetParent(parent types.Entity) { pce.parent = parent }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetParent() types.Entity { return pce.parent }

func (pce *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional
// Bidirectional parameters
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bidirectional Source IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    BdSourceAddress interface{}

    // Bidirectional Group ID. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    BdGroupId interface{}
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetFilter() yfilter.YFilter { return bidirectional.YFilter }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) SetFilter(yf yfilter.YFilter) { bidirectional.YFilter = yf }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetGoName(yname string) string {
    if yname == "bd-source-address" { return "BdSourceAddress" }
    if yname == "bd-group-id" { return "BdGroupId" }
    return ""
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetSegmentPath() string {
    return "bidirectional"
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bd-source-address"] = bidirectional.BdSourceAddress
    leafs["bd-group-id"] = bidirectional.BdGroupId
    return leafs
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetBundleName() string { return "cisco_ios_xr" }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetYangName() string { return "bidirectional" }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) SetParent(parent types.Entity) { bidirectional.parent = parent }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetParent() types.Entity { return bidirectional.parent }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_Bidirectional) GetParentYangName() string { return "pce" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath
// Disjoint path parameters
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disjoint Path Source IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    DpSourceAddress interface{}

    // Disjoint Path Type. The type is interface{} with range: 1..3. This
    // attribute is mandatory.
    DpType interface{}

    // Disjoint Path Group ID. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    DpGroupId interface{}
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetFilter() yfilter.YFilter { return disjointPath.YFilter }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) SetFilter(yf yfilter.YFilter) { disjointPath.YFilter = yf }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetGoName(yname string) string {
    if yname == "dp-source-address" { return "DpSourceAddress" }
    if yname == "dp-type" { return "DpType" }
    if yname == "dp-group-id" { return "DpGroupId" }
    return ""
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetSegmentPath() string {
    return "disjoint-path"
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dp-source-address"] = disjointPath.DpSourceAddress
    leafs["dp-type"] = disjointPath.DpType
    leafs["dp-group-id"] = disjointPath.DpGroupId
    return leafs
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetBundleName() string { return "cisco_ios_xr" }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetYangName() string { return "disjoint-path" }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) SetParent(parent types.Entity) { disjointPath.parent = parent }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetParent() types.Entity { return disjointPath.parent }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Pce_DisjointPath) GetParentYangName() string { return "pce" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_AffinityMask) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_Bandwidth) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "path-option-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_PathOptionAttributes_PathOptionAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes
// P2MP-TE Tunnel AttributeSets Table
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // P2MP-TE Tunnel Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute.
    P2MpteAttribute []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetFilter() yfilter.YFilter { return p2MpteAttributes.YFilter }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) SetFilter(yf yfilter.YFilter) { p2MpteAttributes.YFilter = yf }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetGoName(yname string) string {
    if yname == "p2mpte-attribute" { return "P2MpteAttribute" }
    return ""
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetSegmentPath() string {
    return "p2mpte-attributes"
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2mpte-attribute" {
        for _, c := range p2MpteAttributes.P2MpteAttribute {
            if p2MpteAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute{}
        p2MpteAttributes.P2MpteAttribute = append(p2MpteAttributes.P2MpteAttribute, child)
        return &p2MpteAttributes.P2MpteAttribute[len(p2MpteAttributes.P2MpteAttribute)-1]
    }
    return nil
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range p2MpteAttributes.P2MpteAttribute {
        children[p2MpteAttributes.P2MpteAttribute[i].GetSegmentPath()] = &p2MpteAttributes.P2MpteAttribute[i]
    }
    return children
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetYangName() string { return "p2mpte-attributes" }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) SetParent(parent types.Entity) { p2MpteAttributes.parent = parent }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetParent() types.Entity { return p2MpteAttributes.parent }

func (p2MpteAttributes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute
// P2MP-TE Tunnel Attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // The bandwidth of the interface in kbps. The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    InterfaceBandwidth interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Tunnel Setup and Hold Priorities.
    Priority MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority

    // Set the affinity flags and mask.
    AffinityMask MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask

    // Tunnel bandwidth requirement.
    Bandwidth MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute

    // Log tunnel LSP messages.
    Logging MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetFilter() yfilter.YFilter { return p2MpteAttribute.YFilter }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) SetFilter(yf yfilter.YFilter) { p2MpteAttribute.YFilter = yf }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "interface-bandwidth" { return "InterfaceBandwidth" }
    if yname == "enable" { return "Enable" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "priority" { return "Priority" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "path-selection" { return "PathSelection" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "logging" { return "Logging" }
    return ""
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetSegmentPath() string {
    return "p2mpte-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", p2MpteAttribute.AttributeSetName) + "']"
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority" {
        return &p2MpteAttribute.Priority
    }
    if childYangName == "affinity-mask" {
        return &p2MpteAttribute.AffinityMask
    }
    if childYangName == "bandwidth" {
        return &p2MpteAttribute.Bandwidth
    }
    if childYangName == "path-selection" {
        return &p2MpteAttribute.PathSelection
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &p2MpteAttribute.NewStyleAffinityAffinityTypes
    }
    if childYangName == "fast-reroute" {
        return &p2MpteAttribute.FastReroute
    }
    if childYangName == "logging" {
        return &p2MpteAttribute.Logging
    }
    return nil
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority"] = &p2MpteAttribute.Priority
    children["affinity-mask"] = &p2MpteAttribute.AffinityMask
    children["bandwidth"] = &p2MpteAttribute.Bandwidth
    children["path-selection"] = &p2MpteAttribute.PathSelection
    children["new-style-affinity-affinity-types"] = &p2MpteAttribute.NewStyleAffinityAffinityTypes
    children["fast-reroute"] = &p2MpteAttribute.FastReroute
    children["logging"] = &p2MpteAttribute.Logging
    return children
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = p2MpteAttribute.AttributeSetName
    leafs["interface-bandwidth"] = p2MpteAttribute.InterfaceBandwidth
    leafs["enable"] = p2MpteAttribute.Enable
    leafs["record-route"] = p2MpteAttribute.RecordRoute
    return leafs
}

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetYangName() string { return "p2mpte-attribute" }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) SetParent(parent types.Entity) { p2MpteAttribute.parent = parent }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetParent() types.Entity { return p2MpteAttribute.parent }

func (p2MpteAttribute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute) GetParentYangName() string { return "p2mpte-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetYangName() string { return "priority" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetParent() types.Entity { return priority.parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Priority) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_AffinityMask) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Bandwidth) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path selection. The type is interface{}.
    Enable interface{}
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_PathSelection) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetGoName(yname string) string {
    if yname == "bandwidth-protection" { return "BandwidthProtection" }
    if yname == "node-protection" { return "NodeProtection" }
    return ""
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-protection"] = fastReroute.BandwidthProtection
    leafs["node-protection"] = fastReroute.NodeProtection
    return leafs
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_FastReroute) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging
// Log tunnel LSP messages
type MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Log tunnel bandwidth change messages. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log all tunnel sub-LSP state messages. The type is interface{}.
    SubLspStateMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetGoName(yname string) string {
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "all" { return "All" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "sub-lsp-state-message" { return "SubLspStateMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    return ""
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    leafs["reoptimized-message"] = logging.ReoptimizedMessage
    leafs["bandwidth-change-message"] = logging.BandwidthChangeMessage
    leafs["all"] = logging.All
    leafs["pcalc-failure-message"] = logging.PcalcFailureMessage
    leafs["state-message"] = logging.StateMessage
    leafs["reoptimize-attempts-message"] = logging.ReoptimizeAttemptsMessage
    leafs["sub-lsp-state-message"] = logging.SubLspStateMessage
    leafs["reroute-messsage"] = logging.RerouteMesssage
    return leafs
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2MpteAttributes_P2MpteAttribute_Logging) GetParentYangName() string { return "p2mpte-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes
// P2P-TE Tunnel AttributeSets Table
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // P2P-TE Tunnel Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute.
    P2PTeAttribute []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetFilter() yfilter.YFilter { return p2PTeAttributes.YFilter }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) SetFilter(yf yfilter.YFilter) { p2PTeAttributes.YFilter = yf }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetGoName(yname string) string {
    if yname == "p2p-te-attribute" { return "P2PTeAttribute" }
    return ""
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetSegmentPath() string {
    return "p2p-te-attributes"
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "p2p-te-attribute" {
        for _, c := range p2PTeAttributes.P2PTeAttribute {
            if p2PTeAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute{}
        p2PTeAttributes.P2PTeAttribute = append(p2PTeAttributes.P2PTeAttribute, child)
        return &p2PTeAttributes.P2PTeAttribute[len(p2PTeAttributes.P2PTeAttribute)-1]
    }
    return nil
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range p2PTeAttributes.P2PTeAttribute {
        children[p2PTeAttributes.P2PTeAttribute[i].GetSegmentPath()] = &p2PTeAttributes.P2PTeAttribute[i]
    }
    return children
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetYangName() string { return "p2p-te-attributes" }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) SetParent(parent types.Entity) { p2PTeAttributes.parent = parent }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetParent() types.Entity { return p2PTeAttributes.parent }

func (p2PTeAttributes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute
// P2P-TE Tunnel Attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection

    // Configure pce properties.
    Pce MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce

    // Set the affinity flags and mask.
    AffinityMask MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask

    // Log tunnel LSP messages.
    Logging MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetFilter() yfilter.YFilter { return p2PTeAttribute.YFilter }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) SetFilter(yf yfilter.YFilter) { p2PTeAttribute.YFilter = yf }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "enable" { return "Enable" }
    if yname == "path-selection" { return "PathSelection" }
    if yname == "pce" { return "Pce" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "logging" { return "Logging" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    return ""
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetSegmentPath() string {
    return "p2p-te-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", p2PTeAttribute.AttributeSetName) + "']"
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-selection" {
        return &p2PTeAttribute.PathSelection
    }
    if childYangName == "pce" {
        return &p2PTeAttribute.Pce
    }
    if childYangName == "affinity-mask" {
        return &p2PTeAttribute.AffinityMask
    }
    if childYangName == "logging" {
        return &p2PTeAttribute.Logging
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &p2PTeAttribute.NewStyleAffinityAffinityTypes
    }
    return nil
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-selection"] = &p2PTeAttribute.PathSelection
    children["pce"] = &p2PTeAttribute.Pce
    children["affinity-mask"] = &p2PTeAttribute.AffinityMask
    children["logging"] = &p2PTeAttribute.Logging
    children["new-style-affinity-affinity-types"] = &p2PTeAttribute.NewStyleAffinityAffinityTypes
    return children
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = p2PTeAttribute.AttributeSetName
    leafs["enable"] = p2PTeAttribute.Enable
    return leafs
}

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetYangName() string { return "p2p-te-attribute" }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) SetParent(parent types.Entity) { p2PTeAttribute.parent = parent }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetParent() types.Entity { return p2PTeAttribute.parent }

func (p2PTeAttribute *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute) GetParentYangName() string { return "p2p-te-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection metric to use in path calculation. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Segment routing adjacency protection type to use in path calculation. The
    // type is MplsTePathSelectionSegmentRoutingAdjacencyProtection.
    PathSelectionSegmentRoutingAdjacencyProtection interface{}

    // Enter path selection configuration. The type is interface{}.
    Enable interface{}

    // Path selection segment routing prepend configuration.
    SegmentRoutingPrepend MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend

    // Path selection invalidation configuration.
    Invalidation MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "path-selection-segment-routing-adjacency-protection" { return "PathSelectionSegmentRoutingAdjacencyProtection" }
    if yname == "enable" { return "Enable" }
    if yname == "segment-routing-prepend" { return "SegmentRoutingPrepend" }
    if yname == "invalidation" { return "Invalidation" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "segment-routing-prepend" {
        return &pathSelection.SegmentRoutingPrepend
    }
    if childYangName == "invalidation" {
        return &pathSelection.Invalidation
    }
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["segment-routing-prepend"] = &pathSelection.SegmentRoutingPrepend
    children["invalidation"] = &pathSelection.Invalidation
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-selection-metric"] = pathSelection.PathSelectionMetric
    leafs["path-selection-segment-routing-adjacency-protection"] = pathSelection.PathSelectionSegmentRoutingAdjacencyProtection
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection) GetParentYangName() string { return "p2p-te-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend
// Path selection segment routing prepend
// configuration
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter path selection segment routing prepend submode. The type is
    // interface{}.
    Enable interface{}

    // Segment routing prepend index table.
    Indexes MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetFilter() yfilter.YFilter { return segmentRoutingPrepend.YFilter }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) SetFilter(yf yfilter.YFilter) { segmentRoutingPrepend.YFilter = yf }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "indexes" { return "Indexes" }
    return ""
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetSegmentPath() string {
    return "segment-routing-prepend"
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "indexes" {
        return &segmentRoutingPrepend.Indexes
    }
    return nil
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["indexes"] = &segmentRoutingPrepend.Indexes
    return children
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = segmentRoutingPrepend.Enable
    return leafs
}

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetBundleName() string { return "cisco_ios_xr" }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetYangName() string { return "segment-routing-prepend" }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) SetParent(parent types.Entity) { segmentRoutingPrepend.parent = parent }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetParent() types.Entity { return segmentRoutingPrepend.parent }

func (segmentRoutingPrepend *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes
// Segment routing prepend index table
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prepend index information. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index.
    Index []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetFilter() yfilter.YFilter { return indexes.YFilter }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) SetFilter(yf yfilter.YFilter) { indexes.YFilter = yf }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    return ""
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetSegmentPath() string {
    return "indexes"
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "index" {
        for _, c := range indexes.Index {
            if indexes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index{}
        indexes.Index = append(indexes.Index, child)
        return &indexes.Index[len(indexes.Index)-1]
    }
    return nil
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range indexes.Index {
        children[indexes.Index[i].GetSegmentPath()] = &indexes.Index[i]
    }
    return children
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetBundleName() string { return "cisco_ios_xr" }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetYangName() string { return "indexes" }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) SetParent(parent types.Entity) { indexes.parent = parent }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetParent() types.Entity { return indexes.parent }

func (indexes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes) GetParentYangName() string { return "segment-routing-prepend" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index
// Prepend index information
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Index number. The type is interface{} with range:
    // 1..10.
    IndexNumber interface{}

    // Prepend type. The type is SrPrepend. The default value is none-type.
    PrependType interface{}

    // MPLS Label. The type is interface{} with range: -2147483648..2147483647.
    // The default value is 1048577.
    MplsLabel interface{}
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetFilter() yfilter.YFilter { return index.YFilter }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) SetFilter(yf yfilter.YFilter) { index.YFilter = yf }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetGoName(yname string) string {
    if yname == "index-number" { return "IndexNumber" }
    if yname == "prepend-type" { return "PrependType" }
    if yname == "mpls-label" { return "MplsLabel" }
    return ""
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetSegmentPath() string {
    return "index" + "[index-number='" + fmt.Sprintf("%v", index.IndexNumber) + "']"
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index-number"] = index.IndexNumber
    leafs["prepend-type"] = index.PrependType
    leafs["mpls-label"] = index.MplsLabel
    return leafs
}

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetBundleName() string { return "cisco_ios_xr" }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetYangName() string { return "index" }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) SetParent(parent types.Entity) { index.parent = parent }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetParent() types.Entity { return index.parent }

func (index *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_SegmentRoutingPrepend_Indexes_Index) GetParentYangName() string { return "indexes" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation
// Path selection invalidation configuration
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection invalidation timer value (milliseconds). The type is
    // interface{} with range: 0..60000. Units are millisecond.
    InvalidationTimer interface{}

    // Path selection invalidation timer expire type. The type is
    // MplsTePathSelectionInvalidationTimerExpire. The default value is
    // tunnel-action-tear.
    InvalidationTimerExpireType interface{}
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetFilter() yfilter.YFilter { return invalidation.YFilter }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) SetFilter(yf yfilter.YFilter) { invalidation.YFilter = yf }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetGoName(yname string) string {
    if yname == "invalidation-timer" { return "InvalidationTimer" }
    if yname == "invalidation-timer-expire-type" { return "InvalidationTimerExpireType" }
    return ""
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetSegmentPath() string {
    return "invalidation"
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["invalidation-timer"] = invalidation.InvalidationTimer
    leafs["invalidation-timer-expire-type"] = invalidation.InvalidationTimerExpireType
    return leafs
}

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetBundleName() string { return "cisco_ios_xr" }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetYangName() string { return "invalidation" }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) SetParent(parent types.Entity) { invalidation.parent = parent }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetParent() types.Entity { return invalidation.parent }

func (invalidation *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_PathSelection_Invalidation) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce
// Configure pce properties
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always set to true. The type is interface{}.
    Enable interface{}

    // Bidirectional parameters.
    Bidirectional MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional

    // Disjoint path parameters.
    DisjointPath MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetFilter() yfilter.YFilter { return pce.YFilter }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) SetFilter(yf yfilter.YFilter) { pce.YFilter = yf }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "bidirectional" { return "Bidirectional" }
    if yname == "disjoint-path" { return "DisjointPath" }
    return ""
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetSegmentPath() string {
    return "pce"
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bidirectional" {
        return &pce.Bidirectional
    }
    if childYangName == "disjoint-path" {
        return &pce.DisjointPath
    }
    return nil
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bidirectional"] = &pce.Bidirectional
    children["disjoint-path"] = &pce.DisjointPath
    return children
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pce.Enable
    return leafs
}

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetBundleName() string { return "cisco_ios_xr" }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetYangName() string { return "pce" }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) SetParent(parent types.Entity) { pce.parent = parent }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetParent() types.Entity { return pce.parent }

func (pce *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce) GetParentYangName() string { return "p2p-te-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional
// Bidirectional parameters
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bidirectional Source IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    BdSourceAddress interface{}

    // Bidirectional Group ID. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    BdGroupId interface{}
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetFilter() yfilter.YFilter { return bidirectional.YFilter }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) SetFilter(yf yfilter.YFilter) { bidirectional.YFilter = yf }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetGoName(yname string) string {
    if yname == "bd-source-address" { return "BdSourceAddress" }
    if yname == "bd-group-id" { return "BdGroupId" }
    return ""
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetSegmentPath() string {
    return "bidirectional"
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bd-source-address"] = bidirectional.BdSourceAddress
    leafs["bd-group-id"] = bidirectional.BdGroupId
    return leafs
}

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetBundleName() string { return "cisco_ios_xr" }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetYangName() string { return "bidirectional" }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) SetParent(parent types.Entity) { bidirectional.parent = parent }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetParent() types.Entity { return bidirectional.parent }

func (bidirectional *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_Bidirectional) GetParentYangName() string { return "pce" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath
// Disjoint path parameters
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disjoint Path Source IP Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    DpSourceAddress interface{}

    // Disjoint Path Type. The type is interface{} with range: 1..3. This
    // attribute is mandatory.
    DpType interface{}

    // Disjoint Path Group ID. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    DpGroupId interface{}
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetFilter() yfilter.YFilter { return disjointPath.YFilter }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) SetFilter(yf yfilter.YFilter) { disjointPath.YFilter = yf }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetGoName(yname string) string {
    if yname == "dp-source-address" { return "DpSourceAddress" }
    if yname == "dp-type" { return "DpType" }
    if yname == "dp-group-id" { return "DpGroupId" }
    return ""
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetSegmentPath() string {
    return "disjoint-path"
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dp-source-address"] = disjointPath.DpSourceAddress
    leafs["dp-type"] = disjointPath.DpType
    leafs["dp-group-id"] = disjointPath.DpGroupId
    return leafs
}

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetBundleName() string { return "cisco_ios_xr" }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetYangName() string { return "disjoint-path" }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) SetParent(parent types.Entity) { disjointPath.parent = parent }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetParent() types.Entity { return disjointPath.parent }

func (disjointPath *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Pce_DisjointPath) GetParentYangName() string { return "pce" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_AffinityMask) GetParentYangName() string { return "p2p-te-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging
// Log tunnel LSP messages
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    LspSwitchOverChangeMessage interface{}

    // Log all events for a tunnel. The type is interface{}.
    All interface{}

    // Log tunnel record-route messages. The type is interface{}.
    RecordRouteMesssage interface{}

    // Enable BFD session state change alarm. The type is interface{}.
    BfdStateMessage interface{}

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetGoName(yname string) string {
    if yname == "lsp-switch-over-change-message" { return "LspSwitchOverChangeMessage" }
    if yname == "all" { return "All" }
    if yname == "record-route-messsage" { return "RecordRouteMesssage" }
    if yname == "bfd-state-message" { return "BfdStateMessage" }
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    return ""
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-switch-over-change-message"] = logging.LspSwitchOverChangeMessage
    leafs["all"] = logging.All
    leafs["record-route-messsage"] = logging.RecordRouteMesssage
    leafs["bfd-state-message"] = logging.BfdStateMessage
    leafs["bandwidth-change-message"] = logging.BandwidthChangeMessage
    leafs["reoptimize-attempts-message"] = logging.ReoptimizeAttemptsMessage
    leafs["reroute-messsage"] = logging.RerouteMesssage
    leafs["state-message"] = logging.StateMessage
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    leafs["reoptimized-message"] = logging.ReoptimizedMessage
    leafs["pcalc-failure-message"] = logging.PcalcFailureMessage
    return leafs
}

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_Logging) GetParentYangName() string { return "p2p-te-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "p2p-te-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_P2PTeAttributes_P2PTeAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes
// Auto-backup Tunnel Attribute Table
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto-backup Tunnel Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute.
    AutoBackupAttribute []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetFilter() yfilter.YFilter { return autoBackupAttributes.YFilter }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) SetFilter(yf yfilter.YFilter) { autoBackupAttributes.YFilter = yf }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetGoName(yname string) string {
    if yname == "auto-backup-attribute" { return "AutoBackupAttribute" }
    return ""
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetSegmentPath() string {
    return "auto-backup-attributes"
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auto-backup-attribute" {
        for _, c := range autoBackupAttributes.AutoBackupAttribute {
            if autoBackupAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute{}
        autoBackupAttributes.AutoBackupAttribute = append(autoBackupAttributes.AutoBackupAttribute, child)
        return &autoBackupAttributes.AutoBackupAttribute[len(autoBackupAttributes.AutoBackupAttribute)-1]
    }
    return nil
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range autoBackupAttributes.AutoBackupAttribute {
        children[autoBackupAttributes.AutoBackupAttribute[i].GetSegmentPath()] = &autoBackupAttributes.AutoBackupAttribute[i]
    }
    return children
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetYangName() string { return "auto-backup-attributes" }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) SetParent(parent types.Entity) { autoBackupAttributes.parent = parent }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetParent() types.Entity { return autoBackupAttributes.parent }

func (autoBackupAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute
// Auto-backup Tunnel Attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Signalled name.
    SignalledName MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName

    // Log tunnel LSP messages.
    AutoBackupLogging MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging

    // Tunnel Setup and Hold Priorities.
    Priority MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority

    // Set the affinity flags and mask.
    AffinityMask MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection

    // Policy classes for PBTS.
    PolicyClasses MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetFilter() yfilter.YFilter { return autoBackupAttribute.YFilter }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) SetFilter(yf yfilter.YFilter) { autoBackupAttribute.YFilter = yf }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "enable" { return "Enable" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "signalled-name" { return "SignalledName" }
    if yname == "auto-backup-logging" { return "AutoBackupLogging" }
    if yname == "priority" { return "Priority" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "path-selection" { return "PathSelection" }
    if yname == "policy-classes" { return "PolicyClasses" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    return ""
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetSegmentPath() string {
    return "auto-backup-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", autoBackupAttribute.AttributeSetName) + "']"
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "signalled-name" {
        return &autoBackupAttribute.SignalledName
    }
    if childYangName == "auto-backup-logging" {
        return &autoBackupAttribute.AutoBackupLogging
    }
    if childYangName == "priority" {
        return &autoBackupAttribute.Priority
    }
    if childYangName == "affinity-mask" {
        return &autoBackupAttribute.AffinityMask
    }
    if childYangName == "path-selection" {
        return &autoBackupAttribute.PathSelection
    }
    if childYangName == "policy-classes" {
        return &autoBackupAttribute.PolicyClasses
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &autoBackupAttribute.NewStyleAffinityAffinityTypes
    }
    return nil
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["signalled-name"] = &autoBackupAttribute.SignalledName
    children["auto-backup-logging"] = &autoBackupAttribute.AutoBackupLogging
    children["priority"] = &autoBackupAttribute.Priority
    children["affinity-mask"] = &autoBackupAttribute.AffinityMask
    children["path-selection"] = &autoBackupAttribute.PathSelection
    children["policy-classes"] = &autoBackupAttribute.PolicyClasses
    children["new-style-affinity-affinity-types"] = &autoBackupAttribute.NewStyleAffinityAffinityTypes
    return children
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = autoBackupAttribute.AttributeSetName
    leafs["enable"] = autoBackupAttribute.Enable
    leafs["record-route"] = autoBackupAttribute.RecordRoute
    return leafs
}

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetYangName() string { return "auto-backup-attribute" }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) SetParent(parent types.Entity) { autoBackupAttribute.parent = parent }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetParent() types.Entity { return autoBackupAttribute.parent }

func (autoBackupAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute) GetParentYangName() string { return "auto-backup-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName
// Signalled name
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Signalled name. The type is string.
    Name interface{}

    // Source address or name. The type is MplsTeSigNameOption.
    SourceType interface{}

    // Protected-interface address or name. The type is MplsTeSigNameOption.
    ProtectedInterfaceType interface{}

    // Set if merge-point address is to be appended. The type is bool.
    MpAddress interface{}
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetFilter() yfilter.YFilter { return signalledName.YFilter }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) SetFilter(yf yfilter.YFilter) { signalledName.YFilter = yf }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "source-type" { return "SourceType" }
    if yname == "protected-interface-type" { return "ProtectedInterfaceType" }
    if yname == "mp-address" { return "MpAddress" }
    return ""
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetSegmentPath() string {
    return "signalled-name"
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = signalledName.Name
    leafs["source-type"] = signalledName.SourceType
    leafs["protected-interface-type"] = signalledName.ProtectedInterfaceType
    leafs["mp-address"] = signalledName.MpAddress
    return leafs
}

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetBundleName() string { return "cisco_ios_xr" }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetYangName() string { return "signalled-name" }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) SetParent(parent types.Entity) { signalledName.parent = parent }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetParent() types.Entity { return signalledName.parent }

func (signalledName *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_SignalledName) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging
// Log tunnel LSP messages
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetFilter() yfilter.YFilter { return autoBackupLogging.YFilter }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) SetFilter(yf yfilter.YFilter) { autoBackupLogging.YFilter = yf }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetGoName(yname string) string {
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    return ""
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetSegmentPath() string {
    return "auto-backup-logging"
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-change-message"] = autoBackupLogging.BandwidthChangeMessage
    leafs["reoptimize-attempts-message"] = autoBackupLogging.ReoptimizeAttemptsMessage
    leafs["state-message"] = autoBackupLogging.StateMessage
    leafs["reoptimized-message"] = autoBackupLogging.ReoptimizedMessage
    return leafs
}

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetBundleName() string { return "cisco_ios_xr" }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetYangName() string { return "auto-backup-logging" }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) SetParent(parent types.Entity) { autoBackupLogging.parent = parent }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetParent() types.Entity { return autoBackupLogging.parent }

func (autoBackupLogging *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AutoBackupLogging) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetYangName() string { return "priority" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetParent() types.Entity { return priority.parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_Priority) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_AffinityMask) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path selection. The type is interface{}.
    Enable interface{}
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PathSelection) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses
// Policy classes for PBTS
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of Policy class. The type is slice of interface{} with range: 1..8.
    PolicyClass []interface{}
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetFilter() yfilter.YFilter { return policyClasses.YFilter }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) SetFilter(yf yfilter.YFilter) { policyClasses.YFilter = yf }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetGoName(yname string) string {
    if yname == "policy-class" { return "PolicyClass" }
    return ""
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetSegmentPath() string {
    return "policy-classes"
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policy-class"] = policyClasses.PolicyClass
    return leafs
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetBundleName() string { return "cisco_ios_xr" }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetYangName() string { return "policy-classes" }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) SetParent(parent types.Entity) { policyClasses.parent = parent }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetParent() types.Entity { return policyClasses.parent }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_PolicyClasses) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "auto-backup-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoBackupAttributes_AutoBackupAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes
// OTN Path Protection Attributes table
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OTN Path Protection Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute.
    OtnPpAttribute []MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetFilter() yfilter.YFilter { return otnPpAttributes.YFilter }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) SetFilter(yf yfilter.YFilter) { otnPpAttributes.YFilter = yf }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetGoName(yname string) string {
    if yname == "otn-pp-attribute" { return "OtnPpAttribute" }
    return ""
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetSegmentPath() string {
    return "otn-pp-attributes"
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "otn-pp-attribute" {
        for _, c := range otnPpAttributes.OtnPpAttribute {
            if otnPpAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute{}
        otnPpAttributes.OtnPpAttribute = append(otnPpAttributes.OtnPpAttribute, child)
        return &otnPpAttributes.OtnPpAttribute[len(otnPpAttributes.OtnPpAttribute)-1]
    }
    return nil
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range otnPpAttributes.OtnPpAttribute {
        children[otnPpAttributes.OtnPpAttribute[i].GetSegmentPath()] = &otnPpAttributes.OtnPpAttribute[i]
    }
    return children
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetYangName() string { return "otn-pp-attributes" }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) SetParent(parent types.Entity) { otnPpAttributes.parent = parent }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetParent() types.Entity { return otnPpAttributes.parent }

func (otnPpAttributes *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute
// OTN Path Protection Attribute
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // The APS protecion mode. The type is MplsTeOtnApsProtectionMode.
    ApsProtectionMode interface{}

    // The APS restoration style. The type is MplsTeOtnApsRestorationStyle.
    ApsRestorationStyle interface{}

    // The APS protecion type. The type is MplsTeOtnApsProtection.
    ApsProtectionType interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Specify APS revert schedule.
    RevertScheduleNames MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames

    // Sub-network connection mode.
    SubNetworkConnectionMode MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode

    // Timers.
    Timers MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetFilter() yfilter.YFilter { return otnPpAttribute.YFilter }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) SetFilter(yf yfilter.YFilter) { otnPpAttribute.YFilter = yf }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "aps-protection-mode" { return "ApsProtectionMode" }
    if yname == "aps-restoration-style" { return "ApsRestorationStyle" }
    if yname == "aps-protection-type" { return "ApsProtectionType" }
    if yname == "enable" { return "Enable" }
    if yname == "revert-schedule-names" { return "RevertScheduleNames" }
    if yname == "sub-network-connection-mode" { return "SubNetworkConnectionMode" }
    if yname == "timers" { return "Timers" }
    if yname == "path-selection" { return "PathSelection" }
    return ""
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetSegmentPath() string {
    return "otn-pp-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", otnPpAttribute.AttributeSetName) + "']"
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "revert-schedule-names" {
        return &otnPpAttribute.RevertScheduleNames
    }
    if childYangName == "sub-network-connection-mode" {
        return &otnPpAttribute.SubNetworkConnectionMode
    }
    if childYangName == "timers" {
        return &otnPpAttribute.Timers
    }
    if childYangName == "path-selection" {
        return &otnPpAttribute.PathSelection
    }
    return nil
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["revert-schedule-names"] = &otnPpAttribute.RevertScheduleNames
    children["sub-network-connection-mode"] = &otnPpAttribute.SubNetworkConnectionMode
    children["timers"] = &otnPpAttribute.Timers
    children["path-selection"] = &otnPpAttribute.PathSelection
    return children
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = otnPpAttribute.AttributeSetName
    leafs["aps-protection-mode"] = otnPpAttribute.ApsProtectionMode
    leafs["aps-restoration-style"] = otnPpAttribute.ApsRestorationStyle
    leafs["aps-protection-type"] = otnPpAttribute.ApsProtectionType
    leafs["enable"] = otnPpAttribute.Enable
    return leafs
}

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetYangName() string { return "otn-pp-attribute" }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) SetParent(parent types.Entity) { otnPpAttribute.parent = parent }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetParent() types.Entity { return otnPpAttribute.parent }

func (otnPpAttribute *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute) GetParentYangName() string { return "otn-pp-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames
// Specify APS revert schedule
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name Identifier for revert schedule. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName.
    RevertScheduleName []MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetFilter() yfilter.YFilter { return revertScheduleNames.YFilter }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) SetFilter(yf yfilter.YFilter) { revertScheduleNames.YFilter = yf }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetGoName(yname string) string {
    if yname == "revert-schedule-name" { return "RevertScheduleName" }
    return ""
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetSegmentPath() string {
    return "revert-schedule-names"
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "revert-schedule-name" {
        for _, c := range revertScheduleNames.RevertScheduleName {
            if revertScheduleNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName{}
        revertScheduleNames.RevertScheduleName = append(revertScheduleNames.RevertScheduleName, child)
        return &revertScheduleNames.RevertScheduleName[len(revertScheduleNames.RevertScheduleName)-1]
    }
    return nil
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range revertScheduleNames.RevertScheduleName {
        children[revertScheduleNames.RevertScheduleName[i].GetSegmentPath()] = &revertScheduleNames.RevertScheduleName[i]
    }
    return children
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetBundleName() string { return "cisco_ios_xr" }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetYangName() string { return "revert-schedule-names" }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) SetParent(parent types.Entity) { revertScheduleNames.parent = parent }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetParent() types.Entity { return revertScheduleNames.parent }

func (revertScheduleNames *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames) GetParentYangName() string { return "otn-pp-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName
// Name Identifier for revert schedule
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Enter 64 characters for revert schedule name. The
    // type is string with length: 1..254.
    ScheduleName interface{}

    // Revert Schedule Max tries. The type is interface{} with range: 1..2016.
    RevertScheduleMaxTries interface{}

    // Schedule name enable object. The type is interface{}.
    SchNameEnable interface{}

    // Frequency set as Once, Daily, Weekly. The type is interface{} with range:
    // 1..3.
    RevertScheduleFrequency interface{}

    // Set duration in format hh:mm.
    ScheduleDuration MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration

    // Set date in format hh:mm MMM DD YYYY.
    ScheduleDate MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetFilter() yfilter.YFilter { return revertScheduleName.YFilter }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) SetFilter(yf yfilter.YFilter) { revertScheduleName.YFilter = yf }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetGoName(yname string) string {
    if yname == "schedule-name" { return "ScheduleName" }
    if yname == "revert-schedule-max-tries" { return "RevertScheduleMaxTries" }
    if yname == "sch-name-enable" { return "SchNameEnable" }
    if yname == "revert-schedule-frequency" { return "RevertScheduleFrequency" }
    if yname == "schedule-duration" { return "ScheduleDuration" }
    if yname == "schedule-date" { return "ScheduleDate" }
    return ""
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetSegmentPath() string {
    return "revert-schedule-name" + "[schedule-name='" + fmt.Sprintf("%v", revertScheduleName.ScheduleName) + "']"
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "schedule-duration" {
        return &revertScheduleName.ScheduleDuration
    }
    if childYangName == "schedule-date" {
        return &revertScheduleName.ScheduleDate
    }
    return nil
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["schedule-duration"] = &revertScheduleName.ScheduleDuration
    children["schedule-date"] = &revertScheduleName.ScheduleDate
    return children
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["schedule-name"] = revertScheduleName.ScheduleName
    leafs["revert-schedule-max-tries"] = revertScheduleName.RevertScheduleMaxTries
    leafs["sch-name-enable"] = revertScheduleName.SchNameEnable
    leafs["revert-schedule-frequency"] = revertScheduleName.RevertScheduleFrequency
    return leafs
}

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetBundleName() string { return "cisco_ios_xr" }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetYangName() string { return "revert-schedule-name" }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) SetParent(parent types.Entity) { revertScheduleName.parent = parent }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetParent() types.Entity { return revertScheduleName.parent }

func (revertScheduleName *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName) GetParentYangName() string { return "revert-schedule-names" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration
// Set duration in format hh:mm
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hour of day. The type is interface{} with range: 0..167. This attribute is
    // mandatory.
    Hour interface{}

    // Minute of the hour. The type is interface{} with range: 0..59. This
    // attribute is mandatory.
    Minutes interface{}
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetFilter() yfilter.YFilter { return scheduleDuration.YFilter }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) SetFilter(yf yfilter.YFilter) { scheduleDuration.YFilter = yf }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetGoName(yname string) string {
    if yname == "hour" { return "Hour" }
    if yname == "minutes" { return "Minutes" }
    return ""
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetSegmentPath() string {
    return "schedule-duration"
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hour"] = scheduleDuration.Hour
    leafs["minutes"] = scheduleDuration.Minutes
    return leafs
}

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetBundleName() string { return "cisco_ios_xr" }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetYangName() string { return "schedule-duration" }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) SetParent(parent types.Entity) { scheduleDuration.parent = parent }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetParent() types.Entity { return scheduleDuration.parent }

func (scheduleDuration *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDuration) GetParentYangName() string { return "revert-schedule-name" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate
// Set date in format hh:mm MMM DD YYYY
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hour of day. The type is interface{} with range: 0..23. This attribute is
    // mandatory.
    Hour interface{}

    // Minute of the hour. The type is interface{} with range: 0..59. This
    // attribute is mandatory.
    Minutes interface{}

    // Month of the year. The type is interface{} with range: 0..11. This
    // attribute is mandatory.
    Month interface{}

    // Day of the month. The type is interface{} with range: 1..31. This attribute
    // is mandatory.
    Day interface{}

    // Year. The type is interface{} with range: 2015..2035. This attribute is
    // mandatory.
    Year interface{}
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetFilter() yfilter.YFilter { return scheduleDate.YFilter }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) SetFilter(yf yfilter.YFilter) { scheduleDate.YFilter = yf }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetGoName(yname string) string {
    if yname == "hour" { return "Hour" }
    if yname == "minutes" { return "Minutes" }
    if yname == "month" { return "Month" }
    if yname == "day" { return "Day" }
    if yname == "year" { return "Year" }
    return ""
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetSegmentPath() string {
    return "schedule-date"
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hour"] = scheduleDate.Hour
    leafs["minutes"] = scheduleDate.Minutes
    leafs["month"] = scheduleDate.Month
    leafs["day"] = scheduleDate.Day
    leafs["year"] = scheduleDate.Year
    return leafs
}

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetBundleName() string { return "cisco_ios_xr" }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetYangName() string { return "schedule-date" }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) SetParent(parent types.Entity) { scheduleDate.parent = parent }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetParent() types.Entity { return scheduleDate.parent }

func (scheduleDate *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_RevertScheduleNames_RevertScheduleName_ScheduleDate) GetParentYangName() string { return "revert-schedule-name" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode
// Sub-network connection mode
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The sub-network connection mode. The type is MplsTeOtnSncMode.
    ConnectionMode interface{}

    // Tandem Connection Monitoring ID for the interface. The type is interface{}
    // with range: 1..6.
    ConnectionMonitoringMode interface{}
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetFilter() yfilter.YFilter { return subNetworkConnectionMode.YFilter }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) SetFilter(yf yfilter.YFilter) { subNetworkConnectionMode.YFilter = yf }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetGoName(yname string) string {
    if yname == "connection-mode" { return "ConnectionMode" }
    if yname == "connection-monitoring-mode" { return "ConnectionMonitoringMode" }
    return ""
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetSegmentPath() string {
    return "sub-network-connection-mode"
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["connection-mode"] = subNetworkConnectionMode.ConnectionMode
    leafs["connection-monitoring-mode"] = subNetworkConnectionMode.ConnectionMonitoringMode
    return leafs
}

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetBundleName() string { return "cisco_ios_xr" }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetYangName() string { return "sub-network-connection-mode" }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) SetParent(parent types.Entity) { subNetworkConnectionMode.parent = parent }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetParent() types.Entity { return subNetworkConnectionMode.parent }

func (subNetworkConnectionMode *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_SubNetworkConnectionMode) GetParentYangName() string { return "otn-pp-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers
// Timers
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G.709 OTN path protection wait to restore timer in seconds. The type is
    // interface{} with range: 0..720. Units are second.
    ApsWaitToRestore interface{}

    // G.709 OTN path protection hold-off timer in milliseconds. The type is
    // interface{} with range: 100..10000. Units are millisecond.
    ApsHoldOff interface{}
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetGoName(yname string) string {
    if yname == "aps-wait-to-restore" { return "ApsWaitToRestore" }
    if yname == "aps-hold-off" { return "ApsHoldOff" }
    return ""
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["aps-wait-to-restore"] = timers.ApsWaitToRestore
    leafs["aps-hold-off"] = timers.ApsHoldOff
    return leafs
}

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetYangName() string { return "timers" }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetParent() types.Entity { return timers.parent }

func (timers *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_Timers) GetParentYangName() string { return "otn-pp-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path selection. The type is interface{}.
    Enable interface{}
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_OtnPpAttributes_OtnPpAttribute_PathSelection) GetParentYangName() string { return "otn-pp-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes
// Auto-mesh Tunnel AttributeSets Table
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto-mesh Tunnel Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute.
    AutoMeshAttribute []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetFilter() yfilter.YFilter { return autoMeshAttributes.YFilter }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) SetFilter(yf yfilter.YFilter) { autoMeshAttributes.YFilter = yf }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetGoName(yname string) string {
    if yname == "auto-mesh-attribute" { return "AutoMeshAttribute" }
    return ""
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetSegmentPath() string {
    return "auto-mesh-attributes"
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auto-mesh-attribute" {
        for _, c := range autoMeshAttributes.AutoMeshAttribute {
            if autoMeshAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute{}
        autoMeshAttributes.AutoMeshAttribute = append(autoMeshAttributes.AutoMeshAttribute, child)
        return &autoMeshAttributes.AutoMeshAttribute[len(autoMeshAttributes.AutoMeshAttribute)-1]
    }
    return nil
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range autoMeshAttributes.AutoMeshAttribute {
        children[autoMeshAttributes.AutoMeshAttribute[i].GetSegmentPath()] = &autoMeshAttributes.AutoMeshAttribute[i]
    }
    return children
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetYangName() string { return "auto-mesh-attributes" }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) SetParent(parent types.Entity) { autoMeshAttributes.parent = parent }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetParent() types.Entity { return autoMeshAttributes.parent }

func (autoMeshAttributes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute
// Auto-mesh Tunnel Attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // Enable autoroute announce. The type is interface{}.
    AutorouteAnnounce interface{}

    // The bandwidth of the interface in kbps. The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    InterfaceBandwidth interface{}

    // Forward class value. The type is interface{} with range: 1..7.
    ForwardClass interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // Enable bandwidth collection only, no auto-bw adjustment. The type is
    // interface{}.
    CollectionOnly interface{}

    // Enable the soft-preemption feature on the tunnel. The type is interface{}.
    SoftPreemption interface{}

    // Tunnel loadsharing metric. The type is interface{} with range:
    // 1..4294967295.
    LoadShare interface{}

    // Log tunnel LSP messages.
    AutoMeshLogging MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging

    // Tunnel Setup and Hold Priorities.
    Priority MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority

    // Set the affinity flags and mask.
    AffinityMask MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask

    // Tunnel bandwidth requirement.
    Bandwidth MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection

    // Policy classes for PBTS.
    PolicyClasses MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses

    // Tunnel new style affinity attributes table.
    NewStyleAffinityAffinityTypes MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes

    // Specify MPLS tunnel can be fast-rerouted.
    FastReroute MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetFilter() yfilter.YFilter { return autoMeshAttribute.YFilter }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) SetFilter(yf yfilter.YFilter) { autoMeshAttribute.YFilter = yf }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "autoroute-announce" { return "AutorouteAnnounce" }
    if yname == "interface-bandwidth" { return "InterfaceBandwidth" }
    if yname == "forward-class" { return "ForwardClass" }
    if yname == "enable" { return "Enable" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "collection-only" { return "CollectionOnly" }
    if yname == "soft-preemption" { return "SoftPreemption" }
    if yname == "load-share" { return "LoadShare" }
    if yname == "auto-mesh-logging" { return "AutoMeshLogging" }
    if yname == "priority" { return "Priority" }
    if yname == "affinity-mask" { return "AffinityMask" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "path-selection" { return "PathSelection" }
    if yname == "policy-classes" { return "PolicyClasses" }
    if yname == "new-style-affinity-affinity-types" { return "NewStyleAffinityAffinityTypes" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetSegmentPath() string {
    return "auto-mesh-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", autoMeshAttribute.AttributeSetName) + "']"
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auto-mesh-logging" {
        return &autoMeshAttribute.AutoMeshLogging
    }
    if childYangName == "priority" {
        return &autoMeshAttribute.Priority
    }
    if childYangName == "affinity-mask" {
        return &autoMeshAttribute.AffinityMask
    }
    if childYangName == "bandwidth" {
        return &autoMeshAttribute.Bandwidth
    }
    if childYangName == "path-selection" {
        return &autoMeshAttribute.PathSelection
    }
    if childYangName == "policy-classes" {
        return &autoMeshAttribute.PolicyClasses
    }
    if childYangName == "new-style-affinity-affinity-types" {
        return &autoMeshAttribute.NewStyleAffinityAffinityTypes
    }
    if childYangName == "fast-reroute" {
        return &autoMeshAttribute.FastReroute
    }
    return nil
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["auto-mesh-logging"] = &autoMeshAttribute.AutoMeshLogging
    children["priority"] = &autoMeshAttribute.Priority
    children["affinity-mask"] = &autoMeshAttribute.AffinityMask
    children["bandwidth"] = &autoMeshAttribute.Bandwidth
    children["path-selection"] = &autoMeshAttribute.PathSelection
    children["policy-classes"] = &autoMeshAttribute.PolicyClasses
    children["new-style-affinity-affinity-types"] = &autoMeshAttribute.NewStyleAffinityAffinityTypes
    children["fast-reroute"] = &autoMeshAttribute.FastReroute
    return children
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = autoMeshAttribute.AttributeSetName
    leafs["autoroute-announce"] = autoMeshAttribute.AutorouteAnnounce
    leafs["interface-bandwidth"] = autoMeshAttribute.InterfaceBandwidth
    leafs["forward-class"] = autoMeshAttribute.ForwardClass
    leafs["enable"] = autoMeshAttribute.Enable
    leafs["record-route"] = autoMeshAttribute.RecordRoute
    leafs["collection-only"] = autoMeshAttribute.CollectionOnly
    leafs["soft-preemption"] = autoMeshAttribute.SoftPreemption
    leafs["load-share"] = autoMeshAttribute.LoadShare
    return leafs
}

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetYangName() string { return "auto-mesh-attribute" }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) SetParent(parent types.Entity) { autoMeshAttribute.parent = parent }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetParent() types.Entity { return autoMeshAttribute.parent }

func (autoMeshAttribute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute) GetParentYangName() string { return "auto-mesh-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging
// Log tunnel LSP messages
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log tunnel messages for bandwidth change. The type is interface{}.
    BandwidthChangeMessage interface{}

    // Log tunnel reoptimization attempts messages. The type is interface{}.
    ReoptimizeAttemptsMessage interface{}

    // Log tunnel rereoute messages. The type is interface{}.
    RerouteMesssage interface{}

    // Log tunnel state messages. The type is interface{}.
    StateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}

    // Log tunnel reoptimized messages. The type is interface{}.
    ReoptimizedMessage interface{}

    // Enable logging for path-calculation failures. The type is interface{}.
    PcalcFailureMessage interface{}
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetFilter() yfilter.YFilter { return autoMeshLogging.YFilter }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) SetFilter(yf yfilter.YFilter) { autoMeshLogging.YFilter = yf }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetGoName(yname string) string {
    if yname == "bandwidth-change-message" { return "BandwidthChangeMessage" }
    if yname == "reoptimize-attempts-message" { return "ReoptimizeAttemptsMessage" }
    if yname == "reroute-messsage" { return "RerouteMesssage" }
    if yname == "state-message" { return "StateMessage" }
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    if yname == "reoptimized-message" { return "ReoptimizedMessage" }
    if yname == "pcalc-failure-message" { return "PcalcFailureMessage" }
    return ""
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetSegmentPath() string {
    return "auto-mesh-logging"
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-change-message"] = autoMeshLogging.BandwidthChangeMessage
    leafs["reoptimize-attempts-message"] = autoMeshLogging.ReoptimizeAttemptsMessage
    leafs["reroute-messsage"] = autoMeshLogging.RerouteMesssage
    leafs["state-message"] = autoMeshLogging.StateMessage
    leafs["insufficient-bw-message"] = autoMeshLogging.InsufficientBwMessage
    leafs["reoptimized-message"] = autoMeshLogging.ReoptimizedMessage
    leafs["pcalc-failure-message"] = autoMeshLogging.PcalcFailureMessage
    return leafs
}

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetBundleName() string { return "cisco_ios_xr" }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetYangName() string { return "auto-mesh-logging" }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) SetParent(parent types.Entity) { autoMeshLogging.parent = parent }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetParent() types.Entity { return autoMeshLogging.parent }

func (autoMeshLogging *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AutoMeshLogging) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority
// Tunnel Setup and Hold Priorities
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    SetupPriority interface{}

    // Hold Priority. The type is interface{} with range: 0..7. This attribute is
    // mandatory.
    HoldPriority interface{}
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "hold-priority" { return "HoldPriority" }
    return ""
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = priority.SetupPriority
    leafs["hold-priority"] = priority.HoldPriority
    return leafs
}

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetYangName() string { return "priority" }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetParent() types.Entity { return priority.parent }

func (priority *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Priority) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask
// Set the affinity flags and mask
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}. This
    // attribute is mandatory.
    Mask interface{}
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetFilter() yfilter.YFilter { return affinityMask.YFilter }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) SetFilter(yf yfilter.YFilter) { affinityMask.YFilter = yf }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetGoName(yname string) string {
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetSegmentPath() string {
    return "affinity-mask"
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity"] = affinityMask.Affinity
    leafs["mask"] = affinityMask.Mask
    return leafs
}

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetYangName() string { return "affinity-mask" }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) SetParent(parent types.Entity) { affinityMask.parent = parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetParent() types.Entity { return affinityMask.parent }

func (affinityMask *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_AffinityMask) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth
// Tunnel bandwidth requirement
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTE-standard flag. The type is MplsTeBandwidthDste. This attribute is
    // mandatory.
    DsteType interface{}

    // Class type for the bandwidth allocation. The type is interface{} with
    // range: 0..1. This attribute is mandatory.
    ClassOrPoolType interface{}

    // The value of the bandwidth reserved by this tunnel in kbps. The type is
    // interface{} with range: 0..4294967295. This attribute is mandatory. Units
    // are kbit/s.
    Bandwidth interface{}
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetFilter() yfilter.YFilter { return bandwidth.YFilter }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) SetFilter(yf yfilter.YFilter) { bandwidth.YFilter = yf }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetGoName(yname string) string {
    if yname == "dste-type" { return "DsteType" }
    if yname == "class-or-pool-type" { return "ClassOrPoolType" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetSegmentPath() string {
    return "bandwidth"
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-type"] = bandwidth.DsteType
    leafs["class-or-pool-type"] = bandwidth.ClassOrPoolType
    leafs["bandwidth"] = bandwidth.Bandwidth
    return leafs
}

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetYangName() string { return "bandwidth" }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) SetParent(parent types.Entity) { bandwidth.parent = parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetParent() types.Entity { return bandwidth.parent }

func (bandwidth *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_Bandwidth) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path selection. The type is interface{}.
    Enable interface{}
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PathSelection) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses
// Policy classes for PBTS
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of Policy class. The type is slice of interface{} with range: 1..8.
    PolicyClass []interface{}
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetFilter() yfilter.YFilter { return policyClasses.YFilter }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) SetFilter(yf yfilter.YFilter) { policyClasses.YFilter = yf }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetGoName(yname string) string {
    if yname == "policy-class" { return "PolicyClass" }
    return ""
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetSegmentPath() string {
    return "policy-classes"
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policy-class"] = policyClasses.PolicyClass
    return leafs
}

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetBundleName() string { return "cisco_ios_xr" }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetYangName() string { return "policy-classes" }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) SetParent(parent types.Entity) { policyClasses.parent = parent }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetParent() types.Entity { return policyClasses.parent }

func (policyClasses *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_PolicyClasses) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes
// Tunnel new style affinity attributes table
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType.
    NewStyleAffinityAffinityType []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1.
    NewStyleAffinityAffinityTypeAffinity1 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2.
    NewStyleAffinityAffinityTypeAffinity1Affinity2 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9

    // Tunnel new style affinity attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.
    NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 []MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypes.YFilter }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypes.YFilter = yf }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetGoName(yname string) string {
    if yname == "new-style-affinity-affinity-type" { return "NewStyleAffinityAffinityType" }
    if yname == "new-style-affinity-affinity-type-affinity1" { return "NewStyleAffinityAffinityTypeAffinity1" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9" }
    if yname == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" { return "NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetSegmentPath() string {
    return "new-style-affinity-affinity-types"
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "new-style-affinity-affinity-type" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9)-1]
    }
    if childYangName == "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" {
        for _, c := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
            if newStyleAffinityAffinityTypes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10{}
        newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 = append(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10, child)
        return &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[len(newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10)-1]
    }
    return nil
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityType[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9[i]
    }
    for i := range newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 {
        children[newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i].GetSegmentPath()] = &newStyleAffinityAffinityTypes.NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10[i]
    }
    return children
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetYangName() string { return "new-style-affinity-affinity-types" }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) SetParent(parent types.Entity) { newStyleAffinityAffinityTypes.parent = parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetParent() types.Entity { return newStyleAffinityAffinityTypes.parent }

func (newStyleAffinityAffinityTypes *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityType.YFilter }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityType.YFilter = yf }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    return ""
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetSegmentPath() string {
    return "new-style-affinity-affinity-type" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityType.AffinityType) + "']"
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityType.AffinityType
    return leafs
}

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetYangName() string { return "new-style-affinity-affinity-type" }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) SetParent(parent types.Entity) { newStyleAffinityAffinityType.parent = parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParent() types.Entity { return newStyleAffinityAffinityType.parent }

func (newStyleAffinityAffinityType *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityType) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1.YFilter }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1.Affinity1) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1.Affinity1
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetYangName() string { return "new-style-affinity-affinity-type-affinity1" }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1.parent }

func (newStyleAffinityAffinityTypeAffinity1 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2.Affinity2
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.Affinity3
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.Affinity4
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.Affinity5
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.Affinity6
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.Affinity7
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.Affinity8
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.Affinity9
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10
// Tunnel new style affinity attribute
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of the affinity entry. The type is
    // MplsTeTunnelAffinity.
    AffinityType interface{}

    // This attribute is a key. The name of the first affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity1 interface{}

    // This attribute is a key. The name of the second affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity2 interface{}

    // This attribute is a key. The name of the third affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity3 interface{}

    // This attribute is a key. The name of the fourth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity4 interface{}

    // This attribute is a key. The name of the fifth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity5 interface{}

    // This attribute is a key. The name of the sixth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity6 interface{}

    // This attribute is a key. The name of the seventh affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity7 interface{}

    // This attribute is a key. The name of the eighth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity8 interface{}

    // This attribute is a key. The name of the nineth affinity. The type is
    // string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity9 interface{}

    // This attribute is a key. The name of the tenth affinity. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Affinity10 interface{}
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetFilter() yfilter.YFilter { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetFilter(yf yfilter.YFilter) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.YFilter = yf }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetGoName(yname string) string {
    if yname == "affinity-type" { return "AffinityType" }
    if yname == "affinity1" { return "Affinity1" }
    if yname == "affinity2" { return "Affinity2" }
    if yname == "affinity3" { return "Affinity3" }
    if yname == "affinity4" { return "Affinity4" }
    if yname == "affinity5" { return "Affinity5" }
    if yname == "affinity6" { return "Affinity6" }
    if yname == "affinity7" { return "Affinity7" }
    if yname == "affinity8" { return "Affinity8" }
    if yname == "affinity9" { return "Affinity9" }
    if yname == "affinity10" { return "Affinity10" }
    return ""
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetSegmentPath() string {
    return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" + "[affinity-type='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType) + "']" + "[affinity1='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1) + "']" + "[affinity2='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2) + "']" + "[affinity3='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3) + "']" + "[affinity4='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4) + "']" + "[affinity5='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5) + "']" + "[affinity6='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6) + "']" + "[affinity7='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7) + "']" + "[affinity8='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8) + "']" + "[affinity9='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9) + "']" + "[affinity10='" + fmt.Sprintf("%v", newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10) + "']"
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-type"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.AffinityType
    leafs["affinity1"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity1
    leafs["affinity2"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity2
    leafs["affinity3"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity3
    leafs["affinity4"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity4
    leafs["affinity5"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity5
    leafs["affinity6"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity6
    leafs["affinity7"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity7
    leafs["affinity8"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity8
    leafs["affinity9"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity9
    leafs["affinity10"] = newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.Affinity10
    return leafs
}

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleName() string { return "cisco_ios_xr" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetYangName() string { return "new-style-affinity-affinity-type-affinity1-affinity2-affinity3-affinity4-affinity5-affinity6-affinity7-affinity8-affinity9-affinity10" }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) SetParent(parent types.Entity) { newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent = parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParent() types.Entity { return newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10.parent }

func (newStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10 *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_NewStyleAffinityAffinityTypes_NewStyleAffinityAffinityTypeAffinity1Affinity2Affinity3Affinity4Affinity5Affinity6Affinity7Affinity8Affinity9Affinity10) GetParentYangName() string { return "new-style-affinity-affinity-types" }

// MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute
// Specify MPLS tunnel can be fast-rerouted
// This type is a presence type.
type MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth Protection. The type is interface{} with range: 0..1. This
    // attribute is mandatory.
    BandwidthProtection interface{}

    // Node Protection. The type is interface{} with range: 0..1. This attribute
    // is mandatory.
    NodeProtection interface{}
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetGoName(yname string) string {
    if yname == "bandwidth-protection" { return "BandwidthProtection" }
    if yname == "node-protection" { return "NodeProtection" }
    return ""
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-protection"] = fastReroute.BandwidthProtection
    leafs["node-protection"] = fastReroute.NodeProtection
    return leafs
}

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *MplsTe_GlobalAttributes_AttributeSet_AutoMeshAttributes_AutoMeshAttribute_FastReroute) GetParentYangName() string { return "auto-mesh-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes
// XRO Tunnel Attributes table
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // XRO Attribute. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute.
    XroAttribute []MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetFilter() yfilter.YFilter { return xroAttributes.YFilter }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) SetFilter(yf yfilter.YFilter) { xroAttributes.YFilter = yf }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetGoName(yname string) string {
    if yname == "xro-attribute" { return "XroAttribute" }
    return ""
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetSegmentPath() string {
    return "xro-attributes"
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "xro-attribute" {
        for _, c := range xroAttributes.XroAttribute {
            if xroAttributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute{}
        xroAttributes.XroAttribute = append(xroAttributes.XroAttribute, child)
        return &xroAttributes.XroAttribute[len(xroAttributes.XroAttribute)-1]
    }
    return nil
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range xroAttributes.XroAttribute {
        children[xroAttributes.XroAttribute[i].GetSegmentPath()] = &xroAttributes.XroAttribute[i]
    }
    return children
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetYangName() string { return "xro-attributes" }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) SetParent(parent types.Entity) { xroAttributes.parent = parent }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetParent() types.Entity { return xroAttributes.parent }

func (xroAttributes *MplsTe_GlobalAttributes_AttributeSet_XroAttributes) GetParentYangName() string { return "attribute-set" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute
// XRO Attribute
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Attribute Set Name. The type is string with
    // length: 1..64.
    AttributeSetName interface{}

    // Attribute-set enable object that controls whether this attribute-set is
    // configured or not .This object must be set before other configuration
    // supplied for this attribute-set. The type is interface{}.
    Enable interface{}

    // Path diversity.
    PathDiversity MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity

    // Configure path selection properties.
    PathSelection MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetFilter() yfilter.YFilter { return xroAttribute.YFilter }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) SetFilter(yf yfilter.YFilter) { xroAttribute.YFilter = yf }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetGoName(yname string) string {
    if yname == "attribute-set-name" { return "AttributeSetName" }
    if yname == "enable" { return "Enable" }
    if yname == "path-diversity" { return "PathDiversity" }
    if yname == "path-selection" { return "PathSelection" }
    return ""
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetSegmentPath() string {
    return "xro-attribute" + "[attribute-set-name='" + fmt.Sprintf("%v", xroAttribute.AttributeSetName) + "']"
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-diversity" {
        return &xroAttribute.PathDiversity
    }
    if childYangName == "path-selection" {
        return &xroAttribute.PathSelection
    }
    return nil
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-diversity"] = &xroAttribute.PathDiversity
    children["path-selection"] = &xroAttribute.PathSelection
    return children
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-set-name"] = xroAttribute.AttributeSetName
    leafs["enable"] = xroAttribute.Enable
    return leafs
}

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetYangName() string { return "xro-attribute" }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) SetParent(parent types.Entity) { xroAttribute.parent = parent }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetParent() types.Entity { return xroAttribute.parent }

func (xroAttribute *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute) GetParentYangName() string { return "xro-attributes" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity
// Path diversity
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRLG-based path diversity.
    Srlgs MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs

    // LSP-based path diversity.
    Lsp MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetFilter() yfilter.YFilter { return pathDiversity.YFilter }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) SetFilter(yf yfilter.YFilter) { pathDiversity.YFilter = yf }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetGoName(yname string) string {
    if yname == "srlgs" { return "Srlgs" }
    if yname == "lsp" { return "Lsp" }
    return ""
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetSegmentPath() string {
    return "path-diversity"
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srlgs" {
        return &pathDiversity.Srlgs
    }
    if childYangName == "lsp" {
        return &pathDiversity.Lsp
    }
    return nil
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["srlgs"] = &pathDiversity.Srlgs
    children["lsp"] = &pathDiversity.Lsp
    return children
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetBundleName() string { return "cisco_ios_xr" }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetYangName() string { return "path-diversity" }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) SetParent(parent types.Entity) { pathDiversity.parent = parent }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetParent() types.Entity { return pathDiversity.parent }

func (pathDiversity *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity) GetParentYangName() string { return "xro-attribute" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs
// SRLG-based path diversity
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRLG-based path-diversity element. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg.
    Srlg []MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetFilter() yfilter.YFilter { return srlgs.YFilter }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) SetFilter(yf yfilter.YFilter) { srlgs.YFilter = yf }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetGoName(yname string) string {
    if yname == "srlg" { return "Srlg" }
    return ""
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetSegmentPath() string {
    return "srlgs"
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srlg" {
        for _, c := range srlgs.Srlg {
            if srlgs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg{}
        srlgs.Srlg = append(srlgs.Srlg, child)
        return &srlgs.Srlg[len(srlgs.Srlg)-1]
    }
    return nil
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range srlgs.Srlg {
        children[srlgs.Srlg[i].GetSegmentPath()] = &srlgs.Srlg[i]
    }
    return children
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetBundleName() string { return "cisco_ios_xr" }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetYangName() string { return "srlgs" }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) SetParent(parent types.Entity) { srlgs.parent = parent }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetParent() types.Entity { return srlgs.parent }

func (srlgs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs) GetParentYangName() string { return "path-diversity" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg
// SRLG-based path-diversity element
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. SRLG. The type is interface{} with range:
    // 0..4294967295.
    Srlg interface{}

    // The diversity conformance requirements. The type is
    // MplsTePathDiversityConformance. This attribute is mandatory.
    Conformance interface{}
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetFilter() yfilter.YFilter { return srlg.YFilter }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) SetFilter(yf yfilter.YFilter) { srlg.YFilter = yf }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetGoName(yname string) string {
    if yname == "srlg" { return "Srlg" }
    if yname == "conformance" { return "Conformance" }
    return ""
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetSegmentPath() string {
    return "srlg" + "[srlg='" + fmt.Sprintf("%v", srlg.Srlg) + "']"
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srlg"] = srlg.Srlg
    leafs["conformance"] = srlg.Conformance
    return leafs
}

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetBundleName() string { return "cisco_ios_xr" }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetYangName() string { return "srlg" }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) SetParent(parent types.Entity) { srlg.parent = parent }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetParent() types.Entity { return srlg.parent }

func (srlg *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Srlgs_Srlg) GetParentYangName() string { return "srlgs" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp
// LSP-based path diversity
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FEC LSP-based path diversity.
    Fecs MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetFilter() yfilter.YFilter { return lsp.YFilter }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) SetFilter(yf yfilter.YFilter) { lsp.YFilter = yf }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetGoName(yname string) string {
    if yname == "fecs" { return "Fecs" }
    return ""
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetSegmentPath() string {
    return "lsp"
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fecs" {
        return &lsp.Fecs
    }
    return nil
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fecs"] = &lsp.Fecs
    return children
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetBundleName() string { return "cisco_ios_xr" }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetYangName() string { return "lsp" }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) SetParent(parent types.Entity) { lsp.parent = parent }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetParent() types.Entity { return lsp.parent }

func (lsp *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp) GetParentYangName() string { return "path-diversity" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs
// FEC LSP-based path diversity
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP-based path-diversity, referenced by FEC. The type is slice of
    // MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec.
    Fec []MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetFilter() yfilter.YFilter { return fecs.YFilter }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) SetFilter(yf yfilter.YFilter) { fecs.YFilter = yf }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetGoName(yname string) string {
    if yname == "fec" { return "Fec" }
    return ""
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetSegmentPath() string {
    return "fecs"
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fec" {
        for _, c := range fecs.Fec {
            if fecs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec{}
        fecs.Fec = append(fecs.Fec, child)
        return &fecs.Fec[len(fecs.Fec)-1]
    }
    return nil
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fecs.Fec {
        children[fecs.Fec[i].GetSegmentPath()] = &fecs.Fec[i]
    }
    return children
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetBundleName() string { return "cisco_ios_xr" }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetYangName() string { return "fecs" }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) SetParent(parent types.Entity) { fecs.parent = parent }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetParent() types.Entity { return fecs.parent }

func (fecs *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs) GetParentYangName() string { return "lsp" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec
// LSP-based path-diversity, referenced by
// FEC
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // This attribute is a key. Destination address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Destination interface{}

    // This attribute is a key. Tunnel id. The type is interface{} with range:
    // 0..65535.
    TunnelId interface{}

    // This attribute is a key. Extended tunnel-id. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // This attribute is a key. LSP id. The type is interface{} with range:
    // 0..65535.
    LspId interface{}

    // The diversity conformance requirements. The type is
    // MplsTePathDiversityConformance. This attribute is mandatory.
    Conformance interface{}
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetFilter() yfilter.YFilter { return fec.YFilter }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) SetFilter(yf yfilter.YFilter) { fec.YFilter = yf }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetGoName(yname string) string {
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "conformance" { return "Conformance" }
    return ""
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetSegmentPath() string {
    return "fec" + "[source='" + fmt.Sprintf("%v", fec.Source) + "']" + "[destination='" + fmt.Sprintf("%v", fec.Destination) + "']" + "[tunnel-id='" + fmt.Sprintf("%v", fec.TunnelId) + "']" + "[extended-tunnel-id='" + fmt.Sprintf("%v", fec.ExtendedTunnelId) + "']" + "[lsp-id='" + fmt.Sprintf("%v", fec.LspId) + "']"
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source"] = fec.Source
    leafs["destination"] = fec.Destination
    leafs["tunnel-id"] = fec.TunnelId
    leafs["extended-tunnel-id"] = fec.ExtendedTunnelId
    leafs["lsp-id"] = fec.LspId
    leafs["conformance"] = fec.Conformance
    return leafs
}

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetBundleName() string { return "cisco_ios_xr" }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetYangName() string { return "fec" }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) SetParent(parent types.Entity) { fec.parent = parent }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetParent() types.Entity { return fec.parent }

func (fec *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathDiversity_Lsp_Fecs_Fec) GetParentYangName() string { return "fecs" }

// MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection
// Configure path selection properties
type MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable path selection. The type is interface{}.
    Enable interface{}
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = pathSelection.Enable
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_AttributeSet_XroAttributes_XroAttribute_PathSelection) GetParentYangName() string { return "xro-attribute" }

// MplsTe_GlobalAttributes_BfdOverLsp
// BFD over MPLS TE Global Configurations
type MplsTe_GlobalAttributes_BfdOverLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD over LSP Tail Global Configurations.
    Tail MplsTe_GlobalAttributes_BfdOverLsp_Tail

    // BFD over LSP Head Global Configurations.
    Head MplsTe_GlobalAttributes_BfdOverLsp_Head
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetFilter() yfilter.YFilter { return bfdOverLsp.YFilter }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) SetFilter(yf yfilter.YFilter) { bfdOverLsp.YFilter = yf }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetGoName(yname string) string {
    if yname == "tail" { return "Tail" }
    if yname == "head" { return "Head" }
    return ""
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetSegmentPath() string {
    return "bfd-over-lsp"
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tail" {
        return &bfdOverLsp.Tail
    }
    if childYangName == "head" {
        return &bfdOverLsp.Head
    }
    return nil
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tail"] = &bfdOverLsp.Tail
    children["head"] = &bfdOverLsp.Head
    return children
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetBundleName() string { return "cisco_ios_xr" }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetYangName() string { return "bfd-over-lsp" }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) SetParent(parent types.Entity) { bfdOverLsp.parent = parent }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetParent() types.Entity { return bfdOverLsp.parent }

func (bfdOverLsp *MplsTe_GlobalAttributes_BfdOverLsp) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_BfdOverLsp_Tail
// BFD over LSP Tail Global Configurations
type MplsTe_GlobalAttributes_BfdOverLsp_Tail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify BFD over LSP tail multiplier. The type is interface{} with range:
    // 3..10.
    Multiplier interface{}

    // Specify BFD over LSP tail minimum interval. The type is interface{} with
    // range: 50..30000.
    MinimumInterval interface{}
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetFilter() yfilter.YFilter { return tail.YFilter }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) SetFilter(yf yfilter.YFilter) { tail.YFilter = yf }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetGoName(yname string) string {
    if yname == "multiplier" { return "Multiplier" }
    if yname == "minimum-interval" { return "MinimumInterval" }
    return ""
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetSegmentPath() string {
    return "tail"
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["multiplier"] = tail.Multiplier
    leafs["minimum-interval"] = tail.MinimumInterval
    return leafs
}

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetBundleName() string { return "cisco_ios_xr" }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetYangName() string { return "tail" }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) SetParent(parent types.Entity) { tail.parent = parent }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetParent() types.Entity { return tail.parent }

func (tail *MplsTe_GlobalAttributes_BfdOverLsp_Tail) GetParentYangName() string { return "bfd-over-lsp" }

// MplsTe_GlobalAttributes_BfdOverLsp_Head
// BFD over LSP Head Global Configurations
type MplsTe_GlobalAttributes_BfdOverLsp_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD session down reopt timeout. The type is interface{} with range:
    // 120..4294967295.
    ReoptTimeout interface{}

    // Specify BFD session down action. The type is MplsTeBfdSessionDownAction.
    DownAction interface{}
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetGoName(yname string) string {
    if yname == "reopt-timeout" { return "ReoptTimeout" }
    if yname == "down-action" { return "DownAction" }
    return ""
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reopt-timeout"] = head.ReoptTimeout
    leafs["down-action"] = head.DownAction
    return leafs
}

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetYangName() string { return "head" }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetParent() types.Entity { return head.parent }

func (head *MplsTe_GlobalAttributes_BfdOverLsp_Head) GetParentYangName() string { return "bfd-over-lsp" }

// MplsTe_GlobalAttributes_BandwidthAccounting
// Bandwidth accounting configuration data
type MplsTe_GlobalAttributes_BandwidthAccounting struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object sets the sampling interval in seconds for bandwidth accounting.
    // Default to 60 seconds. The type is interface{} with range: 30..600. Units
    // are second. The default value is 60.
    SamplingInterval interface{}

    // This object sets the percentage adjustment factor for the non RSVP-TE
    // bandwidth accounting.  Default is 100%. The type is interface{} with range:
    // 0..200. Units are percentage. The default value is 100.
    AdjustmentFactor interface{}

    // This object enables the bandwidth accounting RSVP-TE sample collection. The
    // type is bool. The default value is false.
    CollectionTypeRsvpTe interface{}

    // This object controls whether BW accounting is enabled. This object must be
    // set before setting any other objects  under the BandwidthAccounting class.
    // The type is interface{}.
    Enable interface{}

    // Bandwidth accounting application configuration data.
    Application MplsTe_GlobalAttributes_BandwidthAccounting_Application

    // This object sets the flooding threshold as percentage of total link
    // bandwidth for bandwidth accounting. Default to 10%, 10%.
    AccountFloodingThreshold MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetFilter() yfilter.YFilter { return bandwidthAccounting.YFilter }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) SetFilter(yf yfilter.YFilter) { bandwidthAccounting.YFilter = yf }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetGoName(yname string) string {
    if yname == "sampling-interval" { return "SamplingInterval" }
    if yname == "adjustment-factor" { return "AdjustmentFactor" }
    if yname == "collection-type-rsvp-te" { return "CollectionTypeRsvpTe" }
    if yname == "enable" { return "Enable" }
    if yname == "application" { return "Application" }
    if yname == "account-flooding-threshold" { return "AccountFloodingThreshold" }
    return ""
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetSegmentPath() string {
    return "bandwidth-accounting"
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application" {
        return &bandwidthAccounting.Application
    }
    if childYangName == "account-flooding-threshold" {
        return &bandwidthAccounting.AccountFloodingThreshold
    }
    return nil
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application"] = &bandwidthAccounting.Application
    children["account-flooding-threshold"] = &bandwidthAccounting.AccountFloodingThreshold
    return children
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sampling-interval"] = bandwidthAccounting.SamplingInterval
    leafs["adjustment-factor"] = bandwidthAccounting.AdjustmentFactor
    leafs["collection-type-rsvp-te"] = bandwidthAccounting.CollectionTypeRsvpTe
    leafs["enable"] = bandwidthAccounting.Enable
    return leafs
}

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetYangName() string { return "bandwidth-accounting" }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) SetParent(parent types.Entity) { bandwidthAccounting.parent = parent }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetParent() types.Entity { return bandwidthAccounting.parent }

func (bandwidthAccounting *MplsTe_GlobalAttributes_BandwidthAccounting) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_BandwidthAccounting_Application
// Bandwidth accounting application configuration
// data
type MplsTe_GlobalAttributes_BandwidthAccounting_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object enables the application. The type is bool. The default value is
    // false.
    ApplicationEnforced interface{}

    // This object sets the application interval in seconds for bandwidth
    // accounting. Default to 180 seconds. The type is interface{} with range:
    // 90..1800. Units are second. The default value is 180.
    ApplicationInterval interface{}
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetGoName(yname string) string {
    if yname == "application-enforced" { return "ApplicationEnforced" }
    if yname == "application-interval" { return "ApplicationInterval" }
    return ""
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetSegmentPath() string {
    return "application"
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-enforced"] = application.ApplicationEnforced
    leafs["application-interval"] = application.ApplicationInterval
    return leafs
}

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetYangName() string { return "application" }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetParent() types.Entity { return application.parent }

func (application *MplsTe_GlobalAttributes_BandwidthAccounting_Application) GetParentYangName() string { return "bandwidth-accounting" }

// MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold
// This object sets the flooding threshold as
// percentage of total link bandwidth for
// bandwidth accounting. Default to 10%, 10%
type MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Upward flooding Threshold in percentages of total bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage. The default value is
    // 10.
    UpThreshold interface{}

    // Downward flooding Threshold in percentages of total bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage. The default value is
    // 10.
    DownThreshold interface{}
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetFilter() yfilter.YFilter { return accountFloodingThreshold.YFilter }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) SetFilter(yf yfilter.YFilter) { accountFloodingThreshold.YFilter = yf }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetGoName(yname string) string {
    if yname == "up-threshold" { return "UpThreshold" }
    if yname == "down-threshold" { return "DownThreshold" }
    return ""
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetSegmentPath() string {
    return "account-flooding-threshold"
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["up-threshold"] = accountFloodingThreshold.UpThreshold
    leafs["down-threshold"] = accountFloodingThreshold.DownThreshold
    return leafs
}

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetYangName() string { return "account-flooding-threshold" }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) SetParent(parent types.Entity) { accountFloodingThreshold.parent = parent }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetParent() types.Entity { return accountFloodingThreshold.parent }

func (accountFloodingThreshold *MplsTe_GlobalAttributes_BandwidthAccounting_AccountFloodingThreshold) GetParentYangName() string { return "bandwidth-accounting" }

// MplsTe_GlobalAttributes_PceAttributes
// Configuration MPLS TE PCE attributes
type MplsTe_GlobalAttributes_PceAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Request timeout value in seconds. The type is interface{} with range:
    // 5..100. Units are second. The default value is 10.
    RequestTimeout interface{}

    // PCE reoptimization period for PCE-based paths. The type is interface{} with
    // range: 60..604800. Units are second. The default value is 60.
    ReoptimizePeriod interface{}

    // Address of this PCE. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Deadtimer interval in seconds. The type is interface{} with range: 0..255.
    // Units are second. The default value is 120.
    Deadtimer interface{}

    // Keepalive interval in seconds. The type is interface{} with range: 0..255.
    // Units are second. The default value is 30.
    Keepalive interface{}

    // Keepalive interval tolerance in seconds. The type is interface{} with
    // range: 0..255. Units are second. The default value is 10.
    KeepaliveTolerance interface{}

    // PCE Peer Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerSourceAddr interface{}

    // PCE speaker entity identifier. The type is string with length: 1..256.
    SpeakerEntityId interface{}

    // PCE segment routing capability. The type is interface{}.
    SegmentRouting interface{}

    // MD5 password. The type is string with pattern: (!.+)|([^!].+).
    Password interface{}

    // Keychain based authentication. The type is string with length: 1..32.
    Keychain interface{}

    // Precedence order. The type is interface{} with range: 0..255.
    Precedence interface{}

    // PCE Stateful.
    PceStateful MplsTe_GlobalAttributes_PceAttributes_PceStateful

    // Configure PCE (Path Computation Element) timers.
    Timer MplsTe_GlobalAttributes_PceAttributes_Timer

    // Configure PCE peers.
    Peers MplsTe_GlobalAttributes_PceAttributes_Peers

    // Configure PCE (Path Computation Element) logging feature.
    Logging MplsTe_GlobalAttributes_PceAttributes_Logging
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetFilter() yfilter.YFilter { return pceAttributes.YFilter }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) SetFilter(yf yfilter.YFilter) { pceAttributes.YFilter = yf }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetGoName(yname string) string {
    if yname == "request-timeout" { return "RequestTimeout" }
    if yname == "reoptimize-period" { return "ReoptimizePeriod" }
    if yname == "address" { return "Address" }
    if yname == "deadtimer" { return "Deadtimer" }
    if yname == "keepalive" { return "Keepalive" }
    if yname == "keepalive-tolerance" { return "KeepaliveTolerance" }
    if yname == "peer-source-addr" { return "PeerSourceAddr" }
    if yname == "speaker-entity-id" { return "SpeakerEntityId" }
    if yname == "segment-routing" { return "SegmentRouting" }
    if yname == "password" { return "Password" }
    if yname == "keychain" { return "Keychain" }
    if yname == "precedence" { return "Precedence" }
    if yname == "pce-stateful" { return "PceStateful" }
    if yname == "timer" { return "Timer" }
    if yname == "peers" { return "Peers" }
    if yname == "logging" { return "Logging" }
    return ""
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetSegmentPath() string {
    return "pce-attributes"
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pce-stateful" {
        return &pceAttributes.PceStateful
    }
    if childYangName == "timer" {
        return &pceAttributes.Timer
    }
    if childYangName == "peers" {
        return &pceAttributes.Peers
    }
    if childYangName == "logging" {
        return &pceAttributes.Logging
    }
    return nil
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pce-stateful"] = &pceAttributes.PceStateful
    children["timer"] = &pceAttributes.Timer
    children["peers"] = &pceAttributes.Peers
    children["logging"] = &pceAttributes.Logging
    return children
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["request-timeout"] = pceAttributes.RequestTimeout
    leafs["reoptimize-period"] = pceAttributes.ReoptimizePeriod
    leafs["address"] = pceAttributes.Address
    leafs["deadtimer"] = pceAttributes.Deadtimer
    leafs["keepalive"] = pceAttributes.Keepalive
    leafs["keepalive-tolerance"] = pceAttributes.KeepaliveTolerance
    leafs["peer-source-addr"] = pceAttributes.PeerSourceAddr
    leafs["speaker-entity-id"] = pceAttributes.SpeakerEntityId
    leafs["segment-routing"] = pceAttributes.SegmentRouting
    leafs["password"] = pceAttributes.Password
    leafs["keychain"] = pceAttributes.Keychain
    leafs["precedence"] = pceAttributes.Precedence
    return leafs
}

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetYangName() string { return "pce-attributes" }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) SetParent(parent types.Entity) { pceAttributes.parent = parent }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetParent() types.Entity { return pceAttributes.parent }

func (pceAttributes *MplsTe_GlobalAttributes_PceAttributes) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_PceAttributes_PceStateful
// PCE Stateful
type MplsTe_GlobalAttributes_PceAttributes_PceStateful struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable reoptimization by PCC after path failures. The type is interface{}.
    FastRepair interface{}

    // PCE stateful instantiation capability. The type is interface{}.
    Instantiation interface{}

    // Enable processing of PCEP Cisco extension. The type is interface{}.
    CiscoExtension interface{}

    // Delegate all statically configured tunnels. The type is interface{}.
    Delegation interface{}

    // Report all statically configured tunnels. The type is interface{}.
    Report interface{}

    // PCE stateful capability. The type is interface{}.
    Enable interface{}

    // Configure Stateful PCE (Path Computation Element) timers.
    StatefulTimers MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetFilter() yfilter.YFilter { return pceStateful.YFilter }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) SetFilter(yf yfilter.YFilter) { pceStateful.YFilter = yf }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetGoName(yname string) string {
    if yname == "fast-repair" { return "FastRepair" }
    if yname == "instantiation" { return "Instantiation" }
    if yname == "cisco-extension" { return "CiscoExtension" }
    if yname == "delegation" { return "Delegation" }
    if yname == "report" { return "Report" }
    if yname == "enable" { return "Enable" }
    if yname == "stateful-timers" { return "StatefulTimers" }
    return ""
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetSegmentPath() string {
    return "pce-stateful"
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "stateful-timers" {
        return &pceStateful.StatefulTimers
    }
    return nil
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["stateful-timers"] = &pceStateful.StatefulTimers
    return children
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-repair"] = pceStateful.FastRepair
    leafs["instantiation"] = pceStateful.Instantiation
    leafs["cisco-extension"] = pceStateful.CiscoExtension
    leafs["delegation"] = pceStateful.Delegation
    leafs["report"] = pceStateful.Report
    leafs["enable"] = pceStateful.Enable
    return leafs
}

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetBundleName() string { return "cisco_ios_xr" }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetYangName() string { return "pce-stateful" }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) SetParent(parent types.Entity) { pceStateful.parent = parent }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetParent() types.Entity { return pceStateful.parent }

func (pceStateful *MplsTe_GlobalAttributes_PceAttributes_PceStateful) GetParentYangName() string { return "pce-attributes" }

// MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers
// Configure Stateful PCE (Path Computation
// Element) timers
type MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Timer for static tunnel redelegation in seconds, default is 180 seconds.
    // The type is interface{} with range: 0..3600. Units are second. The default
    // value is 180.
    RedelegationTimeout interface{}

    // State timeout for LSPs without delegation in seconds, zero means immediate
    // removal, default is 180 seconds. The type is interface{} with range:
    // 0..3600. Units are second. The default value is 180.
    StateTimeout interface{}
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetFilter() yfilter.YFilter { return statefulTimers.YFilter }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) SetFilter(yf yfilter.YFilter) { statefulTimers.YFilter = yf }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetGoName(yname string) string {
    if yname == "redelegation-timeout" { return "RedelegationTimeout" }
    if yname == "state-timeout" { return "StateTimeout" }
    return ""
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetSegmentPath() string {
    return "stateful-timers"
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["redelegation-timeout"] = statefulTimers.RedelegationTimeout
    leafs["state-timeout"] = statefulTimers.StateTimeout
    return leafs
}

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetBundleName() string { return "cisco_ios_xr" }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetYangName() string { return "stateful-timers" }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) SetParent(parent types.Entity) { statefulTimers.parent = parent }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetParent() types.Entity { return statefulTimers.parent }

func (statefulTimers *MplsTe_GlobalAttributes_PceAttributes_PceStateful_StatefulTimers) GetParentYangName() string { return "pce-stateful" }

// MplsTe_GlobalAttributes_PceAttributes_Timer
// Configure PCE (Path Computation Element)
// timers
type MplsTe_GlobalAttributes_PceAttributes_Timer struct {
    parent types.Entity
    YFilter yfilter.YFilter
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetFilter() yfilter.YFilter { return timer.YFilter }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) SetFilter(yf yfilter.YFilter) { timer.YFilter = yf }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetGoName(yname string) string {
    return ""
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetSegmentPath() string {
    return "timer"
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetBundleName() string { return "cisco_ios_xr" }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetYangName() string { return "timer" }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) SetParent(parent types.Entity) { timer.parent = parent }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetParent() types.Entity { return timer.parent }

func (timer *MplsTe_GlobalAttributes_PceAttributes_Timer) GetParentYangName() string { return "pce-attributes" }

// MplsTe_GlobalAttributes_PceAttributes_Peers
// Configure PCE peers
type MplsTe_GlobalAttributes_PceAttributes_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // PCE peer. The type is slice of
    // MplsTe_GlobalAttributes_PceAttributes_Peers_Peer.
    Peer []MplsTe_GlobalAttributes_PceAttributes_Peers_Peer
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_PceAttributes_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetYangName() string { return "peers" }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetParent() types.Entity { return peers.parent }

func (peers *MplsTe_GlobalAttributes_PceAttributes_Peers) GetParentYangName() string { return "pce-attributes" }

// MplsTe_GlobalAttributes_PceAttributes_Peers_Peer
// PCE peer
type MplsTe_GlobalAttributes_PceAttributes_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of PCE Peer. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PcePeerAddress interface{}

    // Enabled PCE peer (default source address uses local). The type is
    // interface{}.
    Enable interface{}

    // MD5 password. The type is string with pattern: (!.+)|([^!].+).
    Password interface{}

    // Keychain based authentication. The type is string with length: 1..32.
    Keychain interface{}

    // Precedence order. The type is interface{} with range: 0..255.
    Precedence interface{}
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetGoName(yname string) string {
    if yname == "pce-peer-address" { return "PcePeerAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "password" { return "Password" }
    if yname == "keychain" { return "Keychain" }
    if yname == "precedence" { return "Precedence" }
    return ""
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[pce-peer-address='" + fmt.Sprintf("%v", peer.PcePeerAddress) + "']"
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pce-peer-address"] = peer.PcePeerAddress
    leafs["enable"] = peer.Enable
    leafs["password"] = peer.Password
    leafs["keychain"] = peer.Keychain
    leafs["precedence"] = peer.Precedence
    return leafs
}

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetYangName() string { return "peer" }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *MplsTe_GlobalAttributes_PceAttributes_Peers_Peer) GetParentYangName() string { return "peers" }

// MplsTe_GlobalAttributes_PceAttributes_Logging
// Configure PCE (Path Computation Element)
// logging feature
type MplsTe_GlobalAttributes_PceAttributes_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure logging events.
    Events MplsTe_GlobalAttributes_PceAttributes_Logging_Events
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetGoName(yname string) string {
    if yname == "events" { return "Events" }
    return ""
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events" {
        return &logging.Events
    }
    return nil
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events"] = &logging.Events
    return children
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_GlobalAttributes_PceAttributes_Logging) GetParentYangName() string { return "pce-attributes" }

// MplsTe_GlobalAttributes_PceAttributes_Logging_Events
// Configure logging events
type MplsTe_GlobalAttributes_PceAttributes_Logging_Events struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer status changes logging. The type is interface{}.
    PeerStatus interface{}
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetFilter() yfilter.YFilter { return events.YFilter }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) SetFilter(yf yfilter.YFilter) { events.YFilter = yf }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetGoName(yname string) string {
    if yname == "peer-status" { return "PeerStatus" }
    return ""
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetSegmentPath() string {
    return "events"
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-status"] = events.PeerStatus
    return leafs
}

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetBundleName() string { return "cisco_ios_xr" }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetYangName() string { return "events" }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) SetParent(parent types.Entity) { events.parent = parent }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetParent() types.Entity { return events.parent }

func (events *MplsTe_GlobalAttributes_PceAttributes_Logging_Events) GetParentYangName() string { return "logging" }

// MplsTe_GlobalAttributes_LspOutOfResource
// Configure LSP OOR attributes in MPLS-TE
type MplsTe_GlobalAttributes_LspOutOfResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for LSP OOR Red/Major State.
    LspOorRedState MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState

    // Configuration for LSP OOR Yellow/Minor State.
    LspOorYellowState MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetFilter() yfilter.YFilter { return lspOutOfResource.YFilter }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) SetFilter(yf yfilter.YFilter) { lspOutOfResource.YFilter = yf }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetGoName(yname string) string {
    if yname == "lsp-oor-red-state" { return "LspOorRedState" }
    if yname == "lsp-oor-yellow-state" { return "LspOorYellowState" }
    return ""
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetSegmentPath() string {
    return "lsp-out-of-resource"
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-oor-red-state" {
        return &lspOutOfResource.LspOorRedState
    }
    if childYangName == "lsp-oor-yellow-state" {
        return &lspOutOfResource.LspOorYellowState
    }
    return nil
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-oor-red-state"] = &lspOutOfResource.LspOorRedState
    children["lsp-oor-yellow-state"] = &lspOutOfResource.LspOorYellowState
    return children
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetBundleName() string { return "cisco_ios_xr" }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetYangName() string { return "lsp-out-of-resource" }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) SetParent(parent types.Entity) { lspOutOfResource.parent = parent }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetParent() types.Entity { return lspOutOfResource.parent }

func (lspOutOfResource *MplsTe_GlobalAttributes_LspOutOfResource) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState
// Configuration for LSP OOR Red/Major State
type MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Threshold for all transit LSPs. The type is interface{} with range:
    // -2147483648..2147483647.
    AllTransitLspThreshold interface{}

    // Threshold for unprotected transit LSPs. The type is interface{} with range:
    // -2147483648..2147483647.
    UnprotectedTransitLspThreshold interface{}
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetFilter() yfilter.YFilter { return lspOorRedState.YFilter }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) SetFilter(yf yfilter.YFilter) { lspOorRedState.YFilter = yf }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetGoName(yname string) string {
    if yname == "all-transit-lsp-threshold" { return "AllTransitLspThreshold" }
    if yname == "unprotected-transit-lsp-threshold" { return "UnprotectedTransitLspThreshold" }
    return ""
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetSegmentPath() string {
    return "lsp-oor-red-state"
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-transit-lsp-threshold"] = lspOorRedState.AllTransitLspThreshold
    leafs["unprotected-transit-lsp-threshold"] = lspOorRedState.UnprotectedTransitLspThreshold
    return leafs
}

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetBundleName() string { return "cisco_ios_xr" }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetYangName() string { return "lsp-oor-red-state" }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) SetParent(parent types.Entity) { lspOorRedState.parent = parent }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetParent() types.Entity { return lspOorRedState.parent }

func (lspOorRedState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorRedState) GetParentYangName() string { return "lsp-out-of-resource" }

// MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState
// Configuration for LSP OOR Yellow/Minor State
type MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Threshold for all transit LSPs. The type is interface{} with range:
    // -2147483648..2147483647.
    AllTransitLspThreshold interface{}

    // Threshold for unprotected transit LSPs. The type is interface{} with range:
    // -2147483648..2147483647.
    UnprotectedTransitLspThreshold interface{}
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetFilter() yfilter.YFilter { return lspOorYellowState.YFilter }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) SetFilter(yf yfilter.YFilter) { lspOorYellowState.YFilter = yf }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetGoName(yname string) string {
    if yname == "all-transit-lsp-threshold" { return "AllTransitLspThreshold" }
    if yname == "unprotected-transit-lsp-threshold" { return "UnprotectedTransitLspThreshold" }
    return ""
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetSegmentPath() string {
    return "lsp-oor-yellow-state"
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-transit-lsp-threshold"] = lspOorYellowState.AllTransitLspThreshold
    leafs["unprotected-transit-lsp-threshold"] = lspOorYellowState.UnprotectedTransitLspThreshold
    return leafs
}

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetBundleName() string { return "cisco_ios_xr" }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetYangName() string { return "lsp-oor-yellow-state" }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) SetParent(parent types.Entity) { lspOorYellowState.parent = parent }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetParent() types.Entity { return lspOorYellowState.parent }

func (lspOorYellowState *MplsTe_GlobalAttributes_LspOutOfResource_LspOorYellowState) GetParentYangName() string { return "lsp-out-of-resource" }

// MplsTe_GlobalAttributes_SoftPreemption
// Soft preemption configuration data
type MplsTe_GlobalAttributes_SoftPreemption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object sets the timeout in seconds before hard preemption is
    // triggered. The type is interface{} with range: 1..300. Units are second.
    // The default value is 60.
    Timeout interface{}

    // This object controls whether FRR rewrite during soft preemption is enabled.
    // The type is interface{}.
    FrrRewrite interface{}

    // This object controls whether soft preemption is enabled. This object must
    // be set before setting any other objects under the SoftPreemption class. The
    // type is bool.
    Enable interface{}
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetFilter() yfilter.YFilter { return softPreemption.YFilter }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) SetFilter(yf yfilter.YFilter) { softPreemption.YFilter = yf }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetGoName(yname string) string {
    if yname == "timeout" { return "Timeout" }
    if yname == "frr-rewrite" { return "FrrRewrite" }
    if yname == "enable" { return "Enable" }
    return ""
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetSegmentPath() string {
    return "soft-preemption"
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["timeout"] = softPreemption.Timeout
    leafs["frr-rewrite"] = softPreemption.FrrRewrite
    leafs["enable"] = softPreemption.Enable
    return leafs
}

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetBundleName() string { return "cisco_ios_xr" }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetYangName() string { return "soft-preemption" }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) SetParent(parent types.Entity) { softPreemption.parent = parent }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetParent() types.Entity { return softPreemption.parent }

func (softPreemption *MplsTe_GlobalAttributes_SoftPreemption) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_FastReroute
// Configure fast reroute attributes
type MplsTe_GlobalAttributes_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure fast reroute timers.
    Timers MplsTe_GlobalAttributes_FastReroute_Timers
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetGoName(yname string) string {
    if yname == "timers" { return "Timers" }
    return ""
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timers" {
        return &fastReroute.Timers
    }
    return nil
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timers"] = &fastReroute.Timers
    return children
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *MplsTe_GlobalAttributes_FastReroute) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_FastReroute_Timers
// Configure fast reroute timers
type MplsTe_GlobalAttributes_FastReroute_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds before backup declared UP (0 disables hold-timer). The type is
    // interface{} with range: 0..604800. Units are second.
    HoldBackup interface{}

    // The value of the promotion timer in seconds. The type is interface{} with
    // range: 0..604800. Units are second.
    Promotion interface{}
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetGoName(yname string) string {
    if yname == "hold-backup" { return "HoldBackup" }
    if yname == "promotion" { return "Promotion" }
    return ""
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["hold-backup"] = timers.HoldBackup
    leafs["promotion"] = timers.Promotion
    return leafs
}

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetYangName() string { return "timers" }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetParent() types.Entity { return timers.parent }

func (timers *MplsTe_GlobalAttributes_FastReroute_Timers) GetParentYangName() string { return "fast-reroute" }

// MplsTe_GlobalAttributes_PathSelection
// Path selection configuration
type MplsTe_GlobalAttributes_PathSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection cost limit configuration for all tunnels. The type is
    // interface{} with range: 1..4294967295.
    CostLimit interface{}

    // CSPF tiebreaker to use in path calculation. The type is
    // MplsTePathSelectionTiebreaker.
    Tiebreaker interface{}

    // Metric to use in path calculation. The type is MplsTePathSelectionMetric.
    Metric interface{}

    // Use only the IGP instance of the incoming interface. The type is bool.
    LooseDomainMatch interface{}

    // Path selection Loose ERO Metric Class configuration.
    LooseMetrics MplsTe_GlobalAttributes_PathSelection_LooseMetrics

    // Path invalidation configuration for all tunnels.
    Invalidation MplsTe_GlobalAttributes_PathSelection_Invalidation

    // Path selection to ignore overload node during CSPF.
    IgnoreOverloadRole MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole

    // Path selection Loose ERO Affinity Class configuration.
    LooseAffinities MplsTe_GlobalAttributes_PathSelection_LooseAffinities
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetFilter() yfilter.YFilter { return pathSelection.YFilter }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) SetFilter(yf yfilter.YFilter) { pathSelection.YFilter = yf }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetGoName(yname string) string {
    if yname == "cost-limit" { return "CostLimit" }
    if yname == "tiebreaker" { return "Tiebreaker" }
    if yname == "metric" { return "Metric" }
    if yname == "loose-domain-match" { return "LooseDomainMatch" }
    if yname == "loose-metrics" { return "LooseMetrics" }
    if yname == "invalidation" { return "Invalidation" }
    if yname == "ignore-overload-role" { return "IgnoreOverloadRole" }
    if yname == "loose-affinities" { return "LooseAffinities" }
    return ""
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetSegmentPath() string {
    return "path-selection"
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loose-metrics" {
        return &pathSelection.LooseMetrics
    }
    if childYangName == "invalidation" {
        return &pathSelection.Invalidation
    }
    if childYangName == "ignore-overload-role" {
        return &pathSelection.IgnoreOverloadRole
    }
    if childYangName == "loose-affinities" {
        return &pathSelection.LooseAffinities
    }
    return nil
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["loose-metrics"] = &pathSelection.LooseMetrics
    children["invalidation"] = &pathSelection.Invalidation
    children["ignore-overload-role"] = &pathSelection.IgnoreOverloadRole
    children["loose-affinities"] = &pathSelection.LooseAffinities
    return children
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cost-limit"] = pathSelection.CostLimit
    leafs["tiebreaker"] = pathSelection.Tiebreaker
    leafs["metric"] = pathSelection.Metric
    leafs["loose-domain-match"] = pathSelection.LooseDomainMatch
    return leafs
}

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetBundleName() string { return "cisco_ios_xr" }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetYangName() string { return "path-selection" }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) SetParent(parent types.Entity) { pathSelection.parent = parent }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetParent() types.Entity { return pathSelection.parent }

func (pathSelection *MplsTe_GlobalAttributes_PathSelection) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_PathSelection_LooseMetrics
// Path selection Loose ERO Metric Class
// configuration
type MplsTe_GlobalAttributes_PathSelection_LooseMetrics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection Loose ERO Metric configuration. The type is slice of
    // MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric.
    LooseMetric []MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetFilter() yfilter.YFilter { return looseMetrics.YFilter }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) SetFilter(yf yfilter.YFilter) { looseMetrics.YFilter = yf }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetGoName(yname string) string {
    if yname == "loose-metric" { return "LooseMetric" }
    return ""
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetSegmentPath() string {
    return "loose-metrics"
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loose-metric" {
        for _, c := range looseMetrics.LooseMetric {
            if looseMetrics.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric{}
        looseMetrics.LooseMetric = append(looseMetrics.LooseMetric, child)
        return &looseMetrics.LooseMetric[len(looseMetrics.LooseMetric)-1]
    }
    return nil
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range looseMetrics.LooseMetric {
        children[looseMetrics.LooseMetric[i].GetSegmentPath()] = &looseMetrics.LooseMetric[i]
    }
    return children
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetBundleName() string { return "cisco_ios_xr" }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetYangName() string { return "loose-metrics" }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) SetParent(parent types.Entity) { looseMetrics.parent = parent }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetParent() types.Entity { return looseMetrics.parent }

func (looseMetrics *MplsTe_GlobalAttributes_PathSelection_LooseMetrics) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric
// Path selection Loose ERO Metric configuration
type MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Selection class Type. The type is interface{}
    // with range: 0..7.
    ClassType interface{}

    // Metric to use for ERO Expansion. The type is MplsTePathSelectionMetric.
    // This attribute is mandatory.
    MetricType interface{}
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetFilter() yfilter.YFilter { return looseMetric.YFilter }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) SetFilter(yf yfilter.YFilter) { looseMetric.YFilter = yf }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetGoName(yname string) string {
    if yname == "class-type" { return "ClassType" }
    if yname == "metric-type" { return "MetricType" }
    return ""
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetSegmentPath() string {
    return "loose-metric" + "[class-type='" + fmt.Sprintf("%v", looseMetric.ClassType) + "']"
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-type"] = looseMetric.ClassType
    leafs["metric-type"] = looseMetric.MetricType
    return leafs
}

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetBundleName() string { return "cisco_ios_xr" }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetYangName() string { return "loose-metric" }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) SetParent(parent types.Entity) { looseMetric.parent = parent }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetParent() types.Entity { return looseMetric.parent }

func (looseMetric *MplsTe_GlobalAttributes_PathSelection_LooseMetrics_LooseMetric) GetParentYangName() string { return "loose-metrics" }

// MplsTe_GlobalAttributes_PathSelection_Invalidation
// Path invalidation configuration for all
// tunnels
type MplsTe_GlobalAttributes_PathSelection_Invalidation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Invalidation Timeout. The type is interface{} with range: 0..60000.
    PathInvalidationTimeout interface{}

    // Path Invalidation Action. The type is PathInvalidationAction.
    PathInvalidationAction interface{}
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetFilter() yfilter.YFilter { return invalidation.YFilter }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) SetFilter(yf yfilter.YFilter) { invalidation.YFilter = yf }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetGoName(yname string) string {
    if yname == "path-invalidation-timeout" { return "PathInvalidationTimeout" }
    if yname == "path-invalidation-action" { return "PathInvalidationAction" }
    return ""
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetSegmentPath() string {
    return "invalidation"
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-invalidation-timeout"] = invalidation.PathInvalidationTimeout
    leafs["path-invalidation-action"] = invalidation.PathInvalidationAction
    return leafs
}

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetBundleName() string { return "cisco_ios_xr" }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetYangName() string { return "invalidation" }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) SetParent(parent types.Entity) { invalidation.parent = parent }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetParent() types.Entity { return invalidation.parent }

func (invalidation *MplsTe_GlobalAttributes_PathSelection_Invalidation) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole
// Path selection to ignore overload node during
// CSPF
type MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set if the OL-bit is to be applied to tunnel heads. The type is bool.
    Head interface{}

    // Set if the OL-bit is to be applied to tunnel midpoints. The type is bool.
    Mid interface{}

    // Set if the OL-bit is to be applied to tunnel tails. The type is bool.
    Tail interface{}
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetFilter() yfilter.YFilter { return ignoreOverloadRole.YFilter }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) SetFilter(yf yfilter.YFilter) { ignoreOverloadRole.YFilter = yf }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetGoName(yname string) string {
    if yname == "head" { return "Head" }
    if yname == "mid" { return "Mid" }
    if yname == "tail" { return "Tail" }
    return ""
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetSegmentPath() string {
    return "ignore-overload-role"
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["head"] = ignoreOverloadRole.Head
    leafs["mid"] = ignoreOverloadRole.Mid
    leafs["tail"] = ignoreOverloadRole.Tail
    return leafs
}

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetBundleName() string { return "cisco_ios_xr" }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetYangName() string { return "ignore-overload-role" }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) SetParent(parent types.Entity) { ignoreOverloadRole.parent = parent }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetParent() types.Entity { return ignoreOverloadRole.parent }

func (ignoreOverloadRole *MplsTe_GlobalAttributes_PathSelection_IgnoreOverloadRole) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_PathSelection_LooseAffinities
// Path selection Loose ERO Affinity Class
// configuration
type MplsTe_GlobalAttributes_PathSelection_LooseAffinities struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection Loose ERO Affinity configuration. The type is slice of
    // MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity.
    LooseAffinity []MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetFilter() yfilter.YFilter { return looseAffinities.YFilter }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) SetFilter(yf yfilter.YFilter) { looseAffinities.YFilter = yf }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetGoName(yname string) string {
    if yname == "loose-affinity" { return "LooseAffinity" }
    return ""
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetSegmentPath() string {
    return "loose-affinities"
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "loose-affinity" {
        for _, c := range looseAffinities.LooseAffinity {
            if looseAffinities.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity{}
        looseAffinities.LooseAffinity = append(looseAffinities.LooseAffinity, child)
        return &looseAffinities.LooseAffinity[len(looseAffinities.LooseAffinity)-1]
    }
    return nil
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range looseAffinities.LooseAffinity {
        children[looseAffinities.LooseAffinity[i].GetSegmentPath()] = &looseAffinities.LooseAffinity[i]
    }
    return children
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetBundleName() string { return "cisco_ios_xr" }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetYangName() string { return "loose-affinities" }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) SetParent(parent types.Entity) { looseAffinities.parent = parent }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetParent() types.Entity { return looseAffinities.parent }

func (looseAffinities *MplsTe_GlobalAttributes_PathSelection_LooseAffinities) GetParentYangName() string { return "path-selection" }

// MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity
// Path selection Loose ERO Affinity
// configuration
type MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Path Selection class Type. The type is interface{}
    // with range: 0..7.
    ClassType interface{}

    // Affinity flags. The type is string with pattern: [0-9a-fA-F]{1,8}.
    Affinity interface{}

    // Affinity mask. The type is string with pattern: [0-9a-fA-F]{1,8}.
    Mask interface{}
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetFilter() yfilter.YFilter { return looseAffinity.YFilter }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) SetFilter(yf yfilter.YFilter) { looseAffinity.YFilter = yf }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetGoName(yname string) string {
    if yname == "class-type" { return "ClassType" }
    if yname == "affinity" { return "Affinity" }
    if yname == "mask" { return "Mask" }
    return ""
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetSegmentPath() string {
    return "loose-affinity" + "[class-type='" + fmt.Sprintf("%v", looseAffinity.ClassType) + "']"
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["class-type"] = looseAffinity.ClassType
    leafs["affinity"] = looseAffinity.Affinity
    leafs["mask"] = looseAffinity.Mask
    return leafs
}

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetBundleName() string { return "cisco_ios_xr" }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetYangName() string { return "loose-affinity" }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) SetParent(parent types.Entity) { looseAffinity.parent = parent }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetParent() types.Entity { return looseAffinity.parent }

func (looseAffinity *MplsTe_GlobalAttributes_PathSelection_LooseAffinities_LooseAffinity) GetParentYangName() string { return "loose-affinities" }

// MplsTe_GlobalAttributes_AffinityMappings
// Affinity Mapping Table configuration
type MplsTe_GlobalAttributes_AffinityMappings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Affinity Mapping configuration. The type is slice of
    // MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping.
    AffinityMapping []MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetFilter() yfilter.YFilter { return affinityMappings.YFilter }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) SetFilter(yf yfilter.YFilter) { affinityMappings.YFilter = yf }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetGoName(yname string) string {
    if yname == "affinity-mapping" { return "AffinityMapping" }
    return ""
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetSegmentPath() string {
    return "affinity-mappings"
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "affinity-mapping" {
        for _, c := range affinityMappings.AffinityMapping {
            if affinityMappings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping{}
        affinityMappings.AffinityMapping = append(affinityMappings.AffinityMapping, child)
        return &affinityMappings.AffinityMapping[len(affinityMappings.AffinityMapping)-1]
    }
    return nil
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range affinityMappings.AffinityMapping {
        children[affinityMappings.AffinityMapping[i].GetSegmentPath()] = &affinityMappings.AffinityMapping[i]
    }
    return children
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetYangName() string { return "affinity-mappings" }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) SetParent(parent types.Entity) { affinityMappings.parent = parent }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetParent() types.Entity { return affinityMappings.parent }

func (affinityMappings *MplsTe_GlobalAttributes_AffinityMappings) GetParentYangName() string { return "global-attributes" }

// MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping
// Affinity Mapping configuration
type MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Affinity Name. The type is string with length:
    // 1..32.
    AffinityName interface{}

    // Affinity value type. The type is MplsTeAffinityValue.
    ValueType interface{}

    // Affinity Value in Hex number or by Bit position. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    Value interface{}
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetFilter() yfilter.YFilter { return affinityMapping.YFilter }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) SetFilter(yf yfilter.YFilter) { affinityMapping.YFilter = yf }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetGoName(yname string) string {
    if yname == "affinity-name" { return "AffinityName" }
    if yname == "value-type" { return "ValueType" }
    if yname == "value" { return "Value" }
    return ""
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetSegmentPath() string {
    return "affinity-mapping" + "[affinity-name='" + fmt.Sprintf("%v", affinityMapping.AffinityName) + "']"
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-name"] = affinityMapping.AffinityName
    leafs["value-type"] = affinityMapping.ValueType
    leafs["value"] = affinityMapping.Value
    return leafs
}

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetBundleName() string { return "cisco_ios_xr" }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetYangName() string { return "affinity-mapping" }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) SetParent(parent types.Entity) { affinityMapping.parent = parent }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetParent() types.Entity { return affinityMapping.parent }

func (affinityMapping *MplsTe_GlobalAttributes_AffinityMappings_AffinityMapping) GetParentYangName() string { return "affinity-mappings" }

// MplsTe_TransportProfile
// MPLS transport profile configuration data
type MplsTe_TransportProfile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Transport profile global identifier. The type is interface{} with range:
    // 1..65535.
    GlobalId interface{}

    // Node identifier in IPv4 address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // Fault management.
    Fault MplsTe_TransportProfile_Fault

    // Alarm management.
    Alarm MplsTe_TransportProfile_Alarm

    // Configure BFD parameters.
    Bfd MplsTe_TransportProfile_Bfd

    // MPLS-TP tunnel mid-point table.
    Midpoints MplsTe_TransportProfile_Midpoints
}

func (transportProfile *MplsTe_TransportProfile) GetFilter() yfilter.YFilter { return transportProfile.YFilter }

func (transportProfile *MplsTe_TransportProfile) SetFilter(yf yfilter.YFilter) { transportProfile.YFilter = yf }

func (transportProfile *MplsTe_TransportProfile) GetGoName(yname string) string {
    if yname == "global-id" { return "GlobalId" }
    if yname == "node-id" { return "NodeId" }
    if yname == "fault" { return "Fault" }
    if yname == "alarm" { return "Alarm" }
    if yname == "bfd" { return "Bfd" }
    if yname == "midpoints" { return "Midpoints" }
    return ""
}

func (transportProfile *MplsTe_TransportProfile) GetSegmentPath() string {
    return "transport-profile"
}

func (transportProfile *MplsTe_TransportProfile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fault" {
        return &transportProfile.Fault
    }
    if childYangName == "alarm" {
        return &transportProfile.Alarm
    }
    if childYangName == "bfd" {
        return &transportProfile.Bfd
    }
    if childYangName == "midpoints" {
        return &transportProfile.Midpoints
    }
    return nil
}

func (transportProfile *MplsTe_TransportProfile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fault"] = &transportProfile.Fault
    children["alarm"] = &transportProfile.Alarm
    children["bfd"] = &transportProfile.Bfd
    children["midpoints"] = &transportProfile.Midpoints
    return children
}

func (transportProfile *MplsTe_TransportProfile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["global-id"] = transportProfile.GlobalId
    leafs["node-id"] = transportProfile.NodeId
    return leafs
}

func (transportProfile *MplsTe_TransportProfile) GetBundleName() string { return "cisco_ios_xr" }

func (transportProfile *MplsTe_TransportProfile) GetYangName() string { return "transport-profile" }

func (transportProfile *MplsTe_TransportProfile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transportProfile *MplsTe_TransportProfile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transportProfile *MplsTe_TransportProfile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transportProfile *MplsTe_TransportProfile) SetParent(parent types.Entity) { transportProfile.parent = parent }

func (transportProfile *MplsTe_TransportProfile) GetParent() types.Entity { return transportProfile.parent }

func (transportProfile *MplsTe_TransportProfile) GetParentYangName() string { return "mpls-te" }

// MplsTe_TransportProfile_Fault
// Fault management
type MplsTe_TransportProfile_Fault struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Waiting time before restoring working LSP. The type is interface{} with
    // range: 0..2147483647. Units are second. The default value is 0.
    WaitToRestoreInterval interface{}

    // Periodic refresh interval for fault OAM messages. The type is interface{}
    // with range: 1..20. Units are second. The default value is 20.
    RefreshInterval interface{}

    // OAM events that trigger protection switching.
    ProtectionTrigger MplsTe_TransportProfile_Fault_ProtectionTrigger
}

func (fault *MplsTe_TransportProfile_Fault) GetFilter() yfilter.YFilter { return fault.YFilter }

func (fault *MplsTe_TransportProfile_Fault) SetFilter(yf yfilter.YFilter) { fault.YFilter = yf }

func (fault *MplsTe_TransportProfile_Fault) GetGoName(yname string) string {
    if yname == "wait-to-restore-interval" { return "WaitToRestoreInterval" }
    if yname == "refresh-interval" { return "RefreshInterval" }
    if yname == "protection-trigger" { return "ProtectionTrigger" }
    return ""
}

func (fault *MplsTe_TransportProfile_Fault) GetSegmentPath() string {
    return "fault"
}

func (fault *MplsTe_TransportProfile_Fault) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protection-trigger" {
        return &fault.ProtectionTrigger
    }
    return nil
}

func (fault *MplsTe_TransportProfile_Fault) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protection-trigger"] = &fault.ProtectionTrigger
    return children
}

func (fault *MplsTe_TransportProfile_Fault) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-to-restore-interval"] = fault.WaitToRestoreInterval
    leafs["refresh-interval"] = fault.RefreshInterval
    return leafs
}

func (fault *MplsTe_TransportProfile_Fault) GetBundleName() string { return "cisco_ios_xr" }

func (fault *MplsTe_TransportProfile_Fault) GetYangName() string { return "fault" }

func (fault *MplsTe_TransportProfile_Fault) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fault *MplsTe_TransportProfile_Fault) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fault *MplsTe_TransportProfile_Fault) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fault *MplsTe_TransportProfile_Fault) SetParent(parent types.Entity) { fault.parent = parent }

func (fault *MplsTe_TransportProfile_Fault) GetParent() types.Entity { return fault.parent }

func (fault *MplsTe_TransportProfile_Fault) GetParentYangName() string { return "transport-profile" }

// MplsTe_TransportProfile_Fault_ProtectionTrigger
// OAM events that trigger protection switching
type MplsTe_TransportProfile_Fault_ProtectionTrigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable protection switching due to AIS event. The type is interface{}.
    Ais interface{}

    // Protection switching due to LDI event.
    Ldi MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi

    // Protection switching due to LKR event.
    Lkr MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetFilter() yfilter.YFilter { return protectionTrigger.YFilter }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) SetFilter(yf yfilter.YFilter) { protectionTrigger.YFilter = yf }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetGoName(yname string) string {
    if yname == "ais" { return "Ais" }
    if yname == "ldi" { return "Ldi" }
    if yname == "lkr" { return "Lkr" }
    return ""
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetSegmentPath() string {
    return "protection-trigger"
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ldi" {
        return &protectionTrigger.Ldi
    }
    if childYangName == "lkr" {
        return &protectionTrigger.Lkr
    }
    return nil
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ldi"] = &protectionTrigger.Ldi
    children["lkr"] = &protectionTrigger.Lkr
    return children
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ais"] = protectionTrigger.Ais
    return leafs
}

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetBundleName() string { return "cisco_ios_xr" }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetYangName() string { return "protection-trigger" }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) SetParent(parent types.Entity) { protectionTrigger.parent = parent }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetParent() types.Entity { return protectionTrigger.parent }

func (protectionTrigger *MplsTe_TransportProfile_Fault_ProtectionTrigger) GetParentYangName() string { return "fault" }

// MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi
// Protection switching due to LDI event
type MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable protection switching due to LDI event. The type is interface{}.
    Disable interface{}
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetFilter() yfilter.YFilter { return ldi.YFilter }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) SetFilter(yf yfilter.YFilter) { ldi.YFilter = yf }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetSegmentPath() string {
    return "ldi"
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = ldi.Disable
    return leafs
}

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetBundleName() string { return "cisco_ios_xr" }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetYangName() string { return "ldi" }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) SetParent(parent types.Entity) { ldi.parent = parent }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetParent() types.Entity { return ldi.parent }

func (ldi *MplsTe_TransportProfile_Fault_ProtectionTrigger_Ldi) GetParentYangName() string { return "protection-trigger" }

// MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr
// Protection switching due to LKR event
type MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable protection switching due to LKR event. The type is interface{}.
    Disable interface{}
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetFilter() yfilter.YFilter { return lkr.YFilter }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) SetFilter(yf yfilter.YFilter) { lkr.YFilter = yf }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetSegmentPath() string {
    return "lkr"
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = lkr.Disable
    return leafs
}

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetBundleName() string { return "cisco_ios_xr" }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetYangName() string { return "lkr" }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) SetParent(parent types.Entity) { lkr.parent = parent }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetParent() types.Entity { return lkr.parent }

func (lkr *MplsTe_TransportProfile_Fault_ProtectionTrigger_Lkr) GetParentYangName() string { return "protection-trigger" }

// MplsTe_TransportProfile_Alarm
// Alarm management
type MplsTe_TransportProfile_Alarm struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Duration of soaking alarms. The type is interface{} with range: 0..10.
    // Units are second. The default value is 3.
    SoakTime interface{}

    // Enable Transport Profile Alarm. The type is interface{}.
    EnableAlarm interface{}

    // Suppress all tunnel/LSP alarms.
    SuppressEvent MplsTe_TransportProfile_Alarm_SuppressEvent
}

func (alarm *MplsTe_TransportProfile_Alarm) GetFilter() yfilter.YFilter { return alarm.YFilter }

func (alarm *MplsTe_TransportProfile_Alarm) SetFilter(yf yfilter.YFilter) { alarm.YFilter = yf }

func (alarm *MplsTe_TransportProfile_Alarm) GetGoName(yname string) string {
    if yname == "soak-time" { return "SoakTime" }
    if yname == "enable-alarm" { return "EnableAlarm" }
    if yname == "suppress-event" { return "SuppressEvent" }
    return ""
}

func (alarm *MplsTe_TransportProfile_Alarm) GetSegmentPath() string {
    return "alarm"
}

func (alarm *MplsTe_TransportProfile_Alarm) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "suppress-event" {
        return &alarm.SuppressEvent
    }
    return nil
}

func (alarm *MplsTe_TransportProfile_Alarm) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["suppress-event"] = &alarm.SuppressEvent
    return children
}

func (alarm *MplsTe_TransportProfile_Alarm) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["soak-time"] = alarm.SoakTime
    leafs["enable-alarm"] = alarm.EnableAlarm
    return leafs
}

func (alarm *MplsTe_TransportProfile_Alarm) GetBundleName() string { return "cisco_ios_xr" }

func (alarm *MplsTe_TransportProfile_Alarm) GetYangName() string { return "alarm" }

func (alarm *MplsTe_TransportProfile_Alarm) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (alarm *MplsTe_TransportProfile_Alarm) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (alarm *MplsTe_TransportProfile_Alarm) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (alarm *MplsTe_TransportProfile_Alarm) SetParent(parent types.Entity) { alarm.parent = parent }

func (alarm *MplsTe_TransportProfile_Alarm) GetParent() types.Entity { return alarm.parent }

func (alarm *MplsTe_TransportProfile_Alarm) GetParentYangName() string { return "transport-profile" }

// MplsTe_TransportProfile_Alarm_SuppressEvent
// Suppress all tunnel/LSP alarms
type MplsTe_TransportProfile_Alarm_SuppressEvent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable alarm suppression. The type is interface{}.
    Disable interface{}
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetFilter() yfilter.YFilter { return suppressEvent.YFilter }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) SetFilter(yf yfilter.YFilter) { suppressEvent.YFilter = yf }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    return ""
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetSegmentPath() string {
    return "suppress-event"
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = suppressEvent.Disable
    return leafs
}

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetBundleName() string { return "cisco_ios_xr" }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetYangName() string { return "suppress-event" }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) SetParent(parent types.Entity) { suppressEvent.parent = parent }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetParent() types.Entity { return suppressEvent.parent }

func (suppressEvent *MplsTe_TransportProfile_Alarm_SuppressEvent) GetParentYangName() string { return "alarm" }

// MplsTe_TransportProfile_Bfd
// Configure BFD parameters
type MplsTe_TransportProfile_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier for standby transport profile LSP. The type is
    // interface{} with range: 2..10.
    DetectionMultiplierStandby interface{}

    // Detect multiplier. The type is interface{} with range: 2..10.
    DetectionMultiplier interface{}

    // Hello interval for standby transport profile LSPs, either in milli-seconds
    // or in micro-seconds.
    MinIntervalStandby MplsTe_TransportProfile_Bfd_MinIntervalStandby

    // Hello interval, either in milli-seconds or in micro-seconds.
    MinInterval MplsTe_TransportProfile_Bfd_MinInterval
}

func (bfd *MplsTe_TransportProfile_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *MplsTe_TransportProfile_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *MplsTe_TransportProfile_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier-standby" { return "DetectionMultiplierStandby" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "min-interval-standby" { return "MinIntervalStandby" }
    if yname == "min-interval" { return "MinInterval" }
    return ""
}

func (bfd *MplsTe_TransportProfile_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *MplsTe_TransportProfile_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "min-interval-standby" {
        return &bfd.MinIntervalStandby
    }
    if childYangName == "min-interval" {
        return &bfd.MinInterval
    }
    return nil
}

func (bfd *MplsTe_TransportProfile_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["min-interval-standby"] = &bfd.MinIntervalStandby
    children["min-interval"] = &bfd.MinInterval
    return children
}

func (bfd *MplsTe_TransportProfile_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier-standby"] = bfd.DetectionMultiplierStandby
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *MplsTe_TransportProfile_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *MplsTe_TransportProfile_Bfd) GetYangName() string { return "bfd" }

func (bfd *MplsTe_TransportProfile_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *MplsTe_TransportProfile_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *MplsTe_TransportProfile_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *MplsTe_TransportProfile_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *MplsTe_TransportProfile_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *MplsTe_TransportProfile_Bfd) GetParentYangName() string { return "transport-profile" }

// MplsTe_TransportProfile_Bfd_MinIntervalStandby
// Hello interval for standby transport profile
// LSPs, either in milli-seconds or in
// micro-seconds
type MplsTe_TransportProfile_Bfd_MinIntervalStandby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000. Units are millisecond.
    IntervalStandbyMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000. Units are microsecond.
    IntervalStandbyUs interface{}
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetFilter() yfilter.YFilter { return minIntervalStandby.YFilter }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) SetFilter(yf yfilter.YFilter) { minIntervalStandby.YFilter = yf }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetGoName(yname string) string {
    if yname == "interval-standby-ms" { return "IntervalStandbyMs" }
    if yname == "interval-standby-us" { return "IntervalStandbyUs" }
    return ""
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetSegmentPath() string {
    return "min-interval-standby"
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval-standby-ms"] = minIntervalStandby.IntervalStandbyMs
    leafs["interval-standby-us"] = minIntervalStandby.IntervalStandbyUs
    return leafs
}

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetBundleName() string { return "cisco_ios_xr" }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetYangName() string { return "min-interval-standby" }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) SetParent(parent types.Entity) { minIntervalStandby.parent = parent }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetParent() types.Entity { return minIntervalStandby.parent }

func (minIntervalStandby *MplsTe_TransportProfile_Bfd_MinIntervalStandby) GetParentYangName() string { return "bfd" }

// MplsTe_TransportProfile_Bfd_MinInterval
// Hello interval, either in milli-seconds or in
// micro-seconds
type MplsTe_TransportProfile_Bfd_MinInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..5000. Units are millisecond.
    IntervalMs interface{}

    // Hello interval in micro-seconds. The type is interface{} with range:
    // 3000..5000000. Units are microsecond.
    IntervalUs interface{}
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetFilter() yfilter.YFilter { return minInterval.YFilter }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) SetFilter(yf yfilter.YFilter) { minInterval.YFilter = yf }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetGoName(yname string) string {
    if yname == "interval-ms" { return "IntervalMs" }
    if yname == "interval-us" { return "IntervalUs" }
    return ""
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetSegmentPath() string {
    return "min-interval"
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval-ms"] = minInterval.IntervalMs
    leafs["interval-us"] = minInterval.IntervalUs
    return leafs
}

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetBundleName() string { return "cisco_ios_xr" }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetYangName() string { return "min-interval" }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) SetParent(parent types.Entity) { minInterval.parent = parent }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetParent() types.Entity { return minInterval.parent }

func (minInterval *MplsTe_TransportProfile_Bfd_MinInterval) GetParentYangName() string { return "bfd" }

// MplsTe_TransportProfile_Midpoints
// MPLS-TP tunnel mid-point table
type MplsTe_TransportProfile_Midpoints struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Transport profile mid-point identifier. The type is slice of
    // MplsTe_TransportProfile_Midpoints_Midpoint.
    Midpoint []MplsTe_TransportProfile_Midpoints_Midpoint
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetFilter() yfilter.YFilter { return midpoints.YFilter }

func (midpoints *MplsTe_TransportProfile_Midpoints) SetFilter(yf yfilter.YFilter) { midpoints.YFilter = yf }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetGoName(yname string) string {
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetSegmentPath() string {
    return "midpoints"
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "midpoint" {
        for _, c := range midpoints.Midpoint {
            if midpoints.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_TransportProfile_Midpoints_Midpoint{}
        midpoints.Midpoint = append(midpoints.Midpoint, child)
        return &midpoints.Midpoint[len(midpoints.Midpoint)-1]
    }
    return nil
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range midpoints.Midpoint {
        children[midpoints.Midpoint[i].GetSegmentPath()] = &midpoints.Midpoint[i]
    }
    return children
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (midpoints *MplsTe_TransportProfile_Midpoints) GetBundleName() string { return "cisco_ios_xr" }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetYangName() string { return "midpoints" }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoints *MplsTe_TransportProfile_Midpoints) SetParent(parent types.Entity) { midpoints.parent = parent }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetParent() types.Entity { return midpoints.parent }

func (midpoints *MplsTe_TransportProfile_Midpoints) GetParentYangName() string { return "transport-profile" }

// MplsTe_TransportProfile_Midpoints_Midpoint
// Transport profile mid-point identifier
type MplsTe_TransportProfile_Midpoints_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name of mid-point. The type is string with length:
    // 1..64.
    MidpointName interface{}

    // Tunnel Name. The type is string.
    TunnelName interface{}

    // Enable LSP protection. The type is interface{}.
    LspProtect interface{}

    // Numeric identifier. The type is interface{} with range: 0..65535.
    LspId interface{}

    // Node identifier, tunnel identifier and optional global identifier of the
    // source of the LSP.
    Source MplsTe_TransportProfile_Midpoints_Midpoint_Source

    // Node identifier, tunnel identifier and optional global identifier of the
    // destination of the LSP.
    Destination MplsTe_TransportProfile_Midpoints_Midpoint_Destination

    // Forward transport profile LSP.
    ForwardLsp MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp

    // none.
    ReverseLsp MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetGoName(yname string) string {
    if yname == "midpoint-name" { return "MidpointName" }
    if yname == "tunnel-name" { return "TunnelName" }
    if yname == "lsp-protect" { return "LspProtect" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "source" { return "Source" }
    if yname == "destination" { return "Destination" }
    if yname == "forward-lsp" { return "ForwardLsp" }
    if yname == "reverse-lsp" { return "ReverseLsp" }
    return ""
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetSegmentPath() string {
    return "midpoint" + "[midpoint-name='" + fmt.Sprintf("%v", midpoint.MidpointName) + "']"
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source" {
        return &midpoint.Source
    }
    if childYangName == "destination" {
        return &midpoint.Destination
    }
    if childYangName == "forward-lsp" {
        return &midpoint.ForwardLsp
    }
    if childYangName == "reverse-lsp" {
        return &midpoint.ReverseLsp
    }
    return nil
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source"] = &midpoint.Source
    children["destination"] = &midpoint.Destination
    children["forward-lsp"] = &midpoint.ForwardLsp
    children["reverse-lsp"] = &midpoint.ReverseLsp
    return children
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["midpoint-name"] = midpoint.MidpointName
    leafs["tunnel-name"] = midpoint.TunnelName
    leafs["lsp-protect"] = midpoint.LspProtect
    leafs["lsp-id"] = midpoint.LspId
    return leafs
}

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsTe_TransportProfile_Midpoints_Midpoint) GetParentYangName() string { return "midpoints" }

// MplsTe_TransportProfile_Midpoints_Midpoint_Source
// Node identifier, tunnel identifier and
// optional global identifier of the source of
// the LSP
// This type is a presence type.
type MplsTe_TransportProfile_Midpoints_Midpoint_Source struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node identifier in IPv4 address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // Tunnel identifier in numeric value. The type is interface{} with range:
    // 0..65535. This attribute is mandatory.
    TunnelId interface{}

    // Global identifier in numeric value. The type is interface{} with range:
    // 1..65535.
    GlobalId interface{}
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetFilter() yfilter.YFilter { return source.YFilter }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) SetFilter(yf yfilter.YFilter) { source.YFilter = yf }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "global-id" { return "GlobalId" }
    return ""
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetSegmentPath() string {
    return "source"
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = source.NodeId
    leafs["tunnel-id"] = source.TunnelId
    leafs["global-id"] = source.GlobalId
    return leafs
}

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetBundleName() string { return "cisco_ios_xr" }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetYangName() string { return "source" }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) SetParent(parent types.Entity) { source.parent = parent }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetParent() types.Entity { return source.parent }

func (source *MplsTe_TransportProfile_Midpoints_Midpoint_Source) GetParentYangName() string { return "midpoint" }

// MplsTe_TransportProfile_Midpoints_Midpoint_Destination
// Node identifier, tunnel identifier and
// optional global identifier of the destination
// of the LSP
// This type is a presence type.
type MplsTe_TransportProfile_Midpoints_Midpoint_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node identifier in IPv4 address format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // Tunnel identifier in numeric value. The type is interface{} with range:
    // 0..65535. This attribute is mandatory.
    TunnelId interface{}

    // Global identifier in numeric value. The type is interface{} with range:
    // 1..65535.
    GlobalId interface{}
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "global-id" { return "GlobalId" }
    return ""
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetSegmentPath() string {
    return "destination"
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = destination.NodeId
    leafs["tunnel-id"] = destination.TunnelId
    leafs["global-id"] = destination.GlobalId
    return leafs
}

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetYangName() string { return "destination" }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetParent() types.Entity { return destination.parent }

func (destination *MplsTe_TransportProfile_Midpoints_Midpoint_Destination) GetParentYangName() string { return "midpoint" }

// MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp
// Forward transport profile LSP
type MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth of forward transport profile LSP. The type is interface{} with
    // range: 0..4294967295. Units are kbit/s.
    ForwardBandwidth interface{}

    // Label cross-connect of forward transport profile LSP.
    ForwardIoMap MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetFilter() yfilter.YFilter { return forwardLsp.YFilter }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) SetFilter(yf yfilter.YFilter) { forwardLsp.YFilter = yf }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetGoName(yname string) string {
    if yname == "forward-bandwidth" { return "ForwardBandwidth" }
    if yname == "forward-io-map" { return "ForwardIoMap" }
    return ""
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetSegmentPath() string {
    return "forward-lsp"
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forward-io-map" {
        return &forwardLsp.ForwardIoMap
    }
    return nil
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forward-io-map"] = &forwardLsp.ForwardIoMap
    return children
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["forward-bandwidth"] = forwardLsp.ForwardBandwidth
    return leafs
}

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetBundleName() string { return "cisco_ios_xr" }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetYangName() string { return "forward-lsp" }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) SetParent(parent types.Entity) { forwardLsp.parent = parent }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetParent() types.Entity { return forwardLsp.parent }

func (forwardLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp) GetParentYangName() string { return "midpoint" }

// MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap
// Label cross-connect of forward transport
// profile LSP
// This type is a presence type.
type MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..4015.
    InLabel interface{}

    // Outgoing MPLS label. The type is interface{} with range: 16..1048575. This
    // attribute is mandatory.
    OutLabel interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    OutLink interface{}
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetFilter() yfilter.YFilter { return forwardIoMap.YFilter }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) SetFilter(yf yfilter.YFilter) { forwardIoMap.YFilter = yf }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetGoName(yname string) string {
    if yname == "in-label" { return "InLabel" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-link" { return "OutLink" }
    return ""
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetSegmentPath() string {
    return "forward-io-map"
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-label"] = forwardIoMap.InLabel
    leafs["out-label"] = forwardIoMap.OutLabel
    leafs["out-link"] = forwardIoMap.OutLink
    return leafs
}

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetBundleName() string { return "cisco_ios_xr" }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetYangName() string { return "forward-io-map" }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) SetParent(parent types.Entity) { forwardIoMap.parent = parent }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetParent() types.Entity { return forwardIoMap.parent }

func (forwardIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ForwardLsp_ForwardIoMap) GetParentYangName() string { return "forward-lsp" }

// MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp
// none
type MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth of reverse transport profile LSP. The type is interface{} with
    // range: 0..4294967295. Units are kbit/s.
    ReverseBandwidth interface{}

    // Label cross-connect of reverse transport profile LSP.
    ReverseIoMap MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetFilter() yfilter.YFilter { return reverseLsp.YFilter }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) SetFilter(yf yfilter.YFilter) { reverseLsp.YFilter = yf }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetGoName(yname string) string {
    if yname == "reverse-bandwidth" { return "ReverseBandwidth" }
    if yname == "reverse-io-map" { return "ReverseIoMap" }
    return ""
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetSegmentPath() string {
    return "reverse-lsp"
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "reverse-io-map" {
        return &reverseLsp.ReverseIoMap
    }
    return nil
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["reverse-io-map"] = &reverseLsp.ReverseIoMap
    return children
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reverse-bandwidth"] = reverseLsp.ReverseBandwidth
    return leafs
}

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetBundleName() string { return "cisco_ios_xr" }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetYangName() string { return "reverse-lsp" }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) SetParent(parent types.Entity) { reverseLsp.parent = parent }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetParent() types.Entity { return reverseLsp.parent }

func (reverseLsp *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp) GetParentYangName() string { return "midpoint" }

// MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap
// Label cross-connect of reverse transport
// profile LSP
// This type is a presence type.
type MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS label. The type is interface{} with range: 16..4015.
    InLabel interface{}

    // Outgoing MPLS label. The type is interface{} with range: 16..1048575. This
    // attribute is mandatory.
    OutLabel interface{}

    // Transport profile identifier of outgoing link. The type is interface{} with
    // range: 1..65535. This attribute is mandatory.
    OutLink interface{}
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetFilter() yfilter.YFilter { return reverseIoMap.YFilter }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) SetFilter(yf yfilter.YFilter) { reverseIoMap.YFilter = yf }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetGoName(yname string) string {
    if yname == "in-label" { return "InLabel" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-link" { return "OutLink" }
    return ""
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetSegmentPath() string {
    return "reverse-io-map"
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["in-label"] = reverseIoMap.InLabel
    leafs["out-label"] = reverseIoMap.OutLabel
    leafs["out-link"] = reverseIoMap.OutLink
    return leafs
}

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetBundleName() string { return "cisco_ios_xr" }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetYangName() string { return "reverse-io-map" }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) SetParent(parent types.Entity) { reverseIoMap.parent = parent }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetParent() types.Entity { return reverseIoMap.parent }

func (reverseIoMap *MplsTe_TransportProfile_Midpoints_Midpoint_ReverseLsp_ReverseIoMap) GetParentYangName() string { return "reverse-lsp" }

// MplsTe_Interfaces
// Configure MPLS TE interfaces
type MplsTe_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure an MPLS TE interface. The type is slice of
    // MplsTe_Interfaces_Interface.
    Interface []MplsTe_Interfaces_Interface
}

func (interfaces *MplsTe_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *MplsTe_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *MplsTe_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *MplsTe_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *MplsTe_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *MplsTe_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *MplsTe_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *MplsTe_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *MplsTe_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *MplsTe_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *MplsTe_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *MplsTe_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *MplsTe_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *MplsTe_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *MplsTe_Interfaces) GetParentYangName() string { return "mpls-te" }

// MplsTe_Interfaces_Interface
// Configure an MPLS TE interface
type MplsTe_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // MPLS transport profile capable link.
    TransportProfileLink MplsTe_Interfaces_Interface_TransportProfileLink

    // LCAC specific MPLS interface configuration.
    Lcac MplsTe_Interfaces_Interface_Lcac

    // MPLS TE global interface configuration.
    GlobalAttributes MplsTe_Interfaces_Interface_GlobalAttributes
}

func (self *MplsTe_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *MplsTe_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *MplsTe_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "transport-profile-link" { return "TransportProfileLink" }
    if yname == "lcac" { return "Lcac" }
    if yname == "global-attributes" { return "GlobalAttributes" }
    return ""
}

func (self *MplsTe_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *MplsTe_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transport-profile-link" {
        return &self.TransportProfileLink
    }
    if childYangName == "lcac" {
        return &self.Lcac
    }
    if childYangName == "global-attributes" {
        return &self.GlobalAttributes
    }
    return nil
}

func (self *MplsTe_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transport-profile-link"] = &self.TransportProfileLink
    children["lcac"] = &self.Lcac
    children["global-attributes"] = &self.GlobalAttributes
    return children
}

func (self *MplsTe_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *MplsTe_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *MplsTe_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *MplsTe_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *MplsTe_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *MplsTe_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *MplsTe_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *MplsTe_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *MplsTe_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// MplsTe_Interfaces_Interface_TransportProfileLink
// MPLS transport profile capable link
type MplsTe_Interfaces_Interface_TransportProfileLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Transport profile link table.
    Links MplsTe_Interfaces_Interface_TransportProfileLink_Links
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetFilter() yfilter.YFilter { return transportProfileLink.YFilter }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) SetFilter(yf yfilter.YFilter) { transportProfileLink.YFilter = yf }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    return ""
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetSegmentPath() string {
    return "transport-profile-link"
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "links" {
        return &transportProfileLink.Links
    }
    return nil
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["links"] = &transportProfileLink.Links
    return children
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetBundleName() string { return "cisco_ios_xr" }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetYangName() string { return "transport-profile-link" }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) SetParent(parent types.Entity) { transportProfileLink.parent = parent }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetParent() types.Entity { return transportProfileLink.parent }

func (transportProfileLink *MplsTe_Interfaces_Interface_TransportProfileLink) GetParentYangName() string { return "interface" }

// MplsTe_Interfaces_Interface_TransportProfileLink_Links
// Transport profile link table
type MplsTe_Interfaces_Interface_TransportProfileLink_Links struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Transport profile link. The type is slice of
    // MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link.
    Link []MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetFilter() yfilter.YFilter { return links.YFilter }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) SetFilter(yf yfilter.YFilter) { links.YFilter = yf }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetGoName(yname string) string {
    if yname == "link" { return "Link" }
    return ""
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetSegmentPath() string {
    return "links"
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link" {
        for _, c := range links.Link {
            if links.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link{}
        links.Link = append(links.Link, child)
        return &links.Link[len(links.Link)-1]
    }
    return nil
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range links.Link {
        children[links.Link[i].GetSegmentPath()] = &links.Link[i]
    }
    return children
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetBundleName() string { return "cisco_ios_xr" }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetYangName() string { return "links" }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) SetParent(parent types.Entity) { links.parent = parent }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetParent() types.Entity { return links.parent }

func (links *MplsTe_Interfaces_Interface_TransportProfileLink_Links) GetParentYangName() string { return "transport-profile-link" }

// MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link
// Transport profile link
type MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Numeric link identifier. The type is interface{}
    // with range: 1..65535.
    LinkId interface{}

    // Next hop type. The type is LinkNextHop. The default value is ipv4-address.
    NextHopType interface{}

    // Next-hop address in IPv4 format. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NextHopAddress interface{}
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetGoName(yname string) string {
    if yname == "link-id" { return "LinkId" }
    if yname == "next-hop-type" { return "NextHopType" }
    if yname == "next-hop-address" { return "NextHopAddress" }
    return ""
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetSegmentPath() string {
    return "link" + "[link-id='" + fmt.Sprintf("%v", link.LinkId) + "']"
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-id"] = link.LinkId
    leafs["next-hop-type"] = link.NextHopType
    leafs["next-hop-address"] = link.NextHopAddress
    return leafs
}

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetYangName() string { return "link" }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetParent() types.Entity { return link.parent }

func (link *MplsTe_Interfaces_Interface_TransportProfileLink_Links_Link) GetParentYangName() string { return "links" }

// MplsTe_Interfaces_Interface_Lcac
// LCAC specific MPLS interface configuration
type MplsTe_Interfaces_Interface_Lcac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable use of Bidirectional Forwarding Detection. The type is interface{}.
    Bfd interface{}

    // Lockout protection on the interface for Flex LSP. The type is interface{}.
    FaultOamLockout interface{}

    // Set user defined interface attribute flags. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    AttributeFlags interface{}

    // Enable MPLS-TE on the link. The type is interface{}.
    Enable interface{}

    // Set administrative weight for the interface. The type is interface{} with
    // range: -2147483648..2147483647.
    AdminWeight interface{}

    // Set the te-link switching attributes.
    Switchings MplsTe_Interfaces_Interface_Lcac_Switchings

    // Set the IGP instance into which this interface is to be flooded (GMPLS
    // only).
    FloodArea MplsTe_Interfaces_Interface_Lcac_FloodArea

    // Set the interface attribute names.
    AttributeNameXr MplsTe_Interfaces_Interface_Lcac_AttributeNameXr

    // Attribute name table.
    AttributeNames MplsTe_Interfaces_Interface_Lcac_AttributeNames

    // Configure SRLG membership for the interface.
    Srlgs MplsTe_Interfaces_Interface_Lcac_Srlgs

    // Set thresholds for increased resource availability in %.
    UpThresholds MplsTe_Interfaces_Interface_Lcac_UpThresholds

    // Set thresholds for decreased resource availability in %.
    DownThresholds MplsTe_Interfaces_Interface_Lcac_DownThresholds
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetFilter() yfilter.YFilter { return lcac.YFilter }

func (lcac *MplsTe_Interfaces_Interface_Lcac) SetFilter(yf yfilter.YFilter) { lcac.YFilter = yf }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetGoName(yname string) string {
    if yname == "bfd" { return "Bfd" }
    if yname == "fault-oam-lockout" { return "FaultOamLockout" }
    if yname == "attribute-flags" { return "AttributeFlags" }
    if yname == "enable" { return "Enable" }
    if yname == "admin-weight" { return "AdminWeight" }
    if yname == "switchings" { return "Switchings" }
    if yname == "flood-area" { return "FloodArea" }
    if yname == "attribute-name-xr" { return "AttributeNameXr" }
    if yname == "attribute-names" { return "AttributeNames" }
    if yname == "srlgs" { return "Srlgs" }
    if yname == "up-thresholds" { return "UpThresholds" }
    if yname == "down-thresholds" { return "DownThresholds" }
    return ""
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetSegmentPath() string {
    return "lcac"
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "switchings" {
        return &lcac.Switchings
    }
    if childYangName == "flood-area" {
        return &lcac.FloodArea
    }
    if childYangName == "attribute-name-xr" {
        return &lcac.AttributeNameXr
    }
    if childYangName == "attribute-names" {
        return &lcac.AttributeNames
    }
    if childYangName == "srlgs" {
        return &lcac.Srlgs
    }
    if childYangName == "up-thresholds" {
        return &lcac.UpThresholds
    }
    if childYangName == "down-thresholds" {
        return &lcac.DownThresholds
    }
    return nil
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["switchings"] = &lcac.Switchings
    children["flood-area"] = &lcac.FloodArea
    children["attribute-name-xr"] = &lcac.AttributeNameXr
    children["attribute-names"] = &lcac.AttributeNames
    children["srlgs"] = &lcac.Srlgs
    children["up-thresholds"] = &lcac.UpThresholds
    children["down-thresholds"] = &lcac.DownThresholds
    return children
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd"] = lcac.Bfd
    leafs["fault-oam-lockout"] = lcac.FaultOamLockout
    leafs["attribute-flags"] = lcac.AttributeFlags
    leafs["enable"] = lcac.Enable
    leafs["admin-weight"] = lcac.AdminWeight
    return leafs
}

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetBundleName() string { return "cisco_ios_xr" }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetYangName() string { return "lcac" }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcac *MplsTe_Interfaces_Interface_Lcac) SetParent(parent types.Entity) { lcac.parent = parent }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetParent() types.Entity { return lcac.parent }

func (lcac *MplsTe_Interfaces_Interface_Lcac) GetParentYangName() string { return "interface" }

// MplsTe_Interfaces_Interface_Lcac_Switchings
// Set the te-link switching attributes
type MplsTe_Interfaces_Interface_Lcac_Switchings struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The te-link switching attributes. The type is slice of
    // MplsTe_Interfaces_Interface_Lcac_Switchings_Switching.
    Switching []MplsTe_Interfaces_Interface_Lcac_Switchings_Switching
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetFilter() yfilter.YFilter { return switchings.YFilter }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) SetFilter(yf yfilter.YFilter) { switchings.YFilter = yf }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetGoName(yname string) string {
    if yname == "switching" { return "Switching" }
    return ""
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetSegmentPath() string {
    return "switchings"
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "switching" {
        for _, c := range switchings.Switching {
            if switchings.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_Lcac_Switchings_Switching{}
        switchings.Switching = append(switchings.Switching, child)
        return &switchings.Switching[len(switchings.Switching)-1]
    }
    return nil
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range switchings.Switching {
        children[switchings.Switching[i].GetSegmentPath()] = &switchings.Switching[i]
    }
    return children
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetBundleName() string { return "cisco_ios_xr" }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetYangName() string { return "switchings" }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) SetParent(parent types.Entity) { switchings.parent = parent }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetParent() types.Entity { return switchings.parent }

func (switchings *MplsTe_Interfaces_Interface_Lcac_Switchings) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_Switchings_Switching
// The te-link switching attributes
type MplsTe_Interfaces_Interface_Lcac_Switchings_Switching struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Switching index. The type is one of the following
    // types: enumeration MplsTeSwitchingIndex, or int with range: 1..255.
    SwitchingId interface{}

    // Set the local encoding type. The type is MplsTeSwitchingEncoding.
    Encoding interface{}

    // Set the local switching capability. The type is MplsTeSwitchingCap.
    Capability interface{}
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetFilter() yfilter.YFilter { return switching.YFilter }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) SetFilter(yf yfilter.YFilter) { switching.YFilter = yf }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetGoName(yname string) string {
    if yname == "switching-id" { return "SwitchingId" }
    if yname == "encoding" { return "Encoding" }
    if yname == "capability" { return "Capability" }
    return ""
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetSegmentPath() string {
    return "switching" + "[switching-id='" + fmt.Sprintf("%v", switching.SwitchingId) + "']"
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["switching-id"] = switching.SwitchingId
    leafs["encoding"] = switching.Encoding
    leafs["capability"] = switching.Capability
    return leafs
}

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetBundleName() string { return "cisco_ios_xr" }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetYangName() string { return "switching" }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) SetParent(parent types.Entity) { switching.parent = parent }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetParent() types.Entity { return switching.parent }

func (switching *MplsTe_Interfaces_Interface_Lcac_Switchings_Switching) GetParentYangName() string { return "switchings" }

// MplsTe_Interfaces_Interface_Lcac_FloodArea
// Set the IGP instance into which this
// interface is to be flooded (GMPLS only)
type MplsTe_Interfaces_Interface_Lcac_FloodArea struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IGP type. The type is MplsLcacFloodingIgp.
    IgpType interface{}

    // Process name. The type is string with length: 1..32.
    ProcessName interface{}

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetFilter() yfilter.YFilter { return floodArea.YFilter }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) SetFilter(yf yfilter.YFilter) { floodArea.YFilter = yf }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetGoName(yname string) string {
    if yname == "igp-type" { return "IgpType" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "area-id" { return "AreaId" }
    return ""
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetSegmentPath() string {
    return "flood-area"
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["igp-type"] = floodArea.IgpType
    leafs["process-name"] = floodArea.ProcessName
    leafs["area-id"] = floodArea.AreaId
    return leafs
}

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetBundleName() string { return "cisco_ios_xr" }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetYangName() string { return "flood-area" }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) SetParent(parent types.Entity) { floodArea.parent = parent }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetParent() types.Entity { return floodArea.parent }

func (floodArea *MplsTe_Interfaces_Interface_Lcac_FloodArea) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_AttributeNameXr
// Set the interface attribute names
type MplsTe_Interfaces_Interface_Lcac_AttributeNameXr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of Attribute Names. The type is slice of string.
    AttributeName []interface{}
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetFilter() yfilter.YFilter { return attributeNameXr.YFilter }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) SetFilter(yf yfilter.YFilter) { attributeNameXr.YFilter = yf }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetGoName(yname string) string {
    if yname == "attribute-name" { return "AttributeName" }
    return ""
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetSegmentPath() string {
    return "attribute-name-xr"
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-name"] = attributeNameXr.AttributeName
    return leafs
}

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetBundleName() string { return "cisco_ios_xr" }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetYangName() string { return "attribute-name-xr" }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) SetParent(parent types.Entity) { attributeNameXr.parent = parent }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetParent() types.Entity { return attributeNameXr.parent }

func (attributeNameXr *MplsTe_Interfaces_Interface_Lcac_AttributeNameXr) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_AttributeNames
// Attribute name table
type MplsTe_Interfaces_Interface_Lcac_AttributeNames struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set the interface attribute names. The type is slice of
    // MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName.
    AttributeName []MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetFilter() yfilter.YFilter { return attributeNames.YFilter }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) SetFilter(yf yfilter.YFilter) { attributeNames.YFilter = yf }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetGoName(yname string) string {
    if yname == "attribute-name" { return "AttributeName" }
    return ""
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetSegmentPath() string {
    return "attribute-names"
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attribute-name" {
        for _, c := range attributeNames.AttributeName {
            if attributeNames.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName{}
        attributeNames.AttributeName = append(attributeNames.AttributeName, child)
        return &attributeNames.AttributeName[len(attributeNames.AttributeName)-1]
    }
    return nil
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range attributeNames.AttributeName {
        children[attributeNames.AttributeName[i].GetSegmentPath()] = &attributeNames.AttributeName[i]
    }
    return children
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetBundleName() string { return "cisco_ios_xr" }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetYangName() string { return "attribute-names" }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) SetParent(parent types.Entity) { attributeNames.parent = parent }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetParent() types.Entity { return attributeNames.parent }

func (attributeNames *MplsTe_Interfaces_Interface_Lcac_AttributeNames) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName
// Set the interface attribute names
type MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specify the entry index. The type is interface{}
    // with range: 1..9.
    AffinityIndex interface{}

    // Array of Attribute Names. The type is slice of string.
    Value []interface{}
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetFilter() yfilter.YFilter { return attributeName.YFilter }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) SetFilter(yf yfilter.YFilter) { attributeName.YFilter = yf }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetGoName(yname string) string {
    if yname == "affinity-index" { return "AffinityIndex" }
    if yname == "value" { return "Value" }
    return ""
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetSegmentPath() string {
    return "attribute-name" + "[affinity-index='" + fmt.Sprintf("%v", attributeName.AffinityIndex) + "']"
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["affinity-index"] = attributeName.AffinityIndex
    leafs["value"] = attributeName.Value
    return leafs
}

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetBundleName() string { return "cisco_ios_xr" }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetYangName() string { return "attribute-name" }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) SetParent(parent types.Entity) { attributeName.parent = parent }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetParent() types.Entity { return attributeName.parent }

func (attributeName *MplsTe_Interfaces_Interface_Lcac_AttributeNames_AttributeName) GetParentYangName() string { return "attribute-names" }

// MplsTe_Interfaces_Interface_Lcac_Srlgs
// Configure SRLG membership for the interface
type MplsTe_Interfaces_Interface_Lcac_Srlgs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SRLG membership number. The type is slice of
    // MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg.
    Srlg []MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetFilter() yfilter.YFilter { return srlgs.YFilter }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) SetFilter(yf yfilter.YFilter) { srlgs.YFilter = yf }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetGoName(yname string) string {
    if yname == "srlg" { return "Srlg" }
    return ""
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetSegmentPath() string {
    return "srlgs"
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "srlg" {
        for _, c := range srlgs.Srlg {
            if srlgs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg{}
        srlgs.Srlg = append(srlgs.Srlg, child)
        return &srlgs.Srlg[len(srlgs.Srlg)-1]
    }
    return nil
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range srlgs.Srlg {
        children[srlgs.Srlg[i].GetSegmentPath()] = &srlgs.Srlg[i]
    }
    return children
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetBundleName() string { return "cisco_ios_xr" }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetYangName() string { return "srlgs" }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) SetParent(parent types.Entity) { srlgs.parent = parent }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetParent() types.Entity { return srlgs.parent }

func (srlgs *MplsTe_Interfaces_Interface_Lcac_Srlgs) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg
// SRLG membership number
type MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. SRLG membership number. The type is interface{}
    // with range: 0..4294967295.
    SrlgNumber interface{}
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetFilter() yfilter.YFilter { return srlg.YFilter }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) SetFilter(yf yfilter.YFilter) { srlg.YFilter = yf }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetGoName(yname string) string {
    if yname == "srlg-number" { return "SrlgNumber" }
    return ""
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetSegmentPath() string {
    return "srlg" + "[srlg-number='" + fmt.Sprintf("%v", srlg.SrlgNumber) + "']"
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srlg-number"] = srlg.SrlgNumber
    return leafs
}

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetBundleName() string { return "cisco_ios_xr" }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetYangName() string { return "srlg" }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) SetParent(parent types.Entity) { srlg.parent = parent }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetParent() types.Entity { return srlg.parent }

func (srlg *MplsTe_Interfaces_Interface_Lcac_Srlgs_Srlg) GetParentYangName() string { return "srlgs" }

// MplsTe_Interfaces_Interface_Lcac_UpThresholds
// Set thresholds for increased resource
// availability in %
type MplsTe_Interfaces_Interface_Lcac_UpThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of up threshold percentage. The type is slice of interface{} with
    // range: 0..100. Units are percentage.
    UpThreshold []interface{}
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetFilter() yfilter.YFilter { return upThresholds.YFilter }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) SetFilter(yf yfilter.YFilter) { upThresholds.YFilter = yf }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetGoName(yname string) string {
    if yname == "up-threshold" { return "UpThreshold" }
    return ""
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetSegmentPath() string {
    return "up-thresholds"
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["up-threshold"] = upThresholds.UpThreshold
    return leafs
}

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetYangName() string { return "up-thresholds" }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) SetParent(parent types.Entity) { upThresholds.parent = parent }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetParent() types.Entity { return upThresholds.parent }

func (upThresholds *MplsTe_Interfaces_Interface_Lcac_UpThresholds) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_Lcac_DownThresholds
// Set thresholds for decreased resource
// availability in %
type MplsTe_Interfaces_Interface_Lcac_DownThresholds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Array of down threshold percentage. The type is slice of interface{} with
    // range: 0..100. Units are percentage.
    DownThreshold []interface{}
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetFilter() yfilter.YFilter { return downThresholds.YFilter }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) SetFilter(yf yfilter.YFilter) { downThresholds.YFilter = yf }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetGoName(yname string) string {
    if yname == "down-threshold" { return "DownThreshold" }
    return ""
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetSegmentPath() string {
    return "down-thresholds"
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["down-threshold"] = downThresholds.DownThreshold
    return leafs
}

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetBundleName() string { return "cisco_ios_xr" }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetYangName() string { return "down-thresholds" }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) SetParent(parent types.Entity) { downThresholds.parent = parent }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetParent() types.Entity { return downThresholds.parent }

func (downThresholds *MplsTe_Interfaces_Interface_Lcac_DownThresholds) GetParentYangName() string { return "lcac" }

// MplsTe_Interfaces_Interface_GlobalAttributes
// MPLS TE global interface configuration
type MplsTe_Interfaces_Interface_GlobalAttributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure MPLS TE backup tunnels for this interface.
    BackupTunnels MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels

    // Auto tunnel configuration.
    AutoTunnel MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel

    // Configure MPLS TE backup tunnels for this interface.
    BackupPaths MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetFilter() yfilter.YFilter { return globalAttributes.YFilter }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) SetFilter(yf yfilter.YFilter) { globalAttributes.YFilter = yf }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetGoName(yname string) string {
    if yname == "backup-tunnels" { return "BackupTunnels" }
    if yname == "auto-tunnel" { return "AutoTunnel" }
    if yname == "backup-paths" { return "BackupPaths" }
    return ""
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetSegmentPath() string {
    return "global-attributes"
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-tunnels" {
        return &globalAttributes.BackupTunnels
    }
    if childYangName == "auto-tunnel" {
        return &globalAttributes.AutoTunnel
    }
    if childYangName == "backup-paths" {
        return &globalAttributes.BackupPaths
    }
    return nil
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup-tunnels"] = &globalAttributes.BackupTunnels
    children["auto-tunnel"] = &globalAttributes.AutoTunnel
    children["backup-paths"] = &globalAttributes.BackupPaths
    return children
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetBundleName() string { return "cisco_ios_xr" }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetYangName() string { return "global-attributes" }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) SetParent(parent types.Entity) { globalAttributes.parent = parent }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetParent() types.Entity { return globalAttributes.parent }

func (globalAttributes *MplsTe_Interfaces_Interface_GlobalAttributes) GetParentYangName() string { return "interface" }

// MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels
// Configure MPLS TE backup tunnels for this
// interface
type MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel name. The type is slice of
    // MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel.
    BackupTunnel []MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetFilter() yfilter.YFilter { return backupTunnels.YFilter }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) SetFilter(yf yfilter.YFilter) { backupTunnels.YFilter = yf }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetGoName(yname string) string {
    if yname == "backup-tunnel" { return "BackupTunnel" }
    return ""
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetSegmentPath() string {
    return "backup-tunnels"
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-tunnel" {
        for _, c := range backupTunnels.BackupTunnel {
            if backupTunnels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel{}
        backupTunnels.BackupTunnel = append(backupTunnels.BackupTunnel, child)
        return &backupTunnels.BackupTunnel[len(backupTunnels.BackupTunnel)-1]
    }
    return nil
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupTunnels.BackupTunnel {
        children[backupTunnels.BackupTunnel[i].GetSegmentPath()] = &backupTunnels.BackupTunnel[i]
    }
    return children
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetBundleName() string { return "cisco_ios_xr" }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetYangName() string { return "backup-tunnels" }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) SetParent(parent types.Entity) { backupTunnels.parent = parent }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetParent() types.Entity { return backupTunnels.parent }

func (backupTunnels *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels) GetParentYangName() string { return "global-attributes" }

// MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel
// Tunnel name
type MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel name. The type is string with length:
    // 1..59.
    TunnelName interface{}
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetFilter() yfilter.YFilter { return backupTunnel.YFilter }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) SetFilter(yf yfilter.YFilter) { backupTunnel.YFilter = yf }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetGoName(yname string) string {
    if yname == "tunnel-name" { return "TunnelName" }
    return ""
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetSegmentPath() string {
    return "backup-tunnel" + "[tunnel-name='" + fmt.Sprintf("%v", backupTunnel.TunnelName) + "']"
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-name"] = backupTunnel.TunnelName
    return leafs
}

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetYangName() string { return "backup-tunnel" }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) SetParent(parent types.Entity) { backupTunnel.parent = parent }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetParent() types.Entity { return backupTunnel.parent }

func (backupTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_BackupTunnels_BackupTunnel) GetParentYangName() string { return "backup-tunnels" }

// MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel
// Auto tunnel configuration
type MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Auto tunnel backup configuration.
    Backup MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetFilter() yfilter.YFilter { return autoTunnel.YFilter }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) SetFilter(yf yfilter.YFilter) { autoTunnel.YFilter = yf }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetGoName(yname string) string {
    if yname == "backup" { return "Backup" }
    return ""
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetSegmentPath() string {
    return "auto-tunnel"
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup" {
        return &autoTunnel.Backup
    }
    return nil
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["backup"] = &autoTunnel.Backup
    return children
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetBundleName() string { return "cisco_ios_xr" }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetYangName() string { return "auto-tunnel" }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) SetParent(parent types.Entity) { autoTunnel.parent = parent }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetParent() types.Entity { return autoTunnel.parent }

func (autoTunnel *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel) GetParentYangName() string { return "global-attributes" }

// MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup
// Auto tunnel backup configuration
type MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable auto-tunnel backup on this TE link. The type is interface{}.
    Enable interface{}

    // The name of attribute set to be applied to this auto backup lsp. The type
    // is string with length: 1..64.
    AttributeSet interface{}

    // Enable NHOP-only mode for auto-tunnel backup on this TE link. The type is
    // interface{}.
    NextHopOnly interface{}

    // Auto-tunnel backup exclusion criteria.
    Exclude MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetFilter() yfilter.YFilter { return backup.YFilter }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) SetFilter(yf yfilter.YFilter) { backup.YFilter = yf }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "attribute-set" { return "AttributeSet" }
    if yname == "next-hop-only" { return "NextHopOnly" }
    if yname == "exclude" { return "Exclude" }
    return ""
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetSegmentPath() string {
    return "backup"
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude" {
        return &backup.Exclude
    }
    return nil
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["exclude"] = &backup.Exclude
    return children
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = backup.Enable
    leafs["attribute-set"] = backup.AttributeSet
    leafs["next-hop-only"] = backup.NextHopOnly
    return leafs
}

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetBundleName() string { return "cisco_ios_xr" }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetYangName() string { return "backup" }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) SetParent(parent types.Entity) { backup.parent = parent }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetParent() types.Entity { return backup.parent }

func (backup *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup) GetParentYangName() string { return "auto-tunnel" }

// MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude
// Auto-tunnel backup exclusion criteria
type MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set exclude SRLG mode for auto-tunnel backup on this TE link. The type is
    // MplsTesrlgExclude.
    SrlgMode interface{}
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetFilter() yfilter.YFilter { return exclude.YFilter }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) SetFilter(yf yfilter.YFilter) { exclude.YFilter = yf }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetGoName(yname string) string {
    if yname == "srlg-mode" { return "SrlgMode" }
    return ""
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetSegmentPath() string {
    return "exclude"
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srlg-mode"] = exclude.SrlgMode
    return leafs
}

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetBundleName() string { return "cisco_ios_xr" }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetYangName() string { return "exclude" }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) SetParent(parent types.Entity) { exclude.parent = parent }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetParent() types.Entity { return exclude.parent }

func (exclude *MplsTe_Interfaces_Interface_GlobalAttributes_AutoTunnel_Backup_Exclude) GetParentYangName() string { return "backup" }

// MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths
// Configure MPLS TE backup tunnels for this
// interface
type MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface number. The type is slice of
    // MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath.
    BackupPath []MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetFilter() yfilter.YFilter { return backupPaths.YFilter }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) SetFilter(yf yfilter.YFilter) { backupPaths.YFilter = yf }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetGoName(yname string) string {
    if yname == "backup-path" { return "BackupPath" }
    return ""
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetSegmentPath() string {
    return "backup-paths"
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "backup-path" {
        for _, c := range backupPaths.BackupPath {
            if backupPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath{}
        backupPaths.BackupPath = append(backupPaths.BackupPath, child)
        return &backupPaths.BackupPath[len(backupPaths.BackupPath)-1]
    }
    return nil
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range backupPaths.BackupPath {
        children[backupPaths.BackupPath[i].GetSegmentPath()] = &backupPaths.BackupPath[i]
    }
    return children
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetBundleName() string { return "cisco_ios_xr" }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetYangName() string { return "backup-paths" }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) SetParent(parent types.Entity) { backupPaths.parent = parent }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetParent() types.Entity { return backupPaths.parent }

func (backupPaths *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths) GetParentYangName() string { return "global-attributes" }

// MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath
// Tunnel interface number
type MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface number. The type is interface{}
    // with range: 0..65535.
    TunnelNumber interface{}
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetFilter() yfilter.YFilter { return backupPath.YFilter }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) SetFilter(yf yfilter.YFilter) { backupPath.YFilter = yf }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetGoName(yname string) string {
    if yname == "tunnel-number" { return "TunnelNumber" }
    return ""
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetSegmentPath() string {
    return "backup-path" + "[tunnel-number='" + fmt.Sprintf("%v", backupPath.TunnelNumber) + "']"
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-number"] = backupPath.TunnelNumber
    return leafs
}

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetYangName() string { return "backup-path" }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) SetParent(parent types.Entity) { backupPath.parent = parent }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetParent() types.Entity { return backupPath.parent }

func (backupPath *MplsTe_Interfaces_Interface_GlobalAttributes_BackupPaths_BackupPath) GetParentYangName() string { return "backup-paths" }

// MplsTe_GmplsNni
// GMPLS-NNI configuration
type MplsTe_GmplsNni struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path selection configuration for all gmpls nni tunnels. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // Enable MPLS Traffic Engineering GMPLS-NNI. The type is interface{}.
    EnableGmplsNni interface{}

    // GMPLS-NNI topology instance table.
    TopologyInstances MplsTe_GmplsNni_TopologyInstances

    // GMPLS-NNI tunnel-head table.
    TunnelHeads MplsTe_GmplsNni_TunnelHeads
}

func (gmplsNni *MplsTe_GmplsNni) GetFilter() yfilter.YFilter { return gmplsNni.YFilter }

func (gmplsNni *MplsTe_GmplsNni) SetFilter(yf yfilter.YFilter) { gmplsNni.YFilter = yf }

func (gmplsNni *MplsTe_GmplsNni) GetGoName(yname string) string {
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "enable-gmpls-nni" { return "EnableGmplsNni" }
    if yname == "topology-instances" { return "TopologyInstances" }
    if yname == "tunnel-heads" { return "TunnelHeads" }
    return ""
}

func (gmplsNni *MplsTe_GmplsNni) GetSegmentPath() string {
    return "gmpls-nni"
}

func (gmplsNni *MplsTe_GmplsNni) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "topology-instances" {
        return &gmplsNni.TopologyInstances
    }
    if childYangName == "tunnel-heads" {
        return &gmplsNni.TunnelHeads
    }
    return nil
}

func (gmplsNni *MplsTe_GmplsNni) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["topology-instances"] = &gmplsNni.TopologyInstances
    children["tunnel-heads"] = &gmplsNni.TunnelHeads
    return children
}

func (gmplsNni *MplsTe_GmplsNni) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-selection-metric"] = gmplsNni.PathSelectionMetric
    leafs["enable-gmpls-nni"] = gmplsNni.EnableGmplsNni
    return leafs
}

func (gmplsNni *MplsTe_GmplsNni) GetBundleName() string { return "cisco_ios_xr" }

func (gmplsNni *MplsTe_GmplsNni) GetYangName() string { return "gmpls-nni" }

func (gmplsNni *MplsTe_GmplsNni) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gmplsNni *MplsTe_GmplsNni) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gmplsNni *MplsTe_GmplsNni) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gmplsNni *MplsTe_GmplsNni) SetParent(parent types.Entity) { gmplsNni.parent = parent }

func (gmplsNni *MplsTe_GmplsNni) GetParent() types.Entity { return gmplsNni.parent }

func (gmplsNni *MplsTe_GmplsNni) GetParentYangName() string { return "mpls-te" }

// MplsTe_GmplsNni_TopologyInstances
// GMPLS-NNI topology instance table
type MplsTe_GmplsNni_TopologyInstances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GMPLS-NNI topology instance configuration. The type is slice of
    // MplsTe_GmplsNni_TopologyInstances_TopologyInstance.
    TopologyInstance []MplsTe_GmplsNni_TopologyInstances_TopologyInstance
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetFilter() yfilter.YFilter { return topologyInstances.YFilter }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) SetFilter(yf yfilter.YFilter) { topologyInstances.YFilter = yf }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetGoName(yname string) string {
    if yname == "topology-instance" { return "TopologyInstance" }
    return ""
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetSegmentPath() string {
    return "topology-instances"
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "topology-instance" {
        for _, c := range topologyInstances.TopologyInstance {
            if topologyInstances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TopologyInstances_TopologyInstance{}
        topologyInstances.TopologyInstance = append(topologyInstances.TopologyInstance, child)
        return &topologyInstances.TopologyInstance[len(topologyInstances.TopologyInstance)-1]
    }
    return nil
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range topologyInstances.TopologyInstance {
        children[topologyInstances.TopologyInstance[i].GetSegmentPath()] = &topologyInstances.TopologyInstance[i]
    }
    return children
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetBundleName() string { return "cisco_ios_xr" }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetYangName() string { return "topology-instances" }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) SetParent(parent types.Entity) { topologyInstances.parent = parent }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetParent() types.Entity { return topologyInstances.parent }

func (topologyInstances *MplsTe_GmplsNni_TopologyInstances) GetParentYangName() string { return "gmpls-nni" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance
// GMPLS-NNI topology instance configuration
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF area format. The type is OspfAreaMode.
    OspfAreaType interface{}

    // This attribute is a key. Name of IGP instance. The type is string with
    // length: 1..40.
    IgpInstanceName interface{}

    // This attribute is a key. IGP type. The type is MplsTeIgpProtocol.
    IgpType interface{}

    // ospf int. The type is slice of
    // MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt.
    OspfInt []MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt

    // ospfip addr. The type is slice of
    // MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr.
    OspfipAddr []MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetFilter() yfilter.YFilter { return topologyInstance.YFilter }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) SetFilter(yf yfilter.YFilter) { topologyInstance.YFilter = yf }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetGoName(yname string) string {
    if yname == "ospf-area-type" { return "OspfAreaType" }
    if yname == "igp-instance-name" { return "IgpInstanceName" }
    if yname == "igp-type" { return "IgpType" }
    if yname == "ospf-int" { return "OspfInt" }
    if yname == "ospfip-addr" { return "OspfipAddr" }
    return ""
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetSegmentPath() string {
    return "topology-instance" + "[ospf-area-type='" + fmt.Sprintf("%v", topologyInstance.OspfAreaType) + "']" + "[igp-instance-name='" + fmt.Sprintf("%v", topologyInstance.IgpInstanceName) + "']" + "[igp-type='" + fmt.Sprintf("%v", topologyInstance.IgpType) + "']"
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf-int" {
        for _, c := range topologyInstance.OspfInt {
            if topologyInstance.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt{}
        topologyInstance.OspfInt = append(topologyInstance.OspfInt, child)
        return &topologyInstance.OspfInt[len(topologyInstance.OspfInt)-1]
    }
    if childYangName == "ospfip-addr" {
        for _, c := range topologyInstance.OspfipAddr {
            if topologyInstance.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr{}
        topologyInstance.OspfipAddr = append(topologyInstance.OspfipAddr, child)
        return &topologyInstance.OspfipAddr[len(topologyInstance.OspfipAddr)-1]
    }
    return nil
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range topologyInstance.OspfInt {
        children[topologyInstance.OspfInt[i].GetSegmentPath()] = &topologyInstance.OspfInt[i]
    }
    for i := range topologyInstance.OspfipAddr {
        children[topologyInstance.OspfipAddr[i].GetSegmentPath()] = &topologyInstance.OspfipAddr[i]
    }
    return children
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ospf-area-type"] = topologyInstance.OspfAreaType
    leafs["igp-instance-name"] = topologyInstance.IgpInstanceName
    leafs["igp-type"] = topologyInstance.IgpType
    return leafs
}

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetBundleName() string { return "cisco_ios_xr" }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetYangName() string { return "topology-instance" }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) SetParent(parent types.Entity) { topologyInstance.parent = parent }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetParent() types.Entity { return topologyInstance.parent }

func (topologyInstance *MplsTe_GmplsNni_TopologyInstances_TopologyInstance) GetParentYangName() string { return "topology-instances" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt
// ospf int
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IGP area. The type is interface{} with range:
    // -2147483648..2147483647.
    IgpArea interface{}

    // GMPLS-NNI controllers.
    Controllers MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetFilter() yfilter.YFilter { return ospfInt.YFilter }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) SetFilter(yf yfilter.YFilter) { ospfInt.YFilter = yf }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetGoName(yname string) string {
    if yname == "igp-area" { return "IgpArea" }
    if yname == "controllers" { return "Controllers" }
    return ""
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetSegmentPath() string {
    return "ospf-int" + "[igp-area='" + fmt.Sprintf("%v", ospfInt.IgpArea) + "']"
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controllers" {
        return &ospfInt.Controllers
    }
    return nil
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["controllers"] = &ospfInt.Controllers
    return children
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["igp-area"] = ospfInt.IgpArea
    return leafs
}

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetBundleName() string { return "cisco_ios_xr" }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetYangName() string { return "ospf-int" }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) SetParent(parent types.Entity) { ospfInt.parent = parent }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetParent() types.Entity { return ospfInt.parent }

func (ospfInt *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt) GetParentYangName() string { return "topology-instance" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers
// GMPLS-NNI controllers
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a GMPLS NNI controller. The type is slice of
    // MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller.
    Controller []MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetFilter() yfilter.YFilter { return controllers.YFilter }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) SetFilter(yf yfilter.YFilter) { controllers.YFilter = yf }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetGoName(yname string) string {
    if yname == "controller" { return "Controller" }
    return ""
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetSegmentPath() string {
    return "controllers"
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller" {
        for _, c := range controllers.Controller {
            if controllers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller{}
        controllers.Controller = append(controllers.Controller, child)
        return &controllers.Controller[len(controllers.Controller)-1]
    }
    return nil
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllers.Controller {
        children[controllers.Controller[i].GetSegmentPath()] = &controllers.Controller[i]
    }
    return children
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetBundleName() string { return "cisco_ios_xr" }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetYangName() string { return "controllers" }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) SetParent(parent types.Entity) { controllers.parent = parent }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetParent() types.Entity { return controllers.parent }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers) GetParentYangName() string { return "ospf-int" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller
// Configure a GMPLS NNI controller
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Set administrative weight for the interface. The type is interface{} with
    // range: 0..65535.
    AdminWeight interface{}

    // Enable GMPLS-NNI on the link. The type is interface{}.
    Enable interface{}

    // Set link delay for the interface. The type is interface{} with range:
    // 1..16777215.
    Delay interface{}

    // Set tandem connection monitoring for the interface.
    TtiMode MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetFilter() yfilter.YFilter { return controller.YFilter }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) SetFilter(yf yfilter.YFilter) { controller.YFilter = yf }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "admin-weight" { return "AdminWeight" }
    if yname == "enable" { return "Enable" }
    if yname == "delay" { return "Delay" }
    if yname == "tti-mode" { return "TtiMode" }
    return ""
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetSegmentPath() string {
    return "controller" + "[controller-name='" + fmt.Sprintf("%v", controller.ControllerName) + "']"
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tti-mode" {
        return &controller.TtiMode
    }
    return nil
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tti-mode"] = &controller.TtiMode
    return children
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controller.ControllerName
    leafs["admin-weight"] = controller.AdminWeight
    leafs["enable"] = controller.Enable
    leafs["delay"] = controller.Delay
    return leafs
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetBundleName() string { return "cisco_ios_xr" }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetYangName() string { return "controller" }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) SetParent(parent types.Entity) { controller.parent = parent }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetParent() types.Entity { return controller.parent }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller) GetParentYangName() string { return "controllers" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode
// Set tandem connection monitoring for the
// interface
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Trail Trace Identifier. The type is GmplsttiMode.
    TtiModeType interface{}

    // Tandem Connection Monitoring ID for the interface. The type is interface{}
    // with range: 1..6.
    Tcmid interface{}
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetFilter() yfilter.YFilter { return ttiMode.YFilter }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) SetFilter(yf yfilter.YFilter) { ttiMode.YFilter = yf }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetGoName(yname string) string {
    if yname == "tti-mode-type" { return "TtiModeType" }
    if yname == "tcmid" { return "Tcmid" }
    return ""
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetSegmentPath() string {
    return "tti-mode"
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tti-mode-type"] = ttiMode.TtiModeType
    leafs["tcmid"] = ttiMode.Tcmid
    return leafs
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetBundleName() string { return "cisco_ios_xr" }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetYangName() string { return "tti-mode" }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) SetParent(parent types.Entity) { ttiMode.parent = parent }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetParent() types.Entity { return ttiMode.parent }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfInt_Controllers_Controller_TtiMode) GetParentYangName() string { return "controller" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr
// ospfip addr
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // GMPLS-NNI controllers.
    Controllers MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetFilter() yfilter.YFilter { return ospfipAddr.YFilter }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) SetFilter(yf yfilter.YFilter) { ospfipAddr.YFilter = yf }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "controllers" { return "Controllers" }
    return ""
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetSegmentPath() string {
    return "ospfip-addr" + "[address='" + fmt.Sprintf("%v", ospfipAddr.Address) + "']"
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controllers" {
        return &ospfipAddr.Controllers
    }
    return nil
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["controllers"] = &ospfipAddr.Controllers
    return children
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = ospfipAddr.Address
    return leafs
}

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetBundleName() string { return "cisco_ios_xr" }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetYangName() string { return "ospfip-addr" }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) SetParent(parent types.Entity) { ospfipAddr.parent = parent }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetParent() types.Entity { return ospfipAddr.parent }

func (ospfipAddr *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr) GetParentYangName() string { return "topology-instance" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers
// GMPLS-NNI controllers
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a GMPLS NNI controller. The type is slice of
    // MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller.
    Controller []MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetFilter() yfilter.YFilter { return controllers.YFilter }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) SetFilter(yf yfilter.YFilter) { controllers.YFilter = yf }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetGoName(yname string) string {
    if yname == "controller" { return "Controller" }
    return ""
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetSegmentPath() string {
    return "controllers"
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller" {
        for _, c := range controllers.Controller {
            if controllers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller{}
        controllers.Controller = append(controllers.Controller, child)
        return &controllers.Controller[len(controllers.Controller)-1]
    }
    return nil
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllers.Controller {
        children[controllers.Controller[i].GetSegmentPath()] = &controllers.Controller[i]
    }
    return children
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetBundleName() string { return "cisco_ios_xr" }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetYangName() string { return "controllers" }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) SetParent(parent types.Entity) { controllers.parent = parent }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetParent() types.Entity { return controllers.parent }

func (controllers *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers) GetParentYangName() string { return "ospfip-addr" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller
// Configure a GMPLS NNI controller
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Set administrative weight for the interface. The type is interface{} with
    // range: 0..65535.
    AdminWeight interface{}

    // Enable GMPLS-NNI on the link. The type is interface{}.
    Enable interface{}

    // Set link delay for the interface. The type is interface{} with range:
    // 1..16777215.
    Delay interface{}

    // Set tandem connection monitoring for the interface.
    TtiMode MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetFilter() yfilter.YFilter { return controller.YFilter }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) SetFilter(yf yfilter.YFilter) { controller.YFilter = yf }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "admin-weight" { return "AdminWeight" }
    if yname == "enable" { return "Enable" }
    if yname == "delay" { return "Delay" }
    if yname == "tti-mode" { return "TtiMode" }
    return ""
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetSegmentPath() string {
    return "controller" + "[controller-name='" + fmt.Sprintf("%v", controller.ControllerName) + "']"
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tti-mode" {
        return &controller.TtiMode
    }
    return nil
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tti-mode"] = &controller.TtiMode
    return children
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controller.ControllerName
    leafs["admin-weight"] = controller.AdminWeight
    leafs["enable"] = controller.Enable
    leafs["delay"] = controller.Delay
    return leafs
}

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetBundleName() string { return "cisco_ios_xr" }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetYangName() string { return "controller" }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) SetParent(parent types.Entity) { controller.parent = parent }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetParent() types.Entity { return controller.parent }

func (controller *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller) GetParentYangName() string { return "controllers" }

// MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode
// Set tandem connection monitoring for the
// interface
type MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Trail Trace Identifier. The type is GmplsttiMode.
    TtiModeType interface{}

    // Tandem Connection Monitoring ID for the interface. The type is interface{}
    // with range: 1..6.
    Tcmid interface{}
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetFilter() yfilter.YFilter { return ttiMode.YFilter }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) SetFilter(yf yfilter.YFilter) { ttiMode.YFilter = yf }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetGoName(yname string) string {
    if yname == "tti-mode-type" { return "TtiModeType" }
    if yname == "tcmid" { return "Tcmid" }
    return ""
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetSegmentPath() string {
    return "tti-mode"
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tti-mode-type"] = ttiMode.TtiModeType
    leafs["tcmid"] = ttiMode.Tcmid
    return leafs
}

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetBundleName() string { return "cisco_ios_xr" }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetYangName() string { return "tti-mode" }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) SetParent(parent types.Entity) { ttiMode.parent = parent }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetParent() types.Entity { return ttiMode.parent }

func (ttiMode *MplsTe_GmplsNni_TopologyInstances_TopologyInstance_OspfipAddr_Controllers_Controller_TtiMode) GetParentYangName() string { return "controller" }

// MplsTe_GmplsNni_TunnelHeads
// GMPLS-NNI tunnel-head table
type MplsTe_GmplsNni_TunnelHeads struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The configuration for a GMPLS NNI tunnel head-end. The type is slice of
    // MplsTe_GmplsNni_TunnelHeads_TunnelHead.
    TunnelHead []MplsTe_GmplsNni_TunnelHeads_TunnelHead
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetFilter() yfilter.YFilter { return tunnelHeads.YFilter }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) SetFilter(yf yfilter.YFilter) { tunnelHeads.YFilter = yf }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetGoName(yname string) string {
    if yname == "tunnel-head" { return "TunnelHead" }
    return ""
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetSegmentPath() string {
    return "tunnel-heads"
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-head" {
        for _, c := range tunnelHeads.TunnelHead {
            if tunnelHeads.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TunnelHeads_TunnelHead{}
        tunnelHeads.TunnelHead = append(tunnelHeads.TunnelHead, child)
        return &tunnelHeads.TunnelHead[len(tunnelHeads.TunnelHead)-1]
    }
    return nil
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnelHeads.TunnelHead {
        children[tunnelHeads.TunnelHead[i].GetSegmentPath()] = &tunnelHeads.TunnelHead[i]
    }
    return children
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetYangName() string { return "tunnel-heads" }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) SetParent(parent types.Entity) { tunnelHeads.parent = parent }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetParent() types.Entity { return tunnelHeads.parent }

func (tunnelHeads *MplsTe_GmplsNni_TunnelHeads) GetParentYangName() string { return "gmpls-nni" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead
// The configuration for a GMPLS NNI tunnel
// head-end
type MplsTe_GmplsNni_TunnelHeads_TunnelHead struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel ID. The type is interface{} with range:
    // 0..65535.
    TunnelId interface{}

    // The existence of this configuration indicates the a new GMPLS NNI tunnel
    // has been enabled. The type is interface{}.
    Enable interface{}

    // The existence of this configuration indicates the restore LSP of tunnel is
    // shutdown. The type is interface{}.
    RestoreLspShutdown interface{}

    // The existence of this configuration indicates the current/working LSP of
    // tunnel is shutdown. The type is interface{}.
    CurrentLspShutdown interface{}

    // Path selection configuration for this specific tunnel. The type is
    // MplsTePathSelectionMetric.
    PathSelectionMetric interface{}

    // The existence of this configuration indicates the Payload type have been
    // set for the tunnel. The type is OtnPayload.
    Payload interface{}

    // The existence of this configuration indicates the standby/protect LSP of
    // tunnel is shutdown. The type is interface{}.
    StandbyLspShutdown interface{}

    // The existence of this configuration indicates the tunnel is shutdown. The
    // type is interface{}.
    Shutdown interface{}

    // The name of the path-protection profile to be included in signalling
    // messages. The type is string with length: 1..64.
    PathProtectionAttributeSetProfile interface{}

    // Record the route used by the tunnel. The type is interface{}.
    RecordRoute interface{}

    // The name of the tunnel to be included in signalling messages. The type is
    // string with length: 1..254.
    SignalledName interface{}

    // The existence of this configuration indicates the signalled bandwidth has
    // been set for the tunnel.
    SignalledBandwidth MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth

    // The existence of this configuration indicates the destination has been set
    // for the tunnel.
    Destination MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination

    // The configuration for a GMPLS NNI tunnel protection switch.
    ProtectionSwitching MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching

    // Tunnel event logging.
    Logging MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging

    // GMPLS NNI path options.
    PathOptions MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions

    // The existence of this configuration indicates the static UNI endpoints have
    // been set for the tunnel.
    StaticUni MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetFilter() yfilter.YFilter { return tunnelHead.YFilter }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) SetFilter(yf yfilter.YFilter) { tunnelHead.YFilter = yf }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetGoName(yname string) string {
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "enable" { return "Enable" }
    if yname == "restore-lsp-shutdown" { return "RestoreLspShutdown" }
    if yname == "current-lsp-shutdown" { return "CurrentLspShutdown" }
    if yname == "path-selection-metric" { return "PathSelectionMetric" }
    if yname == "payload" { return "Payload" }
    if yname == "standby-lsp-shutdown" { return "StandbyLspShutdown" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "path-protection-attribute-set-profile" { return "PathProtectionAttributeSetProfile" }
    if yname == "record-route" { return "RecordRoute" }
    if yname == "signalled-name" { return "SignalledName" }
    if yname == "signalled-bandwidth" { return "SignalledBandwidth" }
    if yname == "destination" { return "Destination" }
    if yname == "protection-switching" { return "ProtectionSwitching" }
    if yname == "logging" { return "Logging" }
    if yname == "path-options" { return "PathOptions" }
    if yname == "static-uni" { return "StaticUni" }
    return ""
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetSegmentPath() string {
    return "tunnel-head" + "[tunnel-id='" + fmt.Sprintf("%v", tunnelHead.TunnelId) + "']"
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "signalled-bandwidth" {
        return &tunnelHead.SignalledBandwidth
    }
    if childYangName == "destination" {
        return &tunnelHead.Destination
    }
    if childYangName == "protection-switching" {
        return &tunnelHead.ProtectionSwitching
    }
    if childYangName == "logging" {
        return &tunnelHead.Logging
    }
    if childYangName == "path-options" {
        return &tunnelHead.PathOptions
    }
    if childYangName == "static-uni" {
        return &tunnelHead.StaticUni
    }
    return nil
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["signalled-bandwidth"] = &tunnelHead.SignalledBandwidth
    children["destination"] = &tunnelHead.Destination
    children["protection-switching"] = &tunnelHead.ProtectionSwitching
    children["logging"] = &tunnelHead.Logging
    children["path-options"] = &tunnelHead.PathOptions
    children["static-uni"] = &tunnelHead.StaticUni
    return children
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-id"] = tunnelHead.TunnelId
    leafs["enable"] = tunnelHead.Enable
    leafs["restore-lsp-shutdown"] = tunnelHead.RestoreLspShutdown
    leafs["current-lsp-shutdown"] = tunnelHead.CurrentLspShutdown
    leafs["path-selection-metric"] = tunnelHead.PathSelectionMetric
    leafs["payload"] = tunnelHead.Payload
    leafs["standby-lsp-shutdown"] = tunnelHead.StandbyLspShutdown
    leafs["shutdown"] = tunnelHead.Shutdown
    leafs["path-protection-attribute-set-profile"] = tunnelHead.PathProtectionAttributeSetProfile
    leafs["record-route"] = tunnelHead.RecordRoute
    leafs["signalled-name"] = tunnelHead.SignalledName
    return leafs
}

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetYangName() string { return "tunnel-head" }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) SetParent(parent types.Entity) { tunnelHead.parent = parent }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetParent() types.Entity { return tunnelHead.parent }

func (tunnelHead *MplsTe_GmplsNni_TunnelHeads_TunnelHead) GetParentYangName() string { return "tunnel-heads" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth
// The existence of this configuration indicates
// the signalled bandwidth has been set for the
// tunnel
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The g.709 signal type requested. The type is OtnSignaledBandwidth.
    SignalledBandwidthType interface{}

    // Bitrate value in Kbps for ODUflex framing type. The type is interface{}
    // with range: -2147483648..2147483647. Units are kbit/s.
    Bitrate interface{}

    // Framing type in case of ODUflex signal type. The type is
    // OtnSignaledBandwidthFlexFraming.
    OdUflexFramingType interface{}
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetFilter() yfilter.YFilter { return signalledBandwidth.YFilter }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) SetFilter(yf yfilter.YFilter) { signalledBandwidth.YFilter = yf }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetGoName(yname string) string {
    if yname == "signalled-bandwidth-type" { return "SignalledBandwidthType" }
    if yname == "bitrate" { return "Bitrate" }
    if yname == "od-uflex-framing-type" { return "OdUflexFramingType" }
    return ""
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetSegmentPath() string {
    return "signalled-bandwidth"
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["signalled-bandwidth-type"] = signalledBandwidth.SignalledBandwidthType
    leafs["bitrate"] = signalledBandwidth.Bitrate
    leafs["od-uflex-framing-type"] = signalledBandwidth.OdUflexFramingType
    return leafs
}

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetBundleName() string { return "cisco_ios_xr" }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetYangName() string { return "signalled-bandwidth" }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) SetParent(parent types.Entity) { signalledBandwidth.parent = parent }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetParent() types.Entity { return signalledBandwidth.parent }

func (signalledBandwidth *MplsTe_GmplsNni_TunnelHeads_TunnelHead_SignalledBandwidth) GetParentYangName() string { return "tunnel-head" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination
// The existence of this configuration indicates
// the destination has been set for the tunnel
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV4 tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Destination interface{}

    // Destination type whether it is unicast or unnumbered. The type is
    // OtnDestination.
    DestinationType interface{}

    // Interface index of port. The type is interface{} with range:
    // -2147483648..2147483647.
    InterfaceIfIndex interface{}
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetFilter() yfilter.YFilter { return destination.YFilter }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) SetFilter(yf yfilter.YFilter) { destination.YFilter = yf }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetGoName(yname string) string {
    if yname == "destination" { return "Destination" }
    if yname == "destination-type" { return "DestinationType" }
    if yname == "interface-if-index" { return "InterfaceIfIndex" }
    return ""
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetSegmentPath() string {
    return "destination"
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination"] = destination.Destination
    leafs["destination-type"] = destination.DestinationType
    leafs["interface-if-index"] = destination.InterfaceIfIndex
    return leafs
}

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetBundleName() string { return "cisco_ios_xr" }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetYangName() string { return "destination" }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) SetParent(parent types.Entity) { destination.parent = parent }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetParent() types.Entity { return destination.parent }

func (destination *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Destination) GetParentYangName() string { return "tunnel-head" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching
// The configuration for a GMPLS NNI tunnel
// protection switch
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The configuration is used to prevent switch over for a particular path type
    // in tunnel. The type is OtnProtectionSwitchLockout.
    Lockout interface{}
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetFilter() yfilter.YFilter { return protectionSwitching.YFilter }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) SetFilter(yf yfilter.YFilter) { protectionSwitching.YFilter = yf }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetGoName(yname string) string {
    if yname == "lockout" { return "Lockout" }
    return ""
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetSegmentPath() string {
    return "protection-switching"
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lockout"] = protectionSwitching.Lockout
    return leafs
}

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetBundleName() string { return "cisco_ios_xr" }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetYangName() string { return "protection-switching" }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) SetParent(parent types.Entity) { protectionSwitching.parent = parent }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetParent() types.Entity { return protectionSwitching.parent }

func (protectionSwitching *MplsTe_GmplsNni_TunnelHeads_TunnelHead_ProtectionSwitching) GetParentYangName() string { return "tunnel-head" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging
// Tunnel event logging
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Log all tunnel messages for changes in Active LSP. The type is interface{}.
    ActiveLspMessage interface{}

    // Log all messages for changes in state of Homepath of Working LSP. The type
    // is interface{}.
    HomepathStateMessage interface{}

    // Log all tunnel sub-LSP state messages. The type is interface{}.
    SignallingStateMessage interface{}

    // Log all tunnel messages for changes in path-change. The type is
    // interface{}.
    PathChangeMessage interface{}

    // Log all tunnel messages for static cross-connect messages. The type is
    // interface{}.
    StaticCrossConnectMessage interface{}

    // Log all tunnel messages for changes in tunnel-state. The type is
    // interface{}.
    TunnelStateMessage interface{}

    // Log tunnel messages for insufficient bandwidth. The type is interface{}.
    InsufficientBwMessage interface{}
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetFilter() yfilter.YFilter { return logging.YFilter }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) SetFilter(yf yfilter.YFilter) { logging.YFilter = yf }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetGoName(yname string) string {
    if yname == "active-lsp-message" { return "ActiveLspMessage" }
    if yname == "homepath-state-message" { return "HomepathStateMessage" }
    if yname == "signalling-state-message" { return "SignallingStateMessage" }
    if yname == "path-change-message" { return "PathChangeMessage" }
    if yname == "static-cross-connect-message" { return "StaticCrossConnectMessage" }
    if yname == "tunnel-state-message" { return "TunnelStateMessage" }
    if yname == "insufficient-bw-message" { return "InsufficientBwMessage" }
    return ""
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetSegmentPath() string {
    return "logging"
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active-lsp-message"] = logging.ActiveLspMessage
    leafs["homepath-state-message"] = logging.HomepathStateMessage
    leafs["signalling-state-message"] = logging.SignallingStateMessage
    leafs["path-change-message"] = logging.PathChangeMessage
    leafs["static-cross-connect-message"] = logging.StaticCrossConnectMessage
    leafs["tunnel-state-message"] = logging.TunnelStateMessage
    leafs["insufficient-bw-message"] = logging.InsufficientBwMessage
    return leafs
}

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetBundleName() string { return "cisco_ios_xr" }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetYangName() string { return "logging" }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) SetParent(parent types.Entity) { logging.parent = parent }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetParent() types.Entity { return logging.parent }

func (logging *MplsTe_GmplsNni_TunnelHeads_TunnelHead_Logging) GetParentYangName() string { return "tunnel-head" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions
// GMPLS NNI path options
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The existence of this configuration indicates the path options have been
    // set for the tunnel. The type is slice of
    // MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption.
    PathOption []MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetFilter() yfilter.YFilter { return pathOptions.YFilter }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) SetFilter(yf yfilter.YFilter) { pathOptions.YFilter = yf }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetGoName(yname string) string {
    if yname == "path-option" { return "PathOption" }
    return ""
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetSegmentPath() string {
    return "path-options"
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-option" {
        for _, c := range pathOptions.PathOption {
            if pathOptions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption{}
        pathOptions.PathOption = append(pathOptions.PathOption, child)
        return &pathOptions.PathOption[len(pathOptions.PathOption)-1]
    }
    return nil
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pathOptions.PathOption {
        children[pathOptions.PathOption[i].GetSegmentPath()] = &pathOptions.PathOption[i]
    }
    return children
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetBundleName() string { return "cisco_ios_xr" }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetYangName() string { return "path-options" }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) SetParent(parent types.Entity) { pathOptions.parent = parent }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetParent() types.Entity { return pathOptions.parent }

func (pathOptions *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions) GetParentYangName() string { return "tunnel-head" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption
// The existence of this configuration
// indicates the path options have been set for
// the tunnel
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Preference level for this path option. The type is
    // interface{} with range: 1..1000.
    PreferenceLevel interface{}

    // The type of the path option. The type is MplsTePathOption.
    PathType interface{}

    // The ID of the IP explicit path associated with this option. The type is
    // interface{} with range: 1..65535.
    PathId interface{}

    // The name of the IP explicit path associated with this option. The type is
    // string.
    PathName interface{}

    // Preference level of the protecting explicit path. . The type is interface{}
    // with range: 1..1001.
    ProtectedByPreferenceLevel interface{}

    // Preference level of the restore path. . The type is interface{} with range:
    // 1..1000.
    RestoreByPreferenceLevel interface{}

    // The route-exclusion type. The type is interface{}. This attribute is
    // mandatory.
    XroType interface{}

    // The name of the XRO attribute set to be used for this path-option. The type
    // is string with length: 1..64.
    XroAttributeSetName interface{}

    // Lockdown properties. The type is MplsTePathOptionProperty.
    Lockdown interface{}
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetFilter() yfilter.YFilter { return pathOption.YFilter }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) SetFilter(yf yfilter.YFilter) { pathOption.YFilter = yf }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetGoName(yname string) string {
    if yname == "preference-level" { return "PreferenceLevel" }
    if yname == "path-type" { return "PathType" }
    if yname == "path-id" { return "PathId" }
    if yname == "path-name" { return "PathName" }
    if yname == "protected-by-preference-level" { return "ProtectedByPreferenceLevel" }
    if yname == "restore-by-preference-level" { return "RestoreByPreferenceLevel" }
    if yname == "xro-type" { return "XroType" }
    if yname == "xro-attribute-set-name" { return "XroAttributeSetName" }
    if yname == "lockdown" { return "Lockdown" }
    return ""
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetSegmentPath() string {
    return "path-option" + "[preference-level='" + fmt.Sprintf("%v", pathOption.PreferenceLevel) + "']"
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["preference-level"] = pathOption.PreferenceLevel
    leafs["path-type"] = pathOption.PathType
    leafs["path-id"] = pathOption.PathId
    leafs["path-name"] = pathOption.PathName
    leafs["protected-by-preference-level"] = pathOption.ProtectedByPreferenceLevel
    leafs["restore-by-preference-level"] = pathOption.RestoreByPreferenceLevel
    leafs["xro-type"] = pathOption.XroType
    leafs["xro-attribute-set-name"] = pathOption.XroAttributeSetName
    leafs["lockdown"] = pathOption.Lockdown
    return leafs
}

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetBundleName() string { return "cisco_ios_xr" }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetYangName() string { return "path-option" }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) SetParent(parent types.Entity) { pathOption.parent = parent }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetParent() types.Entity { return pathOption.parent }

func (pathOption *MplsTe_GmplsNni_TunnelHeads_TunnelHead_PathOptions_PathOption) GetParentYangName() string { return "path-options" }

// MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni
// The existence of this configuration indicates
// the static UNI endpoints have been set for
// the tunnel
type MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of  ingress controller. The type is string with length: 1..255.
    IngressControllerName interface{}

    // Interface index of Egress controller. The type is interface{} with range:
    // -2147483648..2147483647.
    EgressControllerIfIndex interface{}

    // Ingress type whether it is xconnect or terminated. The type is
    // OtnStaticUni.
    IngressType interface{}

    // Egress type whether it is xconnect or terminated. The type is OtnStaticUni.
    EgressType interface{}
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetFilter() yfilter.YFilter { return staticUni.YFilter }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) SetFilter(yf yfilter.YFilter) { staticUni.YFilter = yf }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetGoName(yname string) string {
    if yname == "ingress-controller-name" { return "IngressControllerName" }
    if yname == "egress-controller-if-index" { return "EgressControllerIfIndex" }
    if yname == "ingress-type" { return "IngressType" }
    if yname == "egress-type" { return "EgressType" }
    return ""
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetSegmentPath() string {
    return "static-uni"
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ingress-controller-name"] = staticUni.IngressControllerName
    leafs["egress-controller-if-index"] = staticUni.EgressControllerIfIndex
    leafs["ingress-type"] = staticUni.IngressType
    leafs["egress-type"] = staticUni.EgressType
    return leafs
}

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetBundleName() string { return "cisco_ios_xr" }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetYangName() string { return "static-uni" }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) SetParent(parent types.Entity) { staticUni.parent = parent }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetParent() types.Entity { return staticUni.parent }

func (staticUni *MplsTe_GmplsNni_TunnelHeads_TunnelHead_StaticUni) GetParentYangName() string { return "tunnel-head" }

// MplsTe_Lcac
// LCAC specific MPLS global configuration
type MplsTe_Lcac struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth hold timer value (seconds). The type is interface{} with range:
    // 1..300. Units are second.
    BandwidthHoldTimer interface{}

    // Bundle capacity preemption timer value (seconds). The type is interface{}
    // with range: 0..300. Units are second.
    DelayPreemptBundleCapacityTimer interface{}

    // Periodic flooding value (seconds). The type is interface{} with range:
    // 0..3600. Units are second.
    PeriodicFloodingTimer interface{}

    // BFD configuration.
    Bfd MplsTe_Lcac_Bfd

    // Configure flooding threshold as percentage of total link bandwidth.
    FloodingThreshold MplsTe_Lcac_FloodingThreshold
}

func (lcac *MplsTe_Lcac) GetFilter() yfilter.YFilter { return lcac.YFilter }

func (lcac *MplsTe_Lcac) SetFilter(yf yfilter.YFilter) { lcac.YFilter = yf }

func (lcac *MplsTe_Lcac) GetGoName(yname string) string {
    if yname == "bandwidth-hold-timer" { return "BandwidthHoldTimer" }
    if yname == "delay-preempt-bundle-capacity-timer" { return "DelayPreemptBundleCapacityTimer" }
    if yname == "periodic-flooding-timer" { return "PeriodicFloodingTimer" }
    if yname == "bfd" { return "Bfd" }
    if yname == "flooding-threshold" { return "FloodingThreshold" }
    return ""
}

func (lcac *MplsTe_Lcac) GetSegmentPath() string {
    return "lcac"
}

func (lcac *MplsTe_Lcac) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd" {
        return &lcac.Bfd
    }
    if childYangName == "flooding-threshold" {
        return &lcac.FloodingThreshold
    }
    return nil
}

func (lcac *MplsTe_Lcac) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd"] = &lcac.Bfd
    children["flooding-threshold"] = &lcac.FloodingThreshold
    return children
}

func (lcac *MplsTe_Lcac) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bandwidth-hold-timer"] = lcac.BandwidthHoldTimer
    leafs["delay-preempt-bundle-capacity-timer"] = lcac.DelayPreemptBundleCapacityTimer
    leafs["periodic-flooding-timer"] = lcac.PeriodicFloodingTimer
    return leafs
}

func (lcac *MplsTe_Lcac) GetBundleName() string { return "cisco_ios_xr" }

func (lcac *MplsTe_Lcac) GetYangName() string { return "lcac" }

func (lcac *MplsTe_Lcac) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcac *MplsTe_Lcac) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcac *MplsTe_Lcac) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcac *MplsTe_Lcac) SetParent(parent types.Entity) { lcac.parent = parent }

func (lcac *MplsTe_Lcac) GetParent() types.Entity { return lcac.parent }

func (lcac *MplsTe_Lcac) GetParentYangName() string { return "mpls-te" }

// MplsTe_Lcac_Bfd
// BFD configuration
type MplsTe_Lcac_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval for BFD sessions created by TE. The type is interface{} with
    // range: 15..200. Units are millisecond.
    Interval interface{}

    // Detection multiplier for BFD sessions created by TE. The type is
    // interface{} with range: 2..10.
    DetectionMultiplier interface{}
}

func (bfd *MplsTe_Lcac_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *MplsTe_Lcac_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *MplsTe_Lcac_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (bfd *MplsTe_Lcac_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *MplsTe_Lcac_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *MplsTe_Lcac_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *MplsTe_Lcac_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *MplsTe_Lcac_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *MplsTe_Lcac_Bfd) GetYangName() string { return "bfd" }

func (bfd *MplsTe_Lcac_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *MplsTe_Lcac_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *MplsTe_Lcac_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *MplsTe_Lcac_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *MplsTe_Lcac_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *MplsTe_Lcac_Bfd) GetParentYangName() string { return "lcac" }

// MplsTe_Lcac_FloodingThreshold
// Configure flooding threshold as percentage of
// total link bandwidth.
type MplsTe_Lcac_FloodingThreshold struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Upward flooding Threshold in percentages of total bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage.
    UpStream interface{}

    // Downward flooding Threshold in percentages of total bandwidth. The type is
    // interface{} with range: 0..100. Units are percentage.
    DownStream interface{}
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetFilter() yfilter.YFilter { return floodingThreshold.YFilter }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) SetFilter(yf yfilter.YFilter) { floodingThreshold.YFilter = yf }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetGoName(yname string) string {
    if yname == "up-stream" { return "UpStream" }
    if yname == "down-stream" { return "DownStream" }
    return ""
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetSegmentPath() string {
    return "flooding-threshold"
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["up-stream"] = floodingThreshold.UpStream
    leafs["down-stream"] = floodingThreshold.DownStream
    return leafs
}

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetBundleName() string { return "cisco_ios_xr" }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetYangName() string { return "flooding-threshold" }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) SetParent(parent types.Entity) { floodingThreshold.parent = parent }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetParent() types.Entity { return floodingThreshold.parent }

func (floodingThreshold *MplsTe_Lcac_FloodingThreshold) GetParentYangName() string { return "lcac" }

